
rpm_controller_pid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067ac  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800697c  0800697c  0000797c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a40  08006a40  00008070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006a40  08006a40  00007a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a48  08006a48  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a48  08006a48  00007a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a4c  08006a4c  00007a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006a50  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000070  08006ac0  00008070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08006ac0  000083e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3ad  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f25  00000000  00000000  0001644d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00018378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a6c  00000000  00000000  000190c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022080  00000000  00000000  00019b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef64  00000000  00000000  0003bbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1592  00000000  00000000  0004ab10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c0a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e14  00000000  00000000  0011c0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0011fefc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006964 	.word	0x08006964

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08006964 	.word	0x08006964

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	f000 b988 	b.w	8000dd4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	468e      	mov	lr, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	4688      	mov	r8, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4617      	mov	r7, r2
 8000af0:	d962      	bls.n	8000bb8 <__udivmoddi4+0xdc>
 8000af2:	fab2 f682 	clz	r6, r2
 8000af6:	b14e      	cbz	r6, 8000b0c <__udivmoddi4+0x30>
 8000af8:	f1c6 0320 	rsb	r3, r6, #32
 8000afc:	fa01 f806 	lsl.w	r8, r1, r6
 8000b00:	fa20 f303 	lsr.w	r3, r0, r3
 8000b04:	40b7      	lsls	r7, r6
 8000b06:	ea43 0808 	orr.w	r8, r3, r8
 8000b0a:	40b4      	lsls	r4, r6
 8000b0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b10:	fa1f fc87 	uxth.w	ip, r7
 8000b14:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b18:	0c23      	lsrs	r3, r4, #16
 8000b1a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b22:	fb01 f20c 	mul.w	r2, r1, ip
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d909      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b2a:	18fb      	adds	r3, r7, r3
 8000b2c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000b30:	f080 80ea 	bcs.w	8000d08 <__udivmoddi4+0x22c>
 8000b34:	429a      	cmp	r2, r3
 8000b36:	f240 80e7 	bls.w	8000d08 <__udivmoddi4+0x22c>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	443b      	add	r3, r7
 8000b3e:	1a9a      	subs	r2, r3, r2
 8000b40:	b2a3      	uxth	r3, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b4e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b52:	459c      	cmp	ip, r3
 8000b54:	d909      	bls.n	8000b6a <__udivmoddi4+0x8e>
 8000b56:	18fb      	adds	r3, r7, r3
 8000b58:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000b5c:	f080 80d6 	bcs.w	8000d0c <__udivmoddi4+0x230>
 8000b60:	459c      	cmp	ip, r3
 8000b62:	f240 80d3 	bls.w	8000d0c <__udivmoddi4+0x230>
 8000b66:	443b      	add	r3, r7
 8000b68:	3802      	subs	r0, #2
 8000b6a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b6e:	eba3 030c 	sub.w	r3, r3, ip
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11d      	cbz	r5, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40f3      	lsrs	r3, r6
 8000b78:	2200      	movs	r2, #0
 8000b7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d905      	bls.n	8000b92 <__udivmoddi4+0xb6>
 8000b86:	b10d      	cbz	r5, 8000b8c <__udivmoddi4+0xb0>
 8000b88:	e9c5 0100 	strd	r0, r1, [r5]
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e7f5      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000b92:	fab3 f183 	clz	r1, r3
 8000b96:	2900      	cmp	r1, #0
 8000b98:	d146      	bne.n	8000c28 <__udivmoddi4+0x14c>
 8000b9a:	4573      	cmp	r3, lr
 8000b9c:	d302      	bcc.n	8000ba4 <__udivmoddi4+0xc8>
 8000b9e:	4282      	cmp	r2, r0
 8000ba0:	f200 8105 	bhi.w	8000dae <__udivmoddi4+0x2d2>
 8000ba4:	1a84      	subs	r4, r0, r2
 8000ba6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000baa:	2001      	movs	r0, #1
 8000bac:	4690      	mov	r8, r2
 8000bae:	2d00      	cmp	r5, #0
 8000bb0:	d0e5      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb2:	e9c5 4800 	strd	r4, r8, [r5]
 8000bb6:	e7e2      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	f000 8090 	beq.w	8000cde <__udivmoddi4+0x202>
 8000bbe:	fab2 f682 	clz	r6, r2
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	f040 80a4 	bne.w	8000d10 <__udivmoddi4+0x234>
 8000bc8:	1a8a      	subs	r2, r1, r2
 8000bca:	0c03      	lsrs	r3, r0, #16
 8000bcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd0:	b280      	uxth	r0, r0
 8000bd2:	b2bc      	uxth	r4, r7
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bda:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000be2:	fb04 f20c 	mul.w	r2, r4, ip
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d907      	bls.n	8000bfa <__udivmoddi4+0x11e>
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000bf0:	d202      	bcs.n	8000bf8 <__udivmoddi4+0x11c>
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	f200 80e0 	bhi.w	8000db8 <__udivmoddi4+0x2dc>
 8000bf8:	46c4      	mov	ip, r8
 8000bfa:	1a9b      	subs	r3, r3, r2
 8000bfc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c00:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c04:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c08:	fb02 f404 	mul.w	r4, r2, r4
 8000c0c:	429c      	cmp	r4, r3
 8000c0e:	d907      	bls.n	8000c20 <__udivmoddi4+0x144>
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x142>
 8000c18:	429c      	cmp	r4, r3
 8000c1a:	f200 80ca 	bhi.w	8000db2 <__udivmoddi4+0x2d6>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	1b1b      	subs	r3, r3, r4
 8000c22:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c26:	e7a5      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c28:	f1c1 0620 	rsb	r6, r1, #32
 8000c2c:	408b      	lsls	r3, r1
 8000c2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c32:	431f      	orrs	r7, r3
 8000c34:	fa0e f401 	lsl.w	r4, lr, r1
 8000c38:	fa20 f306 	lsr.w	r3, r0, r6
 8000c3c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c40:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c44:	4323      	orrs	r3, r4
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	fa1f fc87 	uxth.w	ip, r7
 8000c4e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c52:	0c1c      	lsrs	r4, r3, #16
 8000c54:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c58:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c5c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	fa02 f201 	lsl.w	r2, r2, r1
 8000c66:	d909      	bls.n	8000c7c <__udivmoddi4+0x1a0>
 8000c68:	193c      	adds	r4, r7, r4
 8000c6a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000c6e:	f080 809c 	bcs.w	8000daa <__udivmoddi4+0x2ce>
 8000c72:	45a6      	cmp	lr, r4
 8000c74:	f240 8099 	bls.w	8000daa <__udivmoddi4+0x2ce>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	443c      	add	r4, r7
 8000c7c:	eba4 040e 	sub.w	r4, r4, lr
 8000c80:	fa1f fe83 	uxth.w	lr, r3
 8000c84:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c88:	fb09 4413 	mls	r4, r9, r3, r4
 8000c8c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c90:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c94:	45a4      	cmp	ip, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x1ce>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000c9e:	f080 8082 	bcs.w	8000da6 <__udivmoddi4+0x2ca>
 8000ca2:	45a4      	cmp	ip, r4
 8000ca4:	d97f      	bls.n	8000da6 <__udivmoddi4+0x2ca>
 8000ca6:	3b02      	subs	r3, #2
 8000ca8:	443c      	add	r4, r7
 8000caa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cae:	eba4 040c 	sub.w	r4, r4, ip
 8000cb2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000cb6:	4564      	cmp	r4, ip
 8000cb8:	4673      	mov	r3, lr
 8000cba:	46e1      	mov	r9, ip
 8000cbc:	d362      	bcc.n	8000d84 <__udivmoddi4+0x2a8>
 8000cbe:	d05f      	beq.n	8000d80 <__udivmoddi4+0x2a4>
 8000cc0:	b15d      	cbz	r5, 8000cda <__udivmoddi4+0x1fe>
 8000cc2:	ebb8 0203 	subs.w	r2, r8, r3
 8000cc6:	eb64 0409 	sbc.w	r4, r4, r9
 8000cca:	fa04 f606 	lsl.w	r6, r4, r6
 8000cce:	fa22 f301 	lsr.w	r3, r2, r1
 8000cd2:	431e      	orrs	r6, r3
 8000cd4:	40cc      	lsrs	r4, r1
 8000cd6:	e9c5 6400 	strd	r6, r4, [r5]
 8000cda:	2100      	movs	r1, #0
 8000cdc:	e74f      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000cde:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ce2:	0c01      	lsrs	r1, r0, #16
 8000ce4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ce8:	b280      	uxth	r0, r0
 8000cea:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cee:	463b      	mov	r3, r7
 8000cf0:	4638      	mov	r0, r7
 8000cf2:	463c      	mov	r4, r7
 8000cf4:	46b8      	mov	r8, r7
 8000cf6:	46be      	mov	lr, r7
 8000cf8:	2620      	movs	r6, #32
 8000cfa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cfe:	eba2 0208 	sub.w	r2, r2, r8
 8000d02:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d06:	e766      	b.n	8000bd6 <__udivmoddi4+0xfa>
 8000d08:	4601      	mov	r1, r0
 8000d0a:	e718      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	e72c      	b.n	8000b6a <__udivmoddi4+0x8e>
 8000d10:	f1c6 0220 	rsb	r2, r6, #32
 8000d14:	fa2e f302 	lsr.w	r3, lr, r2
 8000d18:	40b7      	lsls	r7, r6
 8000d1a:	40b1      	lsls	r1, r6
 8000d1c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d24:	430a      	orrs	r2, r1
 8000d26:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d2a:	b2bc      	uxth	r4, r7
 8000d2c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d30:	0c11      	lsrs	r1, r2, #16
 8000d32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d36:	fb08 f904 	mul.w	r9, r8, r4
 8000d3a:	40b0      	lsls	r0, r6
 8000d3c:	4589      	cmp	r9, r1
 8000d3e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d42:	b280      	uxth	r0, r0
 8000d44:	d93e      	bls.n	8000dc4 <__udivmoddi4+0x2e8>
 8000d46:	1879      	adds	r1, r7, r1
 8000d48:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000d4c:	d201      	bcs.n	8000d52 <__udivmoddi4+0x276>
 8000d4e:	4589      	cmp	r9, r1
 8000d50:	d81f      	bhi.n	8000d92 <__udivmoddi4+0x2b6>
 8000d52:	eba1 0109 	sub.w	r1, r1, r9
 8000d56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d5a:	fb09 f804 	mul.w	r8, r9, r4
 8000d5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d62:	b292      	uxth	r2, r2
 8000d64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d68:	4542      	cmp	r2, r8
 8000d6a:	d229      	bcs.n	8000dc0 <__udivmoddi4+0x2e4>
 8000d6c:	18ba      	adds	r2, r7, r2
 8000d6e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000d72:	d2c4      	bcs.n	8000cfe <__udivmoddi4+0x222>
 8000d74:	4542      	cmp	r2, r8
 8000d76:	d2c2      	bcs.n	8000cfe <__udivmoddi4+0x222>
 8000d78:	f1a9 0102 	sub.w	r1, r9, #2
 8000d7c:	443a      	add	r2, r7
 8000d7e:	e7be      	b.n	8000cfe <__udivmoddi4+0x222>
 8000d80:	45f0      	cmp	r8, lr
 8000d82:	d29d      	bcs.n	8000cc0 <__udivmoddi4+0x1e4>
 8000d84:	ebbe 0302 	subs.w	r3, lr, r2
 8000d88:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	46e1      	mov	r9, ip
 8000d90:	e796      	b.n	8000cc0 <__udivmoddi4+0x1e4>
 8000d92:	eba7 0909 	sub.w	r9, r7, r9
 8000d96:	4449      	add	r1, r9
 8000d98:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d9c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000da0:	fb09 f804 	mul.w	r8, r9, r4
 8000da4:	e7db      	b.n	8000d5e <__udivmoddi4+0x282>
 8000da6:	4673      	mov	r3, lr
 8000da8:	e77f      	b.n	8000caa <__udivmoddi4+0x1ce>
 8000daa:	4650      	mov	r0, sl
 8000dac:	e766      	b.n	8000c7c <__udivmoddi4+0x1a0>
 8000dae:	4608      	mov	r0, r1
 8000db0:	e6fd      	b.n	8000bae <__udivmoddi4+0xd2>
 8000db2:	443b      	add	r3, r7
 8000db4:	3a02      	subs	r2, #2
 8000db6:	e733      	b.n	8000c20 <__udivmoddi4+0x144>
 8000db8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dbc:	443b      	add	r3, r7
 8000dbe:	e71c      	b.n	8000bfa <__udivmoddi4+0x11e>
 8000dc0:	4649      	mov	r1, r9
 8000dc2:	e79c      	b.n	8000cfe <__udivmoddi4+0x222>
 8000dc4:	eba1 0109 	sub.w	r1, r1, r9
 8000dc8:	46c4      	mov	ip, r8
 8000dca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dce:	fb09 f804 	mul.w	r8, r9, r4
 8000dd2:	e7c4      	b.n	8000d5e <__udivmoddi4+0x282>

08000dd4 <__aeabi_idiv0>:
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop

08000dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dde:	f000 ffa7 	bl	8001d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de2:	f000 f8c5 	bl	8000f70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de6:	f000 fad9 	bl	800139c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dea:	f000 faad 	bl	8001348 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000dee:	f000 fa57 	bl	80012a0 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000df2:	f000 f92b 	bl	800104c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000df6:	f000 f9e3 	bl	80011c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000dfa:	213c      	movs	r1, #60	@ 0x3c
 8000dfc:	484a      	ldr	r0, [pc, #296]	@ (8000f28 <main+0x150>)
 8000dfe:	f002 ff21 	bl	8003c44 <HAL_TIM_Encoder_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000e02:	2100      	movs	r1, #0
 8000e04:	4849      	ldr	r0, [pc, #292]	@ (8000f2c <main+0x154>)
 8000e06:	f002 fd4f 	bl	80038a8 <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart2, &cmd, 1);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4948      	ldr	r1, [pc, #288]	@ (8000f30 <main+0x158>)
 8000e0e:	4849      	ldr	r0, [pc, #292]	@ (8000f34 <main+0x15c>)
 8000e10:	f004 f977 	bl	8005102 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e14:	2100      	movs	r1, #0
 8000e16:	4848      	ldr	r0, [pc, #288]	@ (8000f38 <main+0x160>)
 8000e18:	f002 fc24 	bl	8003664 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 encoder_position = __HAL_TIM_GET_COUNTER(&htim4);
 8000e1c:	4b42      	ldr	r3, [pc, #264]	@ (8000f28 <main+0x150>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e22:	4a46      	ldr	r2, [pc, #280]	@ (8000f3c <main+0x164>)
 8000e24:	6013      	str	r3, [r2, #0]
	 rpm_real = frequencia*60;
 8000e26:	4b46      	ldr	r3, [pc, #280]	@ (8000f40 <main+0x168>)
 8000e28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e2c:	f04f 0200 	mov.w	r2, #0
 8000e30:	4b44      	ldr	r3, [pc, #272]	@ (8000f44 <main+0x16c>)
 8000e32:	f7ff fc01 	bl	8000638 <__aeabi_dmul>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4943      	ldr	r1, [pc, #268]	@ (8000f48 <main+0x170>)
 8000e3c:	e9c1 2300 	strd	r2, r3, [r1]
	 Encoder_CheckChange(&htim4);
 8000e40:	4839      	ldr	r0, [pc, #228]	@ (8000f28 <main+0x150>)
 8000e42:	f000 fc73 	bl	800172c <Encoder_CheckChange>
	 if(rpm_selection > 3){
 8000e46:	4b41      	ldr	r3, [pc, #260]	@ (8000f4c <main+0x174>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d903      	bls.n	8000e56 <main+0x7e>
		 rpm_selection = 3;
 8000e4e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f4c <main+0x174>)
 8000e50:	2203      	movs	r2, #3
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	e006      	b.n	8000e64 <main+0x8c>
	 } else if(rpm_selection < 1){
 8000e56:	4b3d      	ldr	r3, [pc, #244]	@ (8000f4c <main+0x174>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d102      	bne.n	8000e64 <main+0x8c>
		 rpm_selection = 1;
 8000e5e:	4b3b      	ldr	r3, [pc, #236]	@ (8000f4c <main+0x174>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	601a      	str	r2, [r3, #0]
	 }
	 sprintf(msg, "{\"parada\": \"%s\", \"teste_motor\": \"%s\", \"frequencia\": \"%d\", \"rpm_real\": \"%d\", \"rpm_selection\": \"%d\"}\r\n", (parada ? "true" : "false"), (teste_motor ? "true" : "false"), (int) frequencia, (int) rpm_real, (int) rpm_selection);
 8000e64:	4b3a      	ldr	r3, [pc, #232]	@ (8000f50 <main+0x178>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <main+0x98>
 8000e6c:	4c39      	ldr	r4, [pc, #228]	@ (8000f54 <main+0x17c>)
 8000e6e:	e000      	b.n	8000e72 <main+0x9a>
 8000e70:	4c39      	ldr	r4, [pc, #228]	@ (8000f58 <main+0x180>)
 8000e72:	4b3a      	ldr	r3, [pc, #232]	@ (8000f5c <main+0x184>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <main+0xa6>
 8000e7a:	4d36      	ldr	r5, [pc, #216]	@ (8000f54 <main+0x17c>)
 8000e7c:	e000      	b.n	8000e80 <main+0xa8>
 8000e7e:	4d36      	ldr	r5, [pc, #216]	@ (8000f58 <main+0x180>)
 8000e80:	4b2f      	ldr	r3, [pc, #188]	@ (8000f40 <main+0x168>)
 8000e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e86:	4610      	mov	r0, r2
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f7ff fde7 	bl	8000a5c <__aeabi_d2iz>
 8000e8e:	4606      	mov	r6, r0
 8000e90:	4b2d      	ldr	r3, [pc, #180]	@ (8000f48 <main+0x170>)
 8000e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e96:	4610      	mov	r0, r2
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f7ff fddf 	bl	8000a5c <__aeabi_d2iz>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	4a2a      	ldr	r2, [pc, #168]	@ (8000f4c <main+0x174>)
 8000ea2:	6812      	ldr	r2, [r2, #0]
 8000ea4:	9202      	str	r2, [sp, #8]
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	9600      	str	r6, [sp, #0]
 8000eaa:	462b      	mov	r3, r5
 8000eac:	4622      	mov	r2, r4
 8000eae:	492c      	ldr	r1, [pc, #176]	@ (8000f60 <main+0x188>)
 8000eb0:	482c      	ldr	r0, [pc, #176]	@ (8000f64 <main+0x18c>)
 8000eb2:	f005 f8b7 	bl	8006024 <siprintf>
	 //sprintf(msg, "{\"parada\": \"%s\", \"teste_motor\": \"%s\", \"frequencia\": \"%d\", \"rpm_real\": \"%d\"}\r\n", (parada ? "true" : "false"), (teste_motor ? "true" : "false"), (int) frequencia, (int) rpm_real);
	 HAL_UART_Transmit(&huart2, msg, strlen(msg), 10);
 8000eb6:	482b      	ldr	r0, [pc, #172]	@ (8000f64 <main+0x18c>)
 8000eb8:	f7ff f9aa 	bl	8000210 <strlen>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	230a      	movs	r3, #10
 8000ec2:	4928      	ldr	r1, [pc, #160]	@ (8000f64 <main+0x18c>)
 8000ec4:	481b      	ldr	r0, [pc, #108]	@ (8000f34 <main+0x15c>)
 8000ec6:	f004 f891 	bl	8004fec <HAL_UART_Transmit>
	 if(parada) {
 8000eca:	4b21      	ldr	r3, [pc, #132]	@ (8000f50 <main+0x178>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d012      	beq.n	8000ef8 <main+0x120>
	  	 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000ed2:	4b19      	ldr	r3, [pc, #100]	@ (8000f38 <main+0x160>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	635a      	str	r2, [r3, #52]	@ 0x34
	  	 frequencia = 0;
 8000eda:	4919      	ldr	r1, [pc, #100]	@ (8000f40 <main+0x168>)
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	e9c1 2300 	strd	r2, r3, [r1]
	  	 rpm_real = 0;
 8000ee8:	4917      	ldr	r1, [pc, #92]	@ (8000f48 <main+0x170>)
 8000eea:	f04f 0200 	mov.w	r2, #0
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	e9c1 2300 	strd	r2, r3, [r1]
 8000ef6:	e791      	b.n	8000e1c <main+0x44>
	 } else if(teste_motor){
 8000ef8:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <main+0x184>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d008      	beq.n	8000f12 <main+0x13a>
	 	 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, velocity[aux]);
 8000f00:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <main+0x190>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <main+0x160>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4918      	ldr	r1, [pc, #96]	@ (8000f6c <main+0x194>)
 8000f0a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f0e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f10:	e784      	b.n	8000e1c <main+0x44>
	 }else{
	 	 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, velocity[rpm_selection - 1]);
 8000f12:	4b0e      	ldr	r3, [pc, #56]	@ (8000f4c <main+0x174>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	1e5a      	subs	r2, r3, #1
 8000f18:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <main+0x160>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4913      	ldr	r1, [pc, #76]	@ (8000f6c <main+0x194>)
 8000f1e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f22:	635a      	str	r2, [r3, #52]	@ 0x34
	 encoder_position = __HAL_TIM_GET_COUNTER(&htim4);
 8000f24:	e77a      	b.n	8000e1c <main+0x44>
 8000f26:	bf00      	nop
 8000f28:	2000011c 	.word	0x2000011c
 8000f2c:	200000d4 	.word	0x200000d4
 8000f30:	200001e0 	.word	0x200001e0
 8000f34:	20000164 	.word	0x20000164
 8000f38:	2000008c 	.word	0x2000008c
 8000f3c:	200001ac 	.word	0x200001ac
 8000f40:	200001d0 	.word	0x200001d0
 8000f44:	404e0000 	.word	0x404e0000
 8000f48:	200001d8 	.word	0x200001d8
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000010 	.word	0x20000010
 8000f54:	0800697c 	.word	0x0800697c
 8000f58:	08006984 	.word	0x08006984
 8000f5c:	200001b8 	.word	0x200001b8
 8000f60:	0800698c 	.word	0x0800698c
 8000f64:	200001e4 	.word	0x200001e4
 8000f68:	2000027c 	.word	0x2000027c
 8000f6c:	20000004 	.word	0x20000004

08000f70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b094      	sub	sp, #80	@ 0x50
 8000f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	2234      	movs	r2, #52	@ 0x34
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f005 f872 	bl	8006068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f84:	f107 0308 	add.w	r3, r7, #8
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f94:	2300      	movs	r3, #0
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	4b2a      	ldr	r3, [pc, #168]	@ (8001044 <SystemClock_Config+0xd4>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9c:	4a29      	ldr	r2, [pc, #164]	@ (8001044 <SystemClock_Config+0xd4>)
 8000f9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa4:	4b27      	ldr	r3, [pc, #156]	@ (8001044 <SystemClock_Config+0xd4>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	4b24      	ldr	r3, [pc, #144]	@ (8001048 <SystemClock_Config+0xd8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fbc:	4a22      	ldr	r2, [pc, #136]	@ (8001048 <SystemClock_Config+0xd8>)
 8000fbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	4b20      	ldr	r3, [pc, #128]	@ (8001048 <SystemClock_Config+0xd8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd8:	2310      	movs	r3, #16
 8000fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fe8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000fec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 fdbc 	bl	8002b7c <HAL_RCC_OscConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800100a:	f000 fc01 	bl	8001810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100e:	230f      	movs	r3, #15
 8001010:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001012:	2302      	movs	r3, #2
 8001014:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800101a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800101e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	2102      	movs	r1, #2
 800102a:	4618      	mov	r0, r3
 800102c:	f001 fa5c 	bl	80024e8 <HAL_RCC_ClockConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001036:	f000 fbeb 	bl	8001810 <Error_Handler>
  }
}
 800103a:	bf00      	nop
 800103c:	3750      	adds	r7, #80	@ 0x50
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800
 8001048:	40007000 	.word	0x40007000

0800104c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b096      	sub	sp, #88	@ 0x58
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001052:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001060:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800106a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]
 800107a:	615a      	str	r2, [r3, #20]
 800107c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2220      	movs	r2, #32
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f004 ffef 	bl	8006068 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800108a:	4b4b      	ldr	r3, [pc, #300]	@ (80011b8 <MX_TIM1_Init+0x16c>)
 800108c:	4a4b      	ldr	r2, [pc, #300]	@ (80011bc <MX_TIM1_Init+0x170>)
 800108e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001090:	4b49      	ldr	r3, [pc, #292]	@ (80011b8 <MX_TIM1_Init+0x16c>)
 8001092:	2253      	movs	r2, #83	@ 0x53
 8001094:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001096:	4b48      	ldr	r3, [pc, #288]	@ (80011b8 <MX_TIM1_Init+0x16c>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800109c:	4b46      	ldr	r3, [pc, #280]	@ (80011b8 <MX_TIM1_Init+0x16c>)
 800109e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a4:	4b44      	ldr	r3, [pc, #272]	@ (80011b8 <MX_TIM1_Init+0x16c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010aa:	4b43      	ldr	r3, [pc, #268]	@ (80011b8 <MX_TIM1_Init+0x16c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b0:	4b41      	ldr	r3, [pc, #260]	@ (80011b8 <MX_TIM1_Init+0x16c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010b6:	4840      	ldr	r0, [pc, #256]	@ (80011b8 <MX_TIM1_Init+0x16c>)
 80010b8:	f001 fffe 	bl	80030b8 <HAL_TIM_Base_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80010c2:	f000 fba5 	bl	8001810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010cc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010d0:	4619      	mov	r1, r3
 80010d2:	4839      	ldr	r0, [pc, #228]	@ (80011b8 <MX_TIM1_Init+0x16c>)
 80010d4:	f003 f8ee 	bl	80042b4 <HAL_TIM_ConfigClockSource>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80010de:	f000 fb97 	bl	8001810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010e2:	4835      	ldr	r0, [pc, #212]	@ (80011b8 <MX_TIM1_Init+0x16c>)
 80010e4:	f002 fa64 	bl	80035b0 <HAL_TIM_PWM_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80010ee:	f000 fb8f 	bl	8001810 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80010f2:	4831      	ldr	r0, [pc, #196]	@ (80011b8 <MX_TIM1_Init+0x16c>)
 80010f4:	f002 f82f 	bl	8003156 <HAL_TIM_OC_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80010fe:	f000 fb87 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800110a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800110e:	4619      	mov	r1, r3
 8001110:	4829      	ldr	r0, [pc, #164]	@ (80011b8 <MX_TIM1_Init+0x16c>)
 8001112:	f003 fe39 	bl	8004d88 <HAL_TIMEx_MasterConfigSynchronization>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800111c:	f000 fb78 	bl	8001810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001120:	2360      	movs	r3, #96	@ 0x60
 8001122:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001128:	2300      	movs	r3, #0
 800112a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800112c:	2300      	movs	r3, #0
 800112e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001134:	2300      	movs	r3, #0
 8001136:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001138:	2300      	movs	r3, #0
 800113a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001140:	2200      	movs	r2, #0
 8001142:	4619      	mov	r1, r3
 8001144:	481c      	ldr	r0, [pc, #112]	@ (80011b8 <MX_TIM1_Init+0x16c>)
 8001146:	f002 fff3 	bl	8004130 <HAL_TIM_PWM_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001150:	f000 fb5e 	bl	8001810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 999;
 8001158:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800115c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800115e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001162:	2204      	movs	r2, #4
 8001164:	4619      	mov	r1, r3
 8001166:	4814      	ldr	r0, [pc, #80]	@ (80011b8 <MX_TIM1_Init+0x16c>)
 8001168:	f002 feea 	bl	8003f40 <HAL_TIM_OC_ConfigChannel>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001172:	f000 fb4d 	bl	8001810 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800118a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800118e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4619      	mov	r1, r3
 8001198:	4807      	ldr	r0, [pc, #28]	@ (80011b8 <MX_TIM1_Init+0x16c>)
 800119a:	f003 fe71 	bl	8004e80 <HAL_TIMEx_ConfigBreakDeadTime>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 80011a4:	f000 fb34 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011a8:	4803      	ldr	r0, [pc, #12]	@ (80011b8 <MX_TIM1_Init+0x16c>)
 80011aa:	f000 fc33 	bl	8001a14 <HAL_TIM_MspPostInit>

}
 80011ae:	bf00      	nop
 80011b0:	3758      	adds	r7, #88	@ 0x58
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000008c 	.word	0x2000008c
 80011bc:	40010000 	.word	0x40010000

080011c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	@ 0x28
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c6:	f107 0318 	add.w	r3, r7, #24
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011de:	463b      	mov	r3, r7
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ea:	4b2c      	ldr	r3, [pc, #176]	@ (800129c <MX_TIM2_Init+0xdc>)
 80011ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840 - 1;
 80011f2:	4b2a      	ldr	r3, [pc, #168]	@ (800129c <MX_TIM2_Init+0xdc>)
 80011f4:	f240 3247 	movw	r2, #839	@ 0x347
 80011f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fa:	4b28      	ldr	r3, [pc, #160]	@ (800129c <MX_TIM2_Init+0xdc>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001200:	4b26      	ldr	r3, [pc, #152]	@ (800129c <MX_TIM2_Init+0xdc>)
 8001202:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001206:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001208:	4b24      	ldr	r3, [pc, #144]	@ (800129c <MX_TIM2_Init+0xdc>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120e:	4b23      	ldr	r3, [pc, #140]	@ (800129c <MX_TIM2_Init+0xdc>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001214:	4821      	ldr	r0, [pc, #132]	@ (800129c <MX_TIM2_Init+0xdc>)
 8001216:	f001 ff4f 	bl	80030b8 <HAL_TIM_Base_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001220:	f000 faf6 	bl	8001810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001224:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001228:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800122a:	f107 0318 	add.w	r3, r7, #24
 800122e:	4619      	mov	r1, r3
 8001230:	481a      	ldr	r0, [pc, #104]	@ (800129c <MX_TIM2_Init+0xdc>)
 8001232:	f003 f83f 	bl	80042b4 <HAL_TIM_ConfigClockSource>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800123c:	f000 fae8 	bl	8001810 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001240:	4816      	ldr	r0, [pc, #88]	@ (800129c <MX_TIM2_Init+0xdc>)
 8001242:	f002 fad7 	bl	80037f4 <HAL_TIM_IC_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800124c:	f000 fae0 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	4619      	mov	r1, r3
 800125e:	480f      	ldr	r0, [pc, #60]	@ (800129c <MX_TIM2_Init+0xdc>)
 8001260:	f003 fd92 	bl	8004d88 <HAL_TIMEx_MasterConfigSynchronization>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800126a:	f000 fad1 	bl	8001810 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800126e:	2302      	movs	r3, #2
 8001270:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001272:	2301      	movs	r3, #1
 8001274:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800127e:	463b      	mov	r3, r7
 8001280:	2200      	movs	r2, #0
 8001282:	4619      	mov	r1, r3
 8001284:	4805      	ldr	r0, [pc, #20]	@ (800129c <MX_TIM2_Init+0xdc>)
 8001286:	f002 feb7 	bl	8003ff8 <HAL_TIM_IC_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001290:	f000 fabe 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	3728      	adds	r7, #40	@ 0x28
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200000d4 	.word	0x200000d4

080012a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08c      	sub	sp, #48	@ 0x30
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	2224      	movs	r2, #36	@ 0x24
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f004 feda 	bl	8006068 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012bc:	4b20      	ldr	r3, [pc, #128]	@ (8001340 <MX_TIM4_Init+0xa0>)
 80012be:	4a21      	ldr	r2, [pc, #132]	@ (8001344 <MX_TIM4_Init+0xa4>)
 80012c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001340 <MX_TIM4_Init+0xa0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001340 <MX_TIM4_Init+0xa0>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80012ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001340 <MX_TIM4_Init+0xa0>)
 80012d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001340 <MX_TIM4_Init+0xa0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012dc:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <MX_TIM4_Init+0xa0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012e2:	2303      	movs	r3, #3
 80012e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012ea:	2301      	movs	r3, #1
 80012ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80012f2:	230a      	movs	r3, #10
 80012f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012fa:	2301      	movs	r3, #1
 80012fc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001302:	230a      	movs	r3, #10
 8001304:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	4619      	mov	r1, r3
 800130c:	480c      	ldr	r0, [pc, #48]	@ (8001340 <MX_TIM4_Init+0xa0>)
 800130e:	f002 fbf3 	bl	8003af8 <HAL_TIM_Encoder_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001318:	f000 fa7a 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	@ (8001340 <MX_TIM4_Init+0xa0>)
 800132a:	f003 fd2d 	bl	8004d88 <HAL_TIMEx_MasterConfigSynchronization>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001334:	f000 fa6c 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	3730      	adds	r7, #48	@ 0x30
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000011c 	.word	0x2000011c
 8001344:	40000800 	.word	0x40000800

08001348 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800134c:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 800134e:	4a12      	ldr	r2, [pc, #72]	@ (8001398 <MX_USART2_UART_Init+0x50>)
 8001350:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001352:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 8001354:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001358:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800135a:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001360:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001366:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800136c:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 800136e:	220c      	movs	r2, #12
 8001370:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001372:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800137e:	4805      	ldr	r0, [pc, #20]	@ (8001394 <MX_USART2_UART_Init+0x4c>)
 8001380:	f003 fde4 	bl	8004f4c <HAL_UART_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800138a:	f000 fa41 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000164 	.word	0x20000164
 8001398:	40004400 	.word	0x40004400

0800139c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	@ 0x28
 80013a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	4b44      	ldr	r3, [pc, #272]	@ (80014c8 <MX_GPIO_Init+0x12c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	4a43      	ldr	r2, [pc, #268]	@ (80014c8 <MX_GPIO_Init+0x12c>)
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c2:	4b41      	ldr	r3, [pc, #260]	@ (80014c8 <MX_GPIO_Init+0x12c>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b3d      	ldr	r3, [pc, #244]	@ (80014c8 <MX_GPIO_Init+0x12c>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a3c      	ldr	r2, [pc, #240]	@ (80014c8 <MX_GPIO_Init+0x12c>)
 80013d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b3a      	ldr	r3, [pc, #232]	@ (80014c8 <MX_GPIO_Init+0x12c>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	4b36      	ldr	r3, [pc, #216]	@ (80014c8 <MX_GPIO_Init+0x12c>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a35      	ldr	r2, [pc, #212]	@ (80014c8 <MX_GPIO_Init+0x12c>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b33      	ldr	r3, [pc, #204]	@ (80014c8 <MX_GPIO_Init+0x12c>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	4b2f      	ldr	r3, [pc, #188]	@ (80014c8 <MX_GPIO_Init+0x12c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a2e      	ldr	r2, [pc, #184]	@ (80014c8 <MX_GPIO_Init+0x12c>)
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b2c      	ldr	r3, [pc, #176]	@ (80014c8 <MX_GPIO_Init+0x12c>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	2120      	movs	r1, #32
 8001426:	4829      	ldr	r0, [pc, #164]	@ (80014cc <MX_GPIO_Init+0x130>)
 8001428:	f001 f82c 	bl	8002484 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin encoder_button_Pin */
  GPIO_InitStruct.Pin = B1_Pin|encoder_button_Pin;
 800142c:	f242 0304 	movw	r3, #8196	@ 0x2004
 8001430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001432:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4619      	mov	r1, r3
 8001442:	4823      	ldr	r0, [pc, #140]	@ (80014d0 <MX_GPIO_Init+0x134>)
 8001444:	f000 fe8a 	bl	800215c <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_parada_Pin btn_rotina_teste_Pin */
  GPIO_InitStruct.Pin = btn_parada_Pin|btn_rotina_teste_Pin;
 8001448:	2318      	movs	r3, #24
 800144a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800144c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	481c      	ldr	r0, [pc, #112]	@ (80014d0 <MX_GPIO_Init+0x134>)
 800145e:	f000 fe7d 	bl	800215c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001462:	2320      	movs	r3, #32
 8001464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001466:	2301      	movs	r3, #1
 8001468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4814      	ldr	r0, [pc, #80]	@ (80014cc <MX_GPIO_Init+0x130>)
 800147a:	f000 fe6f 	bl	800215c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	2008      	movs	r0, #8
 8001484:	f000 fda1 	bl	8001fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001488:	2008      	movs	r0, #8
 800148a:	f000 fdba 	bl	8002002 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	2009      	movs	r0, #9
 8001494:	f000 fd99 	bl	8001fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001498:	2009      	movs	r0, #9
 800149a:	f000 fdb2 	bl	8002002 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	200a      	movs	r0, #10
 80014a4:	f000 fd91 	bl	8001fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80014a8:	200a      	movs	r0, #10
 80014aa:	f000 fdaa 	bl	8002002 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	2028      	movs	r0, #40	@ 0x28
 80014b4:	f000 fd89 	bl	8001fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014b8:	2028      	movs	r0, #40	@ 0x28
 80014ba:	f000 fda2 	bl	8002002 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	@ 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020000 	.word	0x40020000
 80014d0:	40020800 	.word	0x40020800

080014d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	80fb      	strh	r3, [r7, #6]
	uint32_t tempo_atual = HAL_GetTick();
 80014de:	f000 fc8d 	bl	8001dfc <HAL_GetTick>
 80014e2:	60f8      	str	r0, [r7, #12]
	static uint32_t tempo_anterior = 0;
	static uint32_t tempo_anterior_parada = 0;
	static uint32_t tempo_anterior_teste = 0;

	switch(GPIO_Pin) {
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	2b10      	cmp	r3, #16
 80014e8:	d034      	beq.n	8001554 <HAL_GPIO_EXTI_Callback+0x80>
 80014ea:	2b10      	cmp	r3, #16
 80014ec:	dc46      	bgt.n	800157c <HAL_GPIO_EXTI_Callback+0xa8>
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	d002      	beq.n	80014f8 <HAL_GPIO_EXTI_Callback+0x24>
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d014      	beq.n	8001520 <HAL_GPIO_EXTI_Callback+0x4c>
			HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_2);
			tempo_anterior_teste = tempo_atual;
		}
		break;
	default:
		break;
 80014f6:	e041      	b.n	800157c <HAL_GPIO_EXTI_Callback+0xa8>
		if(((tempo_atual - tempo_anterior) > 50) && oc_ticks == 0) {
 80014f8:	4b26      	ldr	r3, [pc, #152]	@ (8001594 <HAL_GPIO_EXTI_Callback+0xc0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b32      	cmp	r3, #50	@ 0x32
 8001502:	d93d      	bls.n	8001580 <HAL_GPIO_EXTI_Callback+0xac>
 8001504:	4b24      	ldr	r3, [pc, #144]	@ (8001598 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d139      	bne.n	8001580 <HAL_GPIO_EXTI_Callback+0xac>
			parada = false;
 800150c:	4b23      	ldr	r3, [pc, #140]	@ (800159c <HAL_GPIO_EXTI_Callback+0xc8>)
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
			teste_motor = false;
 8001512:	4b23      	ldr	r3, [pc, #140]	@ (80015a0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
			tempo_anterior = tempo_atual;
 8001518:	4a1e      	ldr	r2, [pc, #120]	@ (8001594 <HAL_GPIO_EXTI_Callback+0xc0>)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6013      	str	r3, [r2, #0]
		break;
 800151e:	e02f      	b.n	8001580 <HAL_GPIO_EXTI_Callback+0xac>
		if((tempo_atual - tempo_anterior_parada) > 50) {
 8001520:	4b20      	ldr	r3, [pc, #128]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b32      	cmp	r3, #50	@ 0x32
 800152a:	d92b      	bls.n	8001584 <HAL_GPIO_EXTI_Callback+0xb0>
			teste_motor = false;
 800152c:	4b1c      	ldr	r3, [pc, #112]	@ (80015a0 <HAL_GPIO_EXTI_Callback+0xcc>)
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
			parada = true;
 8001532:	4b1a      	ldr	r3, [pc, #104]	@ (800159c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
			aux = 0;
 8001538:	4b1b      	ldr	r3, [pc, #108]	@ (80015a8 <HAL_GPIO_EXTI_Callback+0xd4>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
			oc_ticks = 0;
 800153e:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_2);
 8001544:	2104      	movs	r1, #4
 8001546:	4819      	ldr	r0, [pc, #100]	@ (80015ac <HAL_GPIO_EXTI_Callback+0xd8>)
 8001548:	f001 ff74 	bl	8003434 <HAL_TIM_OC_Stop_IT>
			tempo_anterior_parada = tempo_atual;
 800154c:	4a15      	ldr	r2, [pc, #84]	@ (80015a4 <HAL_GPIO_EXTI_Callback+0xd0>)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6013      	str	r3, [r2, #0]
		break;
 8001552:	e017      	b.n	8001584 <HAL_GPIO_EXTI_Callback+0xb0>
		if((tempo_atual - tempo_anterior_teste) > 50) {
 8001554:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b32      	cmp	r3, #50	@ 0x32
 800155e:	d913      	bls.n	8001588 <HAL_GPIO_EXTI_Callback+0xb4>
			parada = false;
 8001560:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
			teste_motor = true;
 8001566:	4b0e      	ldr	r3, [pc, #56]	@ (80015a0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001568:	2201      	movs	r2, #1
 800156a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_2);
 800156c:	2104      	movs	r1, #4
 800156e:	480f      	ldr	r0, [pc, #60]	@ (80015ac <HAL_GPIO_EXTI_Callback+0xd8>)
 8001570:	f001 fe4a 	bl	8003208 <HAL_TIM_OC_Start_IT>
			tempo_anterior_teste = tempo_atual;
 8001574:	4a0e      	ldr	r2, [pc, #56]	@ (80015b0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6013      	str	r3, [r2, #0]
		break;
 800157a:	e005      	b.n	8001588 <HAL_GPIO_EXTI_Callback+0xb4>
		break;
 800157c:	bf00      	nop
 800157e:	e004      	b.n	800158a <HAL_GPIO_EXTI_Callback+0xb6>
		break;
 8001580:	bf00      	nop
 8001582:	e002      	b.n	800158a <HAL_GPIO_EXTI_Callback+0xb6>
		break;
 8001584:	bf00      	nop
 8001586:	e000      	b.n	800158a <HAL_GPIO_EXTI_Callback+0xb6>
		break;
 8001588:	bf00      	nop
	}
}
 800158a:	bf00      	nop
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000284 	.word	0x20000284
 8001598:	20000280 	.word	0x20000280
 800159c:	20000010 	.word	0x20000010
 80015a0:	200001b8 	.word	0x200001b8
 80015a4:	20000288 	.word	0x20000288
 80015a8:	2000027c 	.word	0x2000027c
 80015ac:	2000008c 	.word	0x2000008c
 80015b0:	2000028c 	.word	0x2000028c

080015b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

	switch (cmd) {
 80015bc:	4b21      	ldr	r3, [pc, #132]	@ (8001644 <HAL_UART_RxCpltCallback+0x90>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b64      	cmp	r3, #100	@ 0x64
 80015c2:	d00c      	beq.n	80015de <HAL_UART_RxCpltCallback+0x2a>
 80015c4:	2b74      	cmp	r3, #116	@ 0x74
 80015c6:	d11b      	bne.n	8001600 <HAL_UART_RxCpltCallback+0x4c>
		teste_motor = false;
		rpm_selection = atoi(cmd[1]);
		break;
		*/
	case 't':
		parada = false;
 80015c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001648 <HAL_UART_RxCpltCallback+0x94>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
		teste_motor = true;
 80015ce:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <HAL_UART_RxCpltCallback+0x98>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_2);
 80015d4:	2104      	movs	r1, #4
 80015d6:	481e      	ldr	r0, [pc, #120]	@ (8001650 <HAL_UART_RxCpltCallback+0x9c>)
 80015d8:	f001 fe16 	bl	8003208 <HAL_TIM_OC_Start_IT>
		break;
 80015dc:	e025      	b.n	800162a <HAL_UART_RxCpltCallback+0x76>
	case 'd':
		teste_motor = false;
 80015de:	4b1b      	ldr	r3, [pc, #108]	@ (800164c <HAL_UART_RxCpltCallback+0x98>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
		parada = true;
 80015e4:	4b18      	ldr	r3, [pc, #96]	@ (8001648 <HAL_UART_RxCpltCallback+0x94>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
		aux = 0;
 80015ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <HAL_UART_RxCpltCallback+0xa0>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
		oc_ticks = 0;
 80015f0:	4b19      	ldr	r3, [pc, #100]	@ (8001658 <HAL_UART_RxCpltCallback+0xa4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_2);
 80015f6:	2104      	movs	r1, #4
 80015f8:	4815      	ldr	r0, [pc, #84]	@ (8001650 <HAL_UART_RxCpltCallback+0x9c>)
 80015fa:	f001 ff1b 	bl	8003434 <HAL_TIM_OC_Stop_IT>
		break;
 80015fe:	e014      	b.n	800162a <HAL_UART_RxCpltCallback+0x76>
	default:
		if (cmd - '0' >= 0 && oc_ticks == 0) {
 8001600:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <HAL_UART_RxCpltCallback+0x90>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b2f      	cmp	r3, #47	@ 0x2f
 8001606:	d90f      	bls.n	8001628 <HAL_UART_RxCpltCallback+0x74>
 8001608:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <HAL_UART_RxCpltCallback+0xa4>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10b      	bne.n	8001628 <HAL_UART_RxCpltCallback+0x74>
			teste_motor = false;
 8001610:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <HAL_UART_RxCpltCallback+0x98>)
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
			parada = false;
 8001616:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <HAL_UART_RxCpltCallback+0x94>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
			rpm_selection = cmd - '0';
 800161c:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <HAL_UART_RxCpltCallback+0x90>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	3b30      	subs	r3, #48	@ 0x30
 8001622:	461a      	mov	r2, r3
 8001624:	4b0d      	ldr	r3, [pc, #52]	@ (800165c <HAL_UART_RxCpltCallback+0xa8>)
 8001626:	601a      	str	r2, [r3, #0]
		}
		break;
 8001628:	bf00      	nop
	}
	cmd = '\0';
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_UART_RxCpltCallback+0x90>)
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, &cmd, 1);
 8001630:	2201      	movs	r2, #1
 8001632:	4904      	ldr	r1, [pc, #16]	@ (8001644 <HAL_UART_RxCpltCallback+0x90>)
 8001634:	480a      	ldr	r0, [pc, #40]	@ (8001660 <HAL_UART_RxCpltCallback+0xac>)
 8001636:	f003 fd64 	bl	8005102 <HAL_UART_Receive_IT>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200001e0 	.word	0x200001e0
 8001648:	20000010 	.word	0x20000010
 800164c:	200001b8 	.word	0x200001b8
 8001650:	2000008c 	.word	0x2000008c
 8001654:	2000027c 	.word	0x2000027c
 8001658:	20000280 	.word	0x20000280
 800165c:	20000000 	.word	0x20000000
 8001660:	20000164 	.word	0x20000164

08001664 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == TIM2) {
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	7f1b      	ldrb	r3, [r3, #28]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d148      	bne.n	8001706 <HAL_TIM_IC_CaptureCallback+0xa2>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800167c:	d143      	bne.n	8001706 <HAL_TIM_IC_CaptureCallback+0xa2>
		if(is_captured == false) {
 800167e:	4b24      	ldr	r3, [pc, #144]	@ (8001710 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	f083 0301 	eor.w	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00a      	beq.n	80016a2 <HAL_TIM_IC_CaptureCallback+0x3e>
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800168c:	2100      	movs	r1, #0
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f002 fed8 	bl	8004444 <HAL_TIM_ReadCapturedValue>
 8001694:	4603      	mov	r3, r0
 8001696:	4a1f      	ldr	r2, [pc, #124]	@ (8001714 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001698:	6013      	str	r3, [r2, #0]
			is_captured = true;
 800169a:	4b1d      	ldr	r3, [pc, #116]	@ (8001710 <HAL_TIM_IC_CaptureCallback+0xac>)
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]
			frequencia = ref_clock/difference;
			__HAL_TIM_SET_COUNTER(htim, 0);
			is_captured = false;
		}
	}
}
 80016a0:	e031      	b.n	8001706 <HAL_TIM_IC_CaptureCallback+0xa2>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80016a2:	2100      	movs	r1, #0
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f002 fecd 	bl	8004444 <HAL_TIM_ReadCapturedValue>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001718 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80016ae:	6013      	str	r3, [r2, #0]
			if(IC_Val2 > IC_Val1) {
 80016b0:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b17      	ldr	r3, [pc, #92]	@ (8001714 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d906      	bls.n	80016ca <HAL_TIM_IC_CaptureCallback+0x66>
				difference = IC_Val2 - IC_Val1;
 80016bc:	4b16      	ldr	r3, [pc, #88]	@ (8001718 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	4a15      	ldr	r2, [pc, #84]	@ (800171c <HAL_TIM_IC_CaptureCallback+0xb8>)
 80016c8:	6013      	str	r3, [r2, #0]
			ref_clock = TIMCLOCK/PRESCALER;
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80016cc:	4a15      	ldr	r2, [pc, #84]	@ (8001724 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80016ce:	601a      	str	r2, [r3, #0]
			frequencia = ref_clock/difference;
 80016d0:	4b13      	ldr	r3, [pc, #76]	@ (8001720 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80016d2:	ed93 7a00 	vldr	s14, [r3]
 80016d6:	4b11      	ldr	r3, [pc, #68]	@ (800171c <HAL_TIM_IC_CaptureCallback+0xb8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016e6:	ee16 0a90 	vmov	r0, s13
 80016ea:	f7fe ff4d 	bl	8000588 <__aeabi_f2d>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	490d      	ldr	r1, [pc, #52]	@ (8001728 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80016f4:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2200      	movs	r2, #0
 80016fe:	625a      	str	r2, [r3, #36]	@ 0x24
			is_captured = false;
 8001700:	4b03      	ldr	r3, [pc, #12]	@ (8001710 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200001b9 	.word	0x200001b9
 8001714:	200001bc 	.word	0x200001bc
 8001718:	200001c0 	.word	0x200001c0
 800171c:	200001c4 	.word	0x200001c4
 8001720:	200001c8 	.word	0x200001c8
 8001724:	47c35000 	.word	0x47c35000
 8001728:	200001d0 	.word	0x200001d0

0800172c <Encoder_CheckChange>:

void Encoder_CheckChange(TIM_HandleTypeDef *htim) {
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	count = encoder_position/2;
 8001734:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <Encoder_CheckChange+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	085b      	lsrs	r3, r3, #1
 800173a:	4a16      	ldr	r2, [pc, #88]	@ (8001794 <Encoder_CheckChange+0x68>)
 800173c:	6013      	str	r3, [r2, #0]
	if (count > last_count && cmd == '\0') {
 800173e:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <Encoder_CheckChange+0x68>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <Encoder_CheckChange+0x6c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d909      	bls.n	800175e <Encoder_CheckChange+0x32>
 800174a:	4b14      	ldr	r3, [pc, #80]	@ (800179c <Encoder_CheckChange+0x70>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d105      	bne.n	800175e <Encoder_CheckChange+0x32>
       rpm_selection++;
 8001752:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <Encoder_CheckChange+0x74>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	4a11      	ldr	r2, [pc, #68]	@ (80017a0 <Encoder_CheckChange+0x74>)
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	e00e      	b.n	800177c <Encoder_CheckChange+0x50>
    } else if (count < last_count && cmd == '\0') {
 800175e:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <Encoder_CheckChange+0x68>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4b0d      	ldr	r3, [pc, #52]	@ (8001798 <Encoder_CheckChange+0x6c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d208      	bcs.n	800177c <Encoder_CheckChange+0x50>
 800176a:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <Encoder_CheckChange+0x70>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d104      	bne.n	800177c <Encoder_CheckChange+0x50>
       rpm_selection--;
 8001772:	4b0b      	ldr	r3, [pc, #44]	@ (80017a0 <Encoder_CheckChange+0x74>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3b01      	subs	r3, #1
 8001778:	4a09      	ldr	r2, [pc, #36]	@ (80017a0 <Encoder_CheckChange+0x74>)
 800177a:	6013      	str	r3, [r2, #0]
    }
    last_count = count;
 800177c:	4b05      	ldr	r3, [pc, #20]	@ (8001794 <Encoder_CheckChange+0x68>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a05      	ldr	r2, [pc, #20]	@ (8001798 <Encoder_CheckChange+0x6c>)
 8001782:	6013      	str	r3, [r2, #0]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	200001ac 	.word	0x200001ac
 8001794:	200001b4 	.word	0x200001b4
 8001798:	200001b0 	.word	0x200001b0
 800179c:	200001e0 	.word	0x200001e0
 80017a0:	20000000 	.word	0x20000000

080017a4 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
        oc_ticks++;
 80017ac:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3301      	adds	r3, #1
 80017b2:	4a12      	ldr	r2, [pc, #72]	@ (80017fc <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80017b4:	6013      	str	r3, [r2, #0]
        if(oc_ticks >= 5000) {
 80017b6:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f241 3287 	movw	r2, #4999	@ 0x1387
 80017be:	4293      	cmp	r3, r2
 80017c0:	dd07      	ble.n	80017d2 <HAL_TIM_OC_DelayElapsedCallback+0x2e>
        	aux++;
 80017c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001800 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001800 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80017ca:	6013      	str	r3, [r2, #0]
        	oc_ticks = 0;
 80017cc:	4b0b      	ldr	r3, [pc, #44]	@ (80017fc <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
        }
        if(aux>2) {
 80017d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	dd0c      	ble.n	80017f4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
        	aux = 0;
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
        	HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_2);
 80017e0:	2104      	movs	r1, #4
 80017e2:	4808      	ldr	r0, [pc, #32]	@ (8001804 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 80017e4:	f001 fe26 	bl	8003434 <HAL_TIM_OC_Stop_IT>
        	teste_motor = false;
 80017e8:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
        	parada = true;
 80017ee:	4b07      	ldr	r3, [pc, #28]	@ (800180c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
        }
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000280 	.word	0x20000280
 8001800:	2000027c 	.word	0x2000027c
 8001804:	2000008c 	.word	0x2000008c
 8001808:	200001b8 	.word	0x200001b8
 800180c:	20000010 	.word	0x20000010

08001810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001814:	b672      	cpsid	i
}
 8001816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <Error_Handler+0x8>

0800181c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b10      	ldr	r3, [pc, #64]	@ (8001868 <HAL_MspInit+0x4c>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182a:	4a0f      	ldr	r2, [pc, #60]	@ (8001868 <HAL_MspInit+0x4c>)
 800182c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001830:	6453      	str	r3, [r2, #68]	@ 0x44
 8001832:	4b0d      	ldr	r3, [pc, #52]	@ (8001868 <HAL_MspInit+0x4c>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <HAL_MspInit+0x4c>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	4a08      	ldr	r2, [pc, #32]	@ (8001868 <HAL_MspInit+0x4c>)
 8001848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800184c:	6413      	str	r3, [r2, #64]	@ 0x40
 800184e:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <HAL_MspInit+0x4c>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800185a:	2007      	movs	r0, #7
 800185c:	f000 fbaa 	bl	8001fb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40023800 	.word	0x40023800

0800186c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	@ 0x28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a37      	ldr	r2, [pc, #220]	@ (8001968 <HAL_TIM_Base_MspInit+0xfc>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d12e      	bne.n	80018ec <HAL_TIM_Base_MspInit+0x80>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	4b36      	ldr	r3, [pc, #216]	@ (800196c <HAL_TIM_Base_MspInit+0x100>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	4a35      	ldr	r2, [pc, #212]	@ (800196c <HAL_TIM_Base_MspInit+0x100>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6453      	str	r3, [r2, #68]	@ 0x44
 800189e:	4b33      	ldr	r3, [pc, #204]	@ (800196c <HAL_TIM_Base_MspInit+0x100>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2100      	movs	r1, #0
 80018ae:	2018      	movs	r0, #24
 80018b0:	f000 fb8b 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80018b4:	2018      	movs	r0, #24
 80018b6:	f000 fba4 	bl	8002002 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	2019      	movs	r0, #25
 80018c0:	f000 fb83 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018c4:	2019      	movs	r0, #25
 80018c6:	f000 fb9c 	bl	8002002 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	201a      	movs	r0, #26
 80018d0:	f000 fb7b 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80018d4:	201a      	movs	r0, #26
 80018d6:	f000 fb94 	bl	8002002 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	201b      	movs	r0, #27
 80018e0:	f000 fb73 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80018e4:	201b      	movs	r0, #27
 80018e6:	f000 fb8c 	bl	8002002 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018ea:	e038      	b.n	800195e <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM2)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018f4:	d133      	bne.n	800195e <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b1c      	ldr	r3, [pc, #112]	@ (800196c <HAL_TIM_Base_MspInit+0x100>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	4a1b      	ldr	r2, [pc, #108]	@ (800196c <HAL_TIM_Base_MspInit+0x100>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6413      	str	r3, [r2, #64]	@ 0x40
 8001906:	4b19      	ldr	r3, [pc, #100]	@ (800196c <HAL_TIM_Base_MspInit+0x100>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	4b15      	ldr	r3, [pc, #84]	@ (800196c <HAL_TIM_Base_MspInit+0x100>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	4a14      	ldr	r2, [pc, #80]	@ (800196c <HAL_TIM_Base_MspInit+0x100>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6313      	str	r3, [r2, #48]	@ 0x30
 8001922:	4b12      	ldr	r3, [pc, #72]	@ (800196c <HAL_TIM_Base_MspInit+0x100>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800192e:	2301      	movs	r3, #1
 8001930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800193e:	2301      	movs	r3, #1
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4809      	ldr	r0, [pc, #36]	@ (8001970 <HAL_TIM_Base_MspInit+0x104>)
 800194a:	f000 fc07 	bl	800215c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	201c      	movs	r0, #28
 8001954:	f000 fb39 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001958:	201c      	movs	r0, #28
 800195a:	f000 fb52 	bl	8002002 <HAL_NVIC_EnableIRQ>
}
 800195e:	bf00      	nop
 8001960:	3728      	adds	r7, #40	@ 0x28
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40010000 	.word	0x40010000
 800196c:	40023800 	.word	0x40023800
 8001970:	40020000 	.word	0x40020000

08001974 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	@ 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a1d      	ldr	r2, [pc, #116]	@ (8001a08 <HAL_TIM_Encoder_MspInit+0x94>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d133      	bne.n	80019fe <HAL_TIM_Encoder_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a0c <HAL_TIM_Encoder_MspInit+0x98>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	4a1b      	ldr	r2, [pc, #108]	@ (8001a0c <HAL_TIM_Encoder_MspInit+0x98>)
 80019a0:	f043 0304 	orr.w	r3, r3, #4
 80019a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a6:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <HAL_TIM_Encoder_MspInit+0x98>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <HAL_TIM_Encoder_MspInit+0x98>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a14      	ldr	r2, [pc, #80]	@ (8001a0c <HAL_TIM_Encoder_MspInit+0x98>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c2:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <HAL_TIM_Encoder_MspInit+0x98>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019ce:	23c0      	movs	r3, #192	@ 0xc0
 80019d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019de:	2302      	movs	r3, #2
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	4809      	ldr	r0, [pc, #36]	@ (8001a10 <HAL_TIM_Encoder_MspInit+0x9c>)
 80019ea:	f000 fbb7 	bl	800215c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	201e      	movs	r0, #30
 80019f4:	f000 fae9 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019f8:	201e      	movs	r0, #30
 80019fa:	f000 fb02 	bl	8002002 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	@ 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40000800 	.word	0x40000800
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020400 	.word	0x40020400

08001a14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a12      	ldr	r2, [pc, #72]	@ (8001a7c <HAL_TIM_MspPostInit+0x68>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d11e      	bne.n	8001a74 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <HAL_TIM_MspPostInit+0x6c>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	4a10      	ldr	r2, [pc, #64]	@ (8001a80 <HAL_TIM_MspPostInit+0x6c>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a46:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <HAL_TIM_MspPostInit+0x6c>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a56:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a64:	2301      	movs	r3, #1
 8001a66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	f107 030c 	add.w	r3, r7, #12
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4805      	ldr	r0, [pc, #20]	@ (8001a84 <HAL_TIM_MspPostInit+0x70>)
 8001a70:	f000 fb74 	bl	800215c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a74:	bf00      	nop
 8001a76:	3720      	adds	r7, #32
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40010000 	.word	0x40010000
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020000 	.word	0x40020000

08001a88 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	@ 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b1c <HAL_UART_MspInit+0x94>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d133      	bne.n	8001b12 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	4b1c      	ldr	r3, [pc, #112]	@ (8001b20 <HAL_UART_MspInit+0x98>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8001b20 <HAL_UART_MspInit+0x98>)
 8001ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aba:	4b19      	ldr	r3, [pc, #100]	@ (8001b20 <HAL_UART_MspInit+0x98>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <HAL_UART_MspInit+0x98>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	4a14      	ldr	r2, [pc, #80]	@ (8001b20 <HAL_UART_MspInit+0x98>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad6:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <HAL_UART_MspInit+0x98>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ae2:	230c      	movs	r3, #12
 8001ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aee:	2303      	movs	r3, #3
 8001af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001af2:	2307      	movs	r3, #7
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4619      	mov	r1, r3
 8001afc:	4809      	ldr	r0, [pc, #36]	@ (8001b24 <HAL_UART_MspInit+0x9c>)
 8001afe:	f000 fb2d 	bl	800215c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	2026      	movs	r0, #38	@ 0x26
 8001b08:	f000 fa5f 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b0c:	2026      	movs	r0, #38	@ 0x26
 8001b0e:	f000 fa78 	bl	8002002 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b12:	bf00      	nop
 8001b14:	3728      	adds	r7, #40	@ 0x28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40004400 	.word	0x40004400
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40020000 	.word	0x40020000

08001b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <NMI_Handler+0x4>

08001b30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <HardFault_Handler+0x4>

08001b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <MemManage_Handler+0x4>

08001b40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <BusFault_Handler+0x4>

08001b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <UsageFault_Handler+0x4>

08001b50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b7e:	f000 f929 	bl	8001dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(encoder_button_Pin);
 8001b8a:	2004      	movs	r0, #4
 8001b8c:	f000 fc94 	bl	80024b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(btn_parada_Pin);
 8001b98:	2008      	movs	r0, #8
 8001b9a:	f000 fc8d 	bl	80024b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(btn_rotina_teste_Pin);
 8001ba6:	2010      	movs	r0, #16
 8001ba8:	f000 fc86 	bl	80024b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bb4:	4802      	ldr	r0, [pc, #8]	@ (8001bc0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001bb6:	f002 f8d3 	bl	8003d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	2000008c 	.word	0x2000008c

08001bc4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bc8:	4802      	ldr	r0, [pc, #8]	@ (8001bd4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001bca:	f002 f8c9 	bl	8003d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	2000008c 	.word	0x2000008c

08001bd8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bdc:	4802      	ldr	r0, [pc, #8]	@ (8001be8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001bde:	f002 f8bf 	bl	8003d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	2000008c 	.word	0x2000008c

08001bec <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bf0:	4802      	ldr	r0, [pc, #8]	@ (8001bfc <TIM1_CC_IRQHandler+0x10>)
 8001bf2:	f002 f8b5 	bl	8003d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	2000008c 	.word	0x2000008c

08001c00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c04:	4802      	ldr	r0, [pc, #8]	@ (8001c10 <TIM2_IRQHandler+0x10>)
 8001c06:	f002 f8ab 	bl	8003d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200000d4 	.word	0x200000d4

08001c14 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c18:	4802      	ldr	r0, [pc, #8]	@ (8001c24 <TIM4_IRQHandler+0x10>)
 8001c1a:	f002 f8a1 	bl	8003d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	2000011c 	.word	0x2000011c

08001c28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c2c:	4802      	ldr	r0, [pc, #8]	@ (8001c38 <USART2_IRQHandler+0x10>)
 8001c2e:	f003 fa8d 	bl	800514c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000164 	.word	0x20000164

08001c3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001c40:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001c44:	f000 fc38 	bl	80024b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c54:	4a14      	ldr	r2, [pc, #80]	@ (8001ca8 <_sbrk+0x5c>)
 8001c56:	4b15      	ldr	r3, [pc, #84]	@ (8001cac <_sbrk+0x60>)
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c60:	4b13      	ldr	r3, [pc, #76]	@ (8001cb0 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c68:	4b11      	ldr	r3, [pc, #68]	@ (8001cb0 <_sbrk+0x64>)
 8001c6a:	4a12      	ldr	r2, [pc, #72]	@ (8001cb4 <_sbrk+0x68>)
 8001c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c6e:	4b10      	ldr	r3, [pc, #64]	@ (8001cb0 <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d207      	bcs.n	8001c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c7c:	f004 f9fc 	bl	8006078 <__errno>
 8001c80:	4603      	mov	r3, r0
 8001c82:	220c      	movs	r2, #12
 8001c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c8a:	e009      	b.n	8001ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c92:	4b07      	ldr	r3, [pc, #28]	@ (8001cb0 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a05      	ldr	r2, [pc, #20]	@ (8001cb0 <_sbrk+0x64>)
 8001c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20020000 	.word	0x20020000
 8001cac:	00000400 	.word	0x00000400
 8001cb0:	20000290 	.word	0x20000290
 8001cb4:	200003e0 	.word	0x200003e0

08001cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cbc:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <SystemInit+0x20>)
 8001cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cc2:	4a05      	ldr	r2, [pc, #20]	@ (8001cd8 <SystemInit+0x20>)
 8001cc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ce0:	f7ff ffea 	bl	8001cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ce4:	480c      	ldr	r0, [pc, #48]	@ (8001d18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ce6:	490d      	ldr	r1, [pc, #52]	@ (8001d1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cec:	e002      	b.n	8001cf4 <LoopCopyDataInit>

08001cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cf2:	3304      	adds	r3, #4

08001cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf8:	d3f9      	bcc.n	8001cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001d24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cfc:	4c0a      	ldr	r4, [pc, #40]	@ (8001d28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d00:	e001      	b.n	8001d06 <LoopFillZerobss>

08001d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d04:	3204      	adds	r2, #4

08001d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d08:	d3fb      	bcc.n	8001d02 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d0a:	f004 f9bb 	bl	8006084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d0e:	f7ff f863 	bl	8000dd8 <main>
  bx  lr    
 8001d12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d1c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d20:	08006a50 	.word	0x08006a50
  ldr r2, =_sbss
 8001d24:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d28:	200003e0 	.word	0x200003e0

08001d2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d2c:	e7fe      	b.n	8001d2c <ADC_IRQHandler>
	...

08001d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d34:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <HAL_Init+0x40>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0d      	ldr	r2, [pc, #52]	@ (8001d70 <HAL_Init+0x40>)
 8001d3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d40:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <HAL_Init+0x40>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a0a      	ldr	r2, [pc, #40]	@ (8001d70 <HAL_Init+0x40>)
 8001d46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d4c:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <HAL_Init+0x40>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a07      	ldr	r2, [pc, #28]	@ (8001d70 <HAL_Init+0x40>)
 8001d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d58:	2003      	movs	r0, #3
 8001d5a:	f000 f92b 	bl	8001fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f000 f808 	bl	8001d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d64:	f7ff fd5a 	bl	800181c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023c00 	.word	0x40023c00

08001d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d7c:	4b12      	ldr	r3, [pc, #72]	@ (8001dc8 <HAL_InitTick+0x54>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b12      	ldr	r3, [pc, #72]	@ (8001dcc <HAL_InitTick+0x58>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 f943 	bl	800201e <HAL_SYSTICK_Config>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e00e      	b.n	8001dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b0f      	cmp	r3, #15
 8001da6:	d80a      	bhi.n	8001dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da8:	2200      	movs	r2, #0
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001db0:	f000 f90b 	bl	8001fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001db4:	4a06      	ldr	r2, [pc, #24]	@ (8001dd0 <HAL_InitTick+0x5c>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e000      	b.n	8001dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000014 	.word	0x20000014
 8001dcc:	2000001c 	.word	0x2000001c
 8001dd0:	20000018 	.word	0x20000018

08001dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <HAL_IncTick+0x20>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <HAL_IncTick+0x24>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	4a04      	ldr	r2, [pc, #16]	@ (8001df8 <HAL_IncTick+0x24>)
 8001de6:	6013      	str	r3, [r2, #0]
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	2000001c 	.word	0x2000001c
 8001df8:	20000294 	.word	0x20000294

08001dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001e00:	4b03      	ldr	r3, [pc, #12]	@ (8001e10 <HAL_GetTick+0x14>)
 8001e02:	681b      	ldr	r3, [r3, #0]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20000294 	.word	0x20000294

08001e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e24:	4b0c      	ldr	r3, [pc, #48]	@ (8001e58 <__NVIC_SetPriorityGrouping+0x44>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e30:	4013      	ands	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e46:	4a04      	ldr	r2, [pc, #16]	@ (8001e58 <__NVIC_SetPriorityGrouping+0x44>)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	60d3      	str	r3, [r2, #12]
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e60:	4b04      	ldr	r3, [pc, #16]	@ (8001e74 <__NVIC_GetPriorityGrouping+0x18>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	0a1b      	lsrs	r3, r3, #8
 8001e66:	f003 0307 	and.w	r3, r3, #7
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	db0b      	blt.n	8001ea2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	f003 021f 	and.w	r2, r3, #31
 8001e90:	4907      	ldr	r1, [pc, #28]	@ (8001eb0 <__NVIC_EnableIRQ+0x38>)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	095b      	lsrs	r3, r3, #5
 8001e98:	2001      	movs	r0, #1
 8001e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000e100 	.word	0xe000e100

08001eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	6039      	str	r1, [r7, #0]
 8001ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	db0a      	blt.n	8001ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	490c      	ldr	r1, [pc, #48]	@ (8001f00 <__NVIC_SetPriority+0x4c>)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	0112      	lsls	r2, r2, #4
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001edc:	e00a      	b.n	8001ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	4908      	ldr	r1, [pc, #32]	@ (8001f04 <__NVIC_SetPriority+0x50>)
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	3b04      	subs	r3, #4
 8001eec:	0112      	lsls	r2, r2, #4
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	761a      	strb	r2, [r3, #24]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000e100 	.word	0xe000e100
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b089      	sub	sp, #36	@ 0x24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f1c3 0307 	rsb	r3, r3, #7
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	bf28      	it	cs
 8001f26:	2304      	movcs	r3, #4
 8001f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	2b06      	cmp	r3, #6
 8001f30:	d902      	bls.n	8001f38 <NVIC_EncodePriority+0x30>
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3b03      	subs	r3, #3
 8001f36:	e000      	b.n	8001f3a <NVIC_EncodePriority+0x32>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43da      	mvns	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5a:	43d9      	mvns	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	4313      	orrs	r3, r2
         );
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3724      	adds	r7, #36	@ 0x24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f80:	d301      	bcc.n	8001f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00f      	b.n	8001fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f86:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb0 <SysTick_Config+0x40>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f8e:	210f      	movs	r1, #15
 8001f90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f94:	f7ff ff8e 	bl	8001eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f98:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <SysTick_Config+0x40>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9e:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <SysTick_Config+0x40>)
 8001fa0:	2207      	movs	r2, #7
 8001fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	e000e010 	.word	0xe000e010

08001fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ff29 	bl	8001e14 <__NVIC_SetPriorityGrouping>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fdc:	f7ff ff3e 	bl	8001e5c <__NVIC_GetPriorityGrouping>
 8001fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	6978      	ldr	r0, [r7, #20]
 8001fe8:	f7ff ff8e 	bl	8001f08 <NVIC_EncodePriority>
 8001fec:	4602      	mov	r2, r0
 8001fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff5d 	bl	8001eb4 <__NVIC_SetPriority>
}
 8001ffa:	bf00      	nop
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff31 	bl	8001e78 <__NVIC_EnableIRQ>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ffa2 	bl	8001f70 <SysTick_Config>
 800202c:	4603      	mov	r3, r0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002042:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002044:	f7ff feda 	bl	8001dfc <HAL_GetTick>
 8002048:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d008      	beq.n	8002068 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2280      	movs	r2, #128	@ 0x80
 800205a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e052      	b.n	800210e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0216 	bic.w	r2, r2, #22
 8002076:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695a      	ldr	r2, [r3, #20]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002086:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	2b00      	cmp	r3, #0
 800208e:	d103      	bne.n	8002098 <HAL_DMA_Abort+0x62>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0208 	bic.w	r2, r2, #8
 80020a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0201 	bic.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020b8:	e013      	b.n	80020e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ba:	f7ff fe9f 	bl	8001dfc <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d90c      	bls.n	80020e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2220      	movs	r2, #32
 80020cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2203      	movs	r2, #3
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e015      	b.n	800210e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1e4      	bne.n	80020ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f4:	223f      	movs	r2, #63	@ 0x3f
 80020f6:	409a      	lsls	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d004      	beq.n	8002134 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2280      	movs	r2, #128	@ 0x80
 800212e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e00c      	b.n	800214e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2205      	movs	r2, #5
 8002138:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0201 	bic.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	@ 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	e165      	b.n	8002444 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002178:	2201      	movs	r2, #1
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	429a      	cmp	r2, r3
 8002192:	f040 8154 	bne.w	800243e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d005      	beq.n	80021ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d130      	bne.n	8002210 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	2203      	movs	r2, #3
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e4:	2201      	movs	r2, #1
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 0201 	and.w	r2, r3, #1
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b03      	cmp	r3, #3
 800221a:	d017      	beq.n	800224c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	2203      	movs	r2, #3
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d123      	bne.n	80022a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	08da      	lsrs	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3208      	adds	r2, #8
 8002260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	220f      	movs	r2, #15
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	08da      	lsrs	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3208      	adds	r2, #8
 800229a:	69b9      	ldr	r1, [r7, #24]
 800229c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0203 	and.w	r2, r3, #3
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80ae 	beq.w	800243e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b5d      	ldr	r3, [pc, #372]	@ (800245c <HAL_GPIO_Init+0x300>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	4a5c      	ldr	r2, [pc, #368]	@ (800245c <HAL_GPIO_Init+0x300>)
 80022ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022f2:	4b5a      	ldr	r3, [pc, #360]	@ (800245c <HAL_GPIO_Init+0x300>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022fe:	4a58      	ldr	r2, [pc, #352]	@ (8002460 <HAL_GPIO_Init+0x304>)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	089b      	lsrs	r3, r3, #2
 8002304:	3302      	adds	r3, #2
 8002306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4f      	ldr	r2, [pc, #316]	@ (8002464 <HAL_GPIO_Init+0x308>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d025      	beq.n	8002376 <HAL_GPIO_Init+0x21a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4e      	ldr	r2, [pc, #312]	@ (8002468 <HAL_GPIO_Init+0x30c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d01f      	beq.n	8002372 <HAL_GPIO_Init+0x216>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a4d      	ldr	r2, [pc, #308]	@ (800246c <HAL_GPIO_Init+0x310>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d019      	beq.n	800236e <HAL_GPIO_Init+0x212>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a4c      	ldr	r2, [pc, #304]	@ (8002470 <HAL_GPIO_Init+0x314>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d013      	beq.n	800236a <HAL_GPIO_Init+0x20e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a4b      	ldr	r2, [pc, #300]	@ (8002474 <HAL_GPIO_Init+0x318>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00d      	beq.n	8002366 <HAL_GPIO_Init+0x20a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a4a      	ldr	r2, [pc, #296]	@ (8002478 <HAL_GPIO_Init+0x31c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d007      	beq.n	8002362 <HAL_GPIO_Init+0x206>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a49      	ldr	r2, [pc, #292]	@ (800247c <HAL_GPIO_Init+0x320>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d101      	bne.n	800235e <HAL_GPIO_Init+0x202>
 800235a:	2306      	movs	r3, #6
 800235c:	e00c      	b.n	8002378 <HAL_GPIO_Init+0x21c>
 800235e:	2307      	movs	r3, #7
 8002360:	e00a      	b.n	8002378 <HAL_GPIO_Init+0x21c>
 8002362:	2305      	movs	r3, #5
 8002364:	e008      	b.n	8002378 <HAL_GPIO_Init+0x21c>
 8002366:	2304      	movs	r3, #4
 8002368:	e006      	b.n	8002378 <HAL_GPIO_Init+0x21c>
 800236a:	2303      	movs	r3, #3
 800236c:	e004      	b.n	8002378 <HAL_GPIO_Init+0x21c>
 800236e:	2302      	movs	r3, #2
 8002370:	e002      	b.n	8002378 <HAL_GPIO_Init+0x21c>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <HAL_GPIO_Init+0x21c>
 8002376:	2300      	movs	r3, #0
 8002378:	69fa      	ldr	r2, [r7, #28]
 800237a:	f002 0203 	and.w	r2, r2, #3
 800237e:	0092      	lsls	r2, r2, #2
 8002380:	4093      	lsls	r3, r2
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002388:	4935      	ldr	r1, [pc, #212]	@ (8002460 <HAL_GPIO_Init+0x304>)
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	089b      	lsrs	r3, r3, #2
 800238e:	3302      	adds	r3, #2
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002396:	4b3a      	ldr	r3, [pc, #232]	@ (8002480 <HAL_GPIO_Init+0x324>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ba:	4a31      	ldr	r2, [pc, #196]	@ (8002480 <HAL_GPIO_Init+0x324>)
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002480 <HAL_GPIO_Init+0x324>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023e4:	4a26      	ldr	r2, [pc, #152]	@ (8002480 <HAL_GPIO_Init+0x324>)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ea:	4b25      	ldr	r3, [pc, #148]	@ (8002480 <HAL_GPIO_Init+0x324>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800240e:	4a1c      	ldr	r2, [pc, #112]	@ (8002480 <HAL_GPIO_Init+0x324>)
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002414:	4b1a      	ldr	r3, [pc, #104]	@ (8002480 <HAL_GPIO_Init+0x324>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002438:	4a11      	ldr	r2, [pc, #68]	@ (8002480 <HAL_GPIO_Init+0x324>)
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3301      	adds	r3, #1
 8002442:	61fb      	str	r3, [r7, #28]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	2b0f      	cmp	r3, #15
 8002448:	f67f ae96 	bls.w	8002178 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800244c:	bf00      	nop
 800244e:	bf00      	nop
 8002450:	3724      	adds	r7, #36	@ 0x24
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800
 8002460:	40013800 	.word	0x40013800
 8002464:	40020000 	.word	0x40020000
 8002468:	40020400 	.word	0x40020400
 800246c:	40020800 	.word	0x40020800
 8002470:	40020c00 	.word	0x40020c00
 8002474:	40021000 	.word	0x40021000
 8002478:	40021400 	.word	0x40021400
 800247c:	40021800 	.word	0x40021800
 8002480:	40013c00 	.word	0x40013c00

08002484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	807b      	strh	r3, [r7, #2]
 8002490:	4613      	mov	r3, r2
 8002492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002494:	787b      	ldrb	r3, [r7, #1]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800249a:	887a      	ldrh	r2, [r7, #2]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024a0:	e003      	b.n	80024aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024a2:	887b      	ldrh	r3, [r7, #2]
 80024a4:	041a      	lsls	r2, r3, #16
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	619a      	str	r2, [r3, #24]
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024c2:	4b08      	ldr	r3, [pc, #32]	@ (80024e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d006      	beq.n	80024dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024ce:	4a05      	ldr	r2, [pc, #20]	@ (80024e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024d0:	88fb      	ldrh	r3, [r7, #6]
 80024d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe fffc 	bl	80014d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40013c00 	.word	0x40013c00

080024e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0cc      	b.n	8002696 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024fc:	4b68      	ldr	r3, [pc, #416]	@ (80026a0 <HAL_RCC_ClockConfig+0x1b8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d90c      	bls.n	8002524 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b65      	ldr	r3, [pc, #404]	@ (80026a0 <HAL_RCC_ClockConfig+0x1b8>)
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	4b63      	ldr	r3, [pc, #396]	@ (80026a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d001      	beq.n	8002524 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0b8      	b.n	8002696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d020      	beq.n	8002572 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800253c:	4b59      	ldr	r3, [pc, #356]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	4a58      	ldr	r2, [pc, #352]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002546:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002554:	4b53      	ldr	r3, [pc, #332]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	4a52      	ldr	r2, [pc, #328]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800255e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002560:	4b50      	ldr	r3, [pc, #320]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	494d      	ldr	r1, [pc, #308]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	4313      	orrs	r3, r2
 8002570:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d044      	beq.n	8002608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d107      	bne.n	8002596 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	4b47      	ldr	r3, [pc, #284]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d119      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e07f      	b.n	8002696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d003      	beq.n	80025a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d107      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a6:	4b3f      	ldr	r3, [pc, #252]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d109      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e06f      	b.n	8002696 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b6:	4b3b      	ldr	r3, [pc, #236]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e067      	b.n	8002696 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025c6:	4b37      	ldr	r3, [pc, #220]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f023 0203 	bic.w	r2, r3, #3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4934      	ldr	r1, [pc, #208]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025d8:	f7ff fc10 	bl	8001dfc <HAL_GetTick>
 80025dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025de:	e00a      	b.n	80025f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e0:	f7ff fc0c 	bl	8001dfc <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e04f      	b.n	8002696 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f6:	4b2b      	ldr	r3, [pc, #172]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 020c 	and.w	r2, r3, #12
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	429a      	cmp	r2, r3
 8002606:	d1eb      	bne.n	80025e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002608:	4b25      	ldr	r3, [pc, #148]	@ (80026a0 <HAL_RCC_ClockConfig+0x1b8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 030f 	and.w	r3, r3, #15
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d20c      	bcs.n	8002630 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002616:	4b22      	ldr	r3, [pc, #136]	@ (80026a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261e:	4b20      	ldr	r3, [pc, #128]	@ (80026a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e032      	b.n	8002696 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800263c:	4b19      	ldr	r3, [pc, #100]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	4916      	ldr	r1, [pc, #88]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	4313      	orrs	r3, r2
 800264c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d009      	beq.n	800266e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800265a:	4b12      	ldr	r3, [pc, #72]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	490e      	ldr	r1, [pc, #56]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800266e:	f000 f855 	bl	800271c <HAL_RCC_GetSysClockFreq>
 8002672:	4602      	mov	r2, r0
 8002674:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	091b      	lsrs	r3, r3, #4
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	490a      	ldr	r1, [pc, #40]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	5ccb      	ldrb	r3, [r1, r3]
 8002682:	fa22 f303 	lsr.w	r3, r2, r3
 8002686:	4a09      	ldr	r2, [pc, #36]	@ (80026ac <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800268a:	4b09      	ldr	r3, [pc, #36]	@ (80026b0 <HAL_RCC_ClockConfig+0x1c8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fb70 	bl	8001d74 <HAL_InitTick>

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40023c00 	.word	0x40023c00
 80026a4:	40023800 	.word	0x40023800
 80026a8:	080069f4 	.word	0x080069f4
 80026ac:	20000014 	.word	0x20000014
 80026b0:	20000018 	.word	0x20000018

080026b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b8:	4b03      	ldr	r3, [pc, #12]	@ (80026c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026ba:	681b      	ldr	r3, [r3, #0]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	20000014 	.word	0x20000014

080026cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026d0:	f7ff fff0 	bl	80026b4 <HAL_RCC_GetHCLKFreq>
 80026d4:	4602      	mov	r2, r0
 80026d6:	4b05      	ldr	r3, [pc, #20]	@ (80026ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	0a9b      	lsrs	r3, r3, #10
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	4903      	ldr	r1, [pc, #12]	@ (80026f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026e2:	5ccb      	ldrb	r3, [r1, r3]
 80026e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40023800 	.word	0x40023800
 80026f0:	08006a04 	.word	0x08006a04

080026f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026f8:	f7ff ffdc 	bl	80026b4 <HAL_RCC_GetHCLKFreq>
 80026fc:	4602      	mov	r2, r0
 80026fe:	4b05      	ldr	r3, [pc, #20]	@ (8002714 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	0b5b      	lsrs	r3, r3, #13
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	4903      	ldr	r1, [pc, #12]	@ (8002718 <HAL_RCC_GetPCLK2Freq+0x24>)
 800270a:	5ccb      	ldrb	r3, [r1, r3]
 800270c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002710:	4618      	mov	r0, r3
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40023800 	.word	0x40023800
 8002718:	08006a04 	.word	0x08006a04

0800271c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800271c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002720:	b0ae      	sub	sp, #184	@ 0xb8
 8002722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002742:	4bcb      	ldr	r3, [pc, #812]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b0c      	cmp	r3, #12
 800274c:	f200 8206 	bhi.w	8002b5c <HAL_RCC_GetSysClockFreq+0x440>
 8002750:	a201      	add	r2, pc, #4	@ (adr r2, 8002758 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002756:	bf00      	nop
 8002758:	0800278d 	.word	0x0800278d
 800275c:	08002b5d 	.word	0x08002b5d
 8002760:	08002b5d 	.word	0x08002b5d
 8002764:	08002b5d 	.word	0x08002b5d
 8002768:	08002795 	.word	0x08002795
 800276c:	08002b5d 	.word	0x08002b5d
 8002770:	08002b5d 	.word	0x08002b5d
 8002774:	08002b5d 	.word	0x08002b5d
 8002778:	0800279d 	.word	0x0800279d
 800277c:	08002b5d 	.word	0x08002b5d
 8002780:	08002b5d 	.word	0x08002b5d
 8002784:	08002b5d 	.word	0x08002b5d
 8002788:	0800298d 	.word	0x0800298d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800278c:	4bb9      	ldr	r3, [pc, #740]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x358>)
 800278e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002792:	e1e7      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002794:	4bb8      	ldr	r3, [pc, #736]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002796:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800279a:	e1e3      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800279c:	4bb4      	ldr	r3, [pc, #720]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x354>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027a8:	4bb1      	ldr	r3, [pc, #708]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x354>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d071      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027b4:	4bae      	ldr	r3, [pc, #696]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x354>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	099b      	lsrs	r3, r3, #6
 80027ba:	2200      	movs	r2, #0
 80027bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80027c0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80027c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80027d0:	2300      	movs	r3, #0
 80027d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80027d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80027da:	4622      	mov	r2, r4
 80027dc:	462b      	mov	r3, r5
 80027de:	f04f 0000 	mov.w	r0, #0
 80027e2:	f04f 0100 	mov.w	r1, #0
 80027e6:	0159      	lsls	r1, r3, #5
 80027e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ec:	0150      	lsls	r0, r2, #5
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4621      	mov	r1, r4
 80027f4:	1a51      	subs	r1, r2, r1
 80027f6:	6439      	str	r1, [r7, #64]	@ 0x40
 80027f8:	4629      	mov	r1, r5
 80027fa:	eb63 0301 	sbc.w	r3, r3, r1
 80027fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800280c:	4649      	mov	r1, r9
 800280e:	018b      	lsls	r3, r1, #6
 8002810:	4641      	mov	r1, r8
 8002812:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002816:	4641      	mov	r1, r8
 8002818:	018a      	lsls	r2, r1, #6
 800281a:	4641      	mov	r1, r8
 800281c:	1a51      	subs	r1, r2, r1
 800281e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002820:	4649      	mov	r1, r9
 8002822:	eb63 0301 	sbc.w	r3, r3, r1
 8002826:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002834:	4649      	mov	r1, r9
 8002836:	00cb      	lsls	r3, r1, #3
 8002838:	4641      	mov	r1, r8
 800283a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800283e:	4641      	mov	r1, r8
 8002840:	00ca      	lsls	r2, r1, #3
 8002842:	4610      	mov	r0, r2
 8002844:	4619      	mov	r1, r3
 8002846:	4603      	mov	r3, r0
 8002848:	4622      	mov	r2, r4
 800284a:	189b      	adds	r3, r3, r2
 800284c:	633b      	str	r3, [r7, #48]	@ 0x30
 800284e:	462b      	mov	r3, r5
 8002850:	460a      	mov	r2, r1
 8002852:	eb42 0303 	adc.w	r3, r2, r3
 8002856:	637b      	str	r3, [r7, #52]	@ 0x34
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002864:	4629      	mov	r1, r5
 8002866:	024b      	lsls	r3, r1, #9
 8002868:	4621      	mov	r1, r4
 800286a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800286e:	4621      	mov	r1, r4
 8002870:	024a      	lsls	r2, r1, #9
 8002872:	4610      	mov	r0, r2
 8002874:	4619      	mov	r1, r3
 8002876:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800287a:	2200      	movs	r2, #0
 800287c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002880:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002884:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002888:	f7fe f910 	bl	8000aac <__aeabi_uldivmod>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4613      	mov	r3, r2
 8002892:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002896:	e067      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002898:	4b75      	ldr	r3, [pc, #468]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x354>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	099b      	lsrs	r3, r3, #6
 800289e:	2200      	movs	r2, #0
 80028a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80028a4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80028a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028b2:	2300      	movs	r3, #0
 80028b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80028b6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80028ba:	4622      	mov	r2, r4
 80028bc:	462b      	mov	r3, r5
 80028be:	f04f 0000 	mov.w	r0, #0
 80028c2:	f04f 0100 	mov.w	r1, #0
 80028c6:	0159      	lsls	r1, r3, #5
 80028c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028cc:	0150      	lsls	r0, r2, #5
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4621      	mov	r1, r4
 80028d4:	1a51      	subs	r1, r2, r1
 80028d6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80028d8:	4629      	mov	r1, r5
 80028da:	eb63 0301 	sbc.w	r3, r3, r1
 80028de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80028ec:	4649      	mov	r1, r9
 80028ee:	018b      	lsls	r3, r1, #6
 80028f0:	4641      	mov	r1, r8
 80028f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028f6:	4641      	mov	r1, r8
 80028f8:	018a      	lsls	r2, r1, #6
 80028fa:	4641      	mov	r1, r8
 80028fc:	ebb2 0a01 	subs.w	sl, r2, r1
 8002900:	4649      	mov	r1, r9
 8002902:	eb63 0b01 	sbc.w	fp, r3, r1
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002912:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002916:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800291a:	4692      	mov	sl, r2
 800291c:	469b      	mov	fp, r3
 800291e:	4623      	mov	r3, r4
 8002920:	eb1a 0303 	adds.w	r3, sl, r3
 8002924:	623b      	str	r3, [r7, #32]
 8002926:	462b      	mov	r3, r5
 8002928:	eb4b 0303 	adc.w	r3, fp, r3
 800292c:	627b      	str	r3, [r7, #36]	@ 0x24
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800293a:	4629      	mov	r1, r5
 800293c:	028b      	lsls	r3, r1, #10
 800293e:	4621      	mov	r1, r4
 8002940:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002944:	4621      	mov	r1, r4
 8002946:	028a      	lsls	r2, r1, #10
 8002948:	4610      	mov	r0, r2
 800294a:	4619      	mov	r1, r3
 800294c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002950:	2200      	movs	r2, #0
 8002952:	673b      	str	r3, [r7, #112]	@ 0x70
 8002954:	677a      	str	r2, [r7, #116]	@ 0x74
 8002956:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800295a:	f7fe f8a7 	bl	8000aac <__aeabi_uldivmod>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4613      	mov	r3, r2
 8002964:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002968:	4b41      	ldr	r3, [pc, #260]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x354>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	0c1b      	lsrs	r3, r3, #16
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	3301      	adds	r3, #1
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800297a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800297e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002982:	fbb2 f3f3 	udiv	r3, r2, r3
 8002986:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800298a:	e0eb      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800298c:	4b38      	ldr	r3, [pc, #224]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x354>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002994:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002998:	4b35      	ldr	r3, [pc, #212]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x354>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d06b      	beq.n	8002a7c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a4:	4b32      	ldr	r3, [pc, #200]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x354>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	099b      	lsrs	r3, r3, #6
 80029aa:	2200      	movs	r2, #0
 80029ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80029b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80029b8:	2300      	movs	r3, #0
 80029ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80029bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80029c0:	4622      	mov	r2, r4
 80029c2:	462b      	mov	r3, r5
 80029c4:	f04f 0000 	mov.w	r0, #0
 80029c8:	f04f 0100 	mov.w	r1, #0
 80029cc:	0159      	lsls	r1, r3, #5
 80029ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029d2:	0150      	lsls	r0, r2, #5
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4621      	mov	r1, r4
 80029da:	1a51      	subs	r1, r2, r1
 80029dc:	61b9      	str	r1, [r7, #24]
 80029de:	4629      	mov	r1, r5
 80029e0:	eb63 0301 	sbc.w	r3, r3, r1
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80029f2:	4659      	mov	r1, fp
 80029f4:	018b      	lsls	r3, r1, #6
 80029f6:	4651      	mov	r1, sl
 80029f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029fc:	4651      	mov	r1, sl
 80029fe:	018a      	lsls	r2, r1, #6
 8002a00:	4651      	mov	r1, sl
 8002a02:	ebb2 0801 	subs.w	r8, r2, r1
 8002a06:	4659      	mov	r1, fp
 8002a08:	eb63 0901 	sbc.w	r9, r3, r1
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a20:	4690      	mov	r8, r2
 8002a22:	4699      	mov	r9, r3
 8002a24:	4623      	mov	r3, r4
 8002a26:	eb18 0303 	adds.w	r3, r8, r3
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	462b      	mov	r3, r5
 8002a2e:	eb49 0303 	adc.w	r3, r9, r3
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002a40:	4629      	mov	r1, r5
 8002a42:	024b      	lsls	r3, r1, #9
 8002a44:	4621      	mov	r1, r4
 8002a46:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	024a      	lsls	r2, r1, #9
 8002a4e:	4610      	mov	r0, r2
 8002a50:	4619      	mov	r1, r3
 8002a52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a56:	2200      	movs	r2, #0
 8002a58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a5a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002a5c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a60:	f7fe f824 	bl	8000aac <__aeabi_uldivmod>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4613      	mov	r3, r2
 8002a6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a6e:	e065      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x420>
 8002a70:	40023800 	.word	0x40023800
 8002a74:	00f42400 	.word	0x00f42400
 8002a78:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a7c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x458>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	099b      	lsrs	r3, r3, #6
 8002a82:	2200      	movs	r2, #0
 8002a84:	4618      	mov	r0, r3
 8002a86:	4611      	mov	r1, r2
 8002a88:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a8e:	2300      	movs	r3, #0
 8002a90:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a92:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002a96:	4642      	mov	r2, r8
 8002a98:	464b      	mov	r3, r9
 8002a9a:	f04f 0000 	mov.w	r0, #0
 8002a9e:	f04f 0100 	mov.w	r1, #0
 8002aa2:	0159      	lsls	r1, r3, #5
 8002aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aa8:	0150      	lsls	r0, r2, #5
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4641      	mov	r1, r8
 8002ab0:	1a51      	subs	r1, r2, r1
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	4649      	mov	r1, r9
 8002ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002ac8:	4659      	mov	r1, fp
 8002aca:	018b      	lsls	r3, r1, #6
 8002acc:	4651      	mov	r1, sl
 8002ace:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ad2:	4651      	mov	r1, sl
 8002ad4:	018a      	lsls	r2, r1, #6
 8002ad6:	4651      	mov	r1, sl
 8002ad8:	1a54      	subs	r4, r2, r1
 8002ada:	4659      	mov	r1, fp
 8002adc:	eb63 0501 	sbc.w	r5, r3, r1
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	00eb      	lsls	r3, r5, #3
 8002aea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aee:	00e2      	lsls	r2, r4, #3
 8002af0:	4614      	mov	r4, r2
 8002af2:	461d      	mov	r5, r3
 8002af4:	4643      	mov	r3, r8
 8002af6:	18e3      	adds	r3, r4, r3
 8002af8:	603b      	str	r3, [r7, #0]
 8002afa:	464b      	mov	r3, r9
 8002afc:	eb45 0303 	adc.w	r3, r5, r3
 8002b00:	607b      	str	r3, [r7, #4]
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	f04f 0300 	mov.w	r3, #0
 8002b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b0e:	4629      	mov	r1, r5
 8002b10:	028b      	lsls	r3, r1, #10
 8002b12:	4621      	mov	r1, r4
 8002b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b18:	4621      	mov	r1, r4
 8002b1a:	028a      	lsls	r2, r1, #10
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	4619      	mov	r1, r3
 8002b20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b24:	2200      	movs	r2, #0
 8002b26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b28:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002b2a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b2e:	f7fd ffbd 	bl	8000aac <__aeabi_uldivmod>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4613      	mov	r3, r2
 8002b38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	0f1b      	lsrs	r3, r3, #28
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002b4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b5a:	e003      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b5c:	4b06      	ldr	r3, [pc, #24]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b62:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	37b8      	adds	r7, #184	@ 0xb8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
 8002b78:	00f42400 	.word	0x00f42400

08002b7c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e28d      	b.n	80030aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 8083 	beq.w	8002ca2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b9c:	4b94      	ldr	r3, [pc, #592]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 030c 	and.w	r3, r3, #12
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d019      	beq.n	8002bdc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ba8:	4b91      	ldr	r3, [pc, #580]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 030c 	and.w	r3, r3, #12
        || \
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d106      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002bb4:	4b8e      	ldr	r3, [pc, #568]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bc0:	d00c      	beq.n	8002bdc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bc2:	4b8b      	ldr	r3, [pc, #556]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002bca:	2b0c      	cmp	r3, #12
 8002bcc:	d112      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bce:	4b88      	ldr	r3, [pc, #544]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bda:	d10b      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bdc:	4b84      	ldr	r3, [pc, #528]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d05b      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x124>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d157      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e25a      	b.n	80030aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bfc:	d106      	bne.n	8002c0c <HAL_RCC_OscConfig+0x90>
 8002bfe:	4b7c      	ldr	r3, [pc, #496]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a7b      	ldr	r2, [pc, #492]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e01d      	b.n	8002c48 <HAL_RCC_OscConfig+0xcc>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c14:	d10c      	bne.n	8002c30 <HAL_RCC_OscConfig+0xb4>
 8002c16:	4b76      	ldr	r3, [pc, #472]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a75      	ldr	r2, [pc, #468]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002c1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	4b73      	ldr	r3, [pc, #460]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a72      	ldr	r2, [pc, #456]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e00b      	b.n	8002c48 <HAL_RCC_OscConfig+0xcc>
 8002c30:	4b6f      	ldr	r3, [pc, #444]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a6e      	ldr	r2, [pc, #440]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002c36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b6c      	ldr	r3, [pc, #432]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a6b      	ldr	r2, [pc, #428]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002c42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d013      	beq.n	8002c78 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7ff f8d4 	bl	8001dfc <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c58:	f7ff f8d0 	bl	8001dfc <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b64      	cmp	r3, #100	@ 0x64
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e21f      	b.n	80030aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	4b61      	ldr	r3, [pc, #388]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0xdc>
 8002c76:	e014      	b.n	8002ca2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7ff f8c0 	bl	8001dfc <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c80:	f7ff f8bc 	bl	8001dfc <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b64      	cmp	r3, #100	@ 0x64
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e20b      	b.n	80030aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c92:	4b57      	ldr	r3, [pc, #348]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x104>
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d06f      	beq.n	8002d8e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002cae:	4b50      	ldr	r3, [pc, #320]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d017      	beq.n	8002cea <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002cba:	4b4d      	ldr	r3, [pc, #308]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
        || \
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d105      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002cc6:	4b4a      	ldr	r3, [pc, #296]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00b      	beq.n	8002cea <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cd2:	4b47      	ldr	r3, [pc, #284]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	d11c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cde:	4b44      	ldr	r3, [pc, #272]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d116      	bne.n	8002d18 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cea:	4b41      	ldr	r3, [pc, #260]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_RCC_OscConfig+0x186>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e1d3      	b.n	80030aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d02:	4b3b      	ldr	r3, [pc, #236]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	4937      	ldr	r1, [pc, #220]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d16:	e03a      	b.n	8002d8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d020      	beq.n	8002d62 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d20:	4b34      	ldr	r3, [pc, #208]	@ (8002df4 <HAL_RCC_OscConfig+0x278>)
 8002d22:	2201      	movs	r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d26:	f7ff f869 	bl	8001dfc <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2e:	f7ff f865 	bl	8001dfc <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e1b4      	b.n	80030aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d40:	4b2b      	ldr	r3, [pc, #172]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4c:	4b28      	ldr	r3, [pc, #160]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4925      	ldr	r1, [pc, #148]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	600b      	str	r3, [r1, #0]
 8002d60:	e015      	b.n	8002d8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d62:	4b24      	ldr	r3, [pc, #144]	@ (8002df4 <HAL_RCC_OscConfig+0x278>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7ff f848 	bl	8001dfc <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d70:	f7ff f844 	bl	8001dfc <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e193      	b.n	80030aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d82:	4b1b      	ldr	r3, [pc, #108]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d036      	beq.n	8002e08 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d016      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da2:	4b15      	ldr	r3, [pc, #84]	@ (8002df8 <HAL_RCC_OscConfig+0x27c>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da8:	f7ff f828 	bl	8001dfc <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db0:	f7ff f824 	bl	8001dfc <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e173      	b.n	80030aa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x234>
 8002dce:	e01b      	b.n	8002e08 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd0:	4b09      	ldr	r3, [pc, #36]	@ (8002df8 <HAL_RCC_OscConfig+0x27c>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd6:	f7ff f811 	bl	8001dfc <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ddc:	e00e      	b.n	8002dfc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dde:	f7ff f80d 	bl	8001dfc <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d907      	bls.n	8002dfc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e15c      	b.n	80030aa <HAL_RCC_OscConfig+0x52e>
 8002df0:	40023800 	.word	0x40023800
 8002df4:	42470000 	.word	0x42470000
 8002df8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	4b8a      	ldr	r3, [pc, #552]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8002dfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1ea      	bne.n	8002dde <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 8097 	beq.w	8002f44 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e16:	2300      	movs	r3, #0
 8002e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1a:	4b83      	ldr	r3, [pc, #524]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10f      	bne.n	8002e46 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	4b7f      	ldr	r3, [pc, #508]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	4a7e      	ldr	r2, [pc, #504]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8002e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e36:	4b7c      	ldr	r3, [pc, #496]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e42:	2301      	movs	r3, #1
 8002e44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e46:	4b79      	ldr	r3, [pc, #484]	@ (800302c <HAL_RCC_OscConfig+0x4b0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d118      	bne.n	8002e84 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e52:	4b76      	ldr	r3, [pc, #472]	@ (800302c <HAL_RCC_OscConfig+0x4b0>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a75      	ldr	r2, [pc, #468]	@ (800302c <HAL_RCC_OscConfig+0x4b0>)
 8002e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5e:	f7fe ffcd 	bl	8001dfc <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e66:	f7fe ffc9 	bl	8001dfc <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e118      	b.n	80030aa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	4b6c      	ldr	r3, [pc, #432]	@ (800302c <HAL_RCC_OscConfig+0x4b0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d106      	bne.n	8002e9a <HAL_RCC_OscConfig+0x31e>
 8002e8c:	4b66      	ldr	r3, [pc, #408]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e90:	4a65      	ldr	r2, [pc, #404]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e98:	e01c      	b.n	8002ed4 <HAL_RCC_OscConfig+0x358>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b05      	cmp	r3, #5
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x340>
 8002ea2:	4b61      	ldr	r3, [pc, #388]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea6:	4a60      	ldr	r2, [pc, #384]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8002ea8:	f043 0304 	orr.w	r3, r3, #4
 8002eac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eae:	4b5e      	ldr	r3, [pc, #376]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb2:	4a5d      	ldr	r2, [pc, #372]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eba:	e00b      	b.n	8002ed4 <HAL_RCC_OscConfig+0x358>
 8002ebc:	4b5a      	ldr	r3, [pc, #360]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec0:	4a59      	ldr	r2, [pc, #356]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8002ec2:	f023 0301 	bic.w	r3, r3, #1
 8002ec6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ec8:	4b57      	ldr	r3, [pc, #348]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ecc:	4a56      	ldr	r2, [pc, #344]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8002ece:	f023 0304 	bic.w	r3, r3, #4
 8002ed2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d015      	beq.n	8002f08 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002edc:	f7fe ff8e 	bl	8001dfc <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee2:	e00a      	b.n	8002efa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee4:	f7fe ff8a 	bl	8001dfc <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e0d7      	b.n	80030aa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efa:	4b4b      	ldr	r3, [pc, #300]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0ee      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x368>
 8002f06:	e014      	b.n	8002f32 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f08:	f7fe ff78 	bl	8001dfc <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0e:	e00a      	b.n	8002f26 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f10:	f7fe ff74 	bl	8001dfc <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e0c1      	b.n	80030aa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f26:	4b40      	ldr	r3, [pc, #256]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1ee      	bne.n	8002f10 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d105      	bne.n	8002f44 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f38:	4b3b      	ldr	r3, [pc, #236]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3c:	4a3a      	ldr	r2, [pc, #232]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8002f3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80ad 	beq.w	80030a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f4e:	4b36      	ldr	r3, [pc, #216]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d060      	beq.n	800301c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d145      	bne.n	8002fee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f62:	4b33      	ldr	r3, [pc, #204]	@ (8003030 <HAL_RCC_OscConfig+0x4b4>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fe ff48 	bl	8001dfc <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f70:	f7fe ff44 	bl	8001dfc <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e093      	b.n	80030aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f82:	4b29      	ldr	r3, [pc, #164]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69da      	ldr	r2, [r3, #28]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	019b      	lsls	r3, r3, #6
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa4:	085b      	lsrs	r3, r3, #1
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	041b      	lsls	r3, r3, #16
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb0:	061b      	lsls	r3, r3, #24
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb8:	071b      	lsls	r3, r3, #28
 8002fba:	491b      	ldr	r1, [pc, #108]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8003030 <HAL_RCC_OscConfig+0x4b4>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc6:	f7fe ff19 	bl	8001dfc <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fce:	f7fe ff15 	bl	8001dfc <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e064      	b.n	80030aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe0:	4b11      	ldr	r3, [pc, #68]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x452>
 8002fec:	e05c      	b.n	80030a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fee:	4b10      	ldr	r3, [pc, #64]	@ (8003030 <HAL_RCC_OscConfig+0x4b4>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff4:	f7fe ff02 	bl	8001dfc <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffc:	f7fe fefe 	bl	8001dfc <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e04d      	b.n	80030aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300e:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <HAL_RCC_OscConfig+0x4ac>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x480>
 800301a:	e045      	b.n	80030a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d107      	bne.n	8003034 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e040      	b.n	80030aa <HAL_RCC_OscConfig+0x52e>
 8003028:	40023800 	.word	0x40023800
 800302c:	40007000 	.word	0x40007000
 8003030:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003034:	4b1f      	ldr	r3, [pc, #124]	@ (80030b4 <HAL_RCC_OscConfig+0x538>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d030      	beq.n	80030a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d129      	bne.n	80030a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305a:	429a      	cmp	r2, r3
 800305c:	d122      	bne.n	80030a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003064:	4013      	ands	r3, r2
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800306a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800306c:	4293      	cmp	r3, r2
 800306e:	d119      	bne.n	80030a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307a:	085b      	lsrs	r3, r3, #1
 800307c:	3b01      	subs	r3, #1
 800307e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003080:	429a      	cmp	r2, r3
 8003082:	d10f      	bne.n	80030a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003090:	429a      	cmp	r2, r3
 8003092:	d107      	bne.n	80030a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800

080030b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e041      	b.n	800314e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fe fbc4 	bl	800186c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3304      	adds	r3, #4
 80030f4:	4619      	mov	r1, r3
 80030f6:	4610      	mov	r0, r2
 80030f8:	f001 fa06 	bl	8004508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e041      	b.n	80031ec <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d106      	bne.n	8003182 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f839 	bl	80031f4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2202      	movs	r2, #2
 8003186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3304      	adds	r3, #4
 8003192:	4619      	mov	r1, r3
 8003194:	4610      	mov	r0, r2
 8003196:	f001 f9b7 	bl	8004508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d109      	bne.n	8003230 <HAL_TIM_OC_Start_IT+0x28>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b01      	cmp	r3, #1
 8003226:	bf14      	ite	ne
 8003228:	2301      	movne	r3, #1
 800322a:	2300      	moveq	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	e022      	b.n	8003276 <HAL_TIM_OC_Start_IT+0x6e>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	2b04      	cmp	r3, #4
 8003234:	d109      	bne.n	800324a <HAL_TIM_OC_Start_IT+0x42>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b01      	cmp	r3, #1
 8003240:	bf14      	ite	ne
 8003242:	2301      	movne	r3, #1
 8003244:	2300      	moveq	r3, #0
 8003246:	b2db      	uxtb	r3, r3
 8003248:	e015      	b.n	8003276 <HAL_TIM_OC_Start_IT+0x6e>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b08      	cmp	r3, #8
 800324e:	d109      	bne.n	8003264 <HAL_TIM_OC_Start_IT+0x5c>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b01      	cmp	r3, #1
 800325a:	bf14      	ite	ne
 800325c:	2301      	movne	r3, #1
 800325e:	2300      	moveq	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	e008      	b.n	8003276 <HAL_TIM_OC_Start_IT+0x6e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	bf14      	ite	ne
 8003270:	2301      	movne	r3, #1
 8003272:	2300      	moveq	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e0c7      	b.n	800340e <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d104      	bne.n	800328e <HAL_TIM_OC_Start_IT+0x86>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800328c:	e013      	b.n	80032b6 <HAL_TIM_OC_Start_IT+0xae>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b04      	cmp	r3, #4
 8003292:	d104      	bne.n	800329e <HAL_TIM_OC_Start_IT+0x96>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800329c:	e00b      	b.n	80032b6 <HAL_TIM_OC_Start_IT+0xae>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d104      	bne.n	80032ae <HAL_TIM_OC_Start_IT+0xa6>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032ac:	e003      	b.n	80032b6 <HAL_TIM_OC_Start_IT+0xae>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2202      	movs	r2, #2
 80032b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b0c      	cmp	r3, #12
 80032ba:	d841      	bhi.n	8003340 <HAL_TIM_OC_Start_IT+0x138>
 80032bc:	a201      	add	r2, pc, #4	@ (adr r2, 80032c4 <HAL_TIM_OC_Start_IT+0xbc>)
 80032be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c2:	bf00      	nop
 80032c4:	080032f9 	.word	0x080032f9
 80032c8:	08003341 	.word	0x08003341
 80032cc:	08003341 	.word	0x08003341
 80032d0:	08003341 	.word	0x08003341
 80032d4:	0800330b 	.word	0x0800330b
 80032d8:	08003341 	.word	0x08003341
 80032dc:	08003341 	.word	0x08003341
 80032e0:	08003341 	.word	0x08003341
 80032e4:	0800331d 	.word	0x0800331d
 80032e8:	08003341 	.word	0x08003341
 80032ec:	08003341 	.word	0x08003341
 80032f0:	08003341 	.word	0x08003341
 80032f4:	0800332f 	.word	0x0800332f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0202 	orr.w	r2, r2, #2
 8003306:	60da      	str	r2, [r3, #12]
      break;
 8003308:	e01d      	b.n	8003346 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 0204 	orr.w	r2, r2, #4
 8003318:	60da      	str	r2, [r3, #12]
      break;
 800331a:	e014      	b.n	8003346 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0208 	orr.w	r2, r2, #8
 800332a:	60da      	str	r2, [r3, #12]
      break;
 800332c:	e00b      	b.n	8003346 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0210 	orr.w	r2, r2, #16
 800333c:	60da      	str	r2, [r3, #12]
      break;
 800333e:	e002      	b.n	8003346 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
      break;
 8003344:	bf00      	nop
  }

  if (status == HAL_OK)
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d15f      	bne.n	800340c <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2201      	movs	r2, #1
 8003352:	6839      	ldr	r1, [r7, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f001 fcf1 	bl	8004d3c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a2e      	ldr	r2, [pc, #184]	@ (8003418 <HAL_TIM_OC_Start_IT+0x210>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d004      	beq.n	800336e <HAL_TIM_OC_Start_IT+0x166>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a2c      	ldr	r2, [pc, #176]	@ (800341c <HAL_TIM_OC_Start_IT+0x214>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d101      	bne.n	8003372 <HAL_TIM_OC_Start_IT+0x16a>
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <HAL_TIM_OC_Start_IT+0x16c>
 8003372:	2300      	movs	r3, #0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d007      	beq.n	8003388 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003386:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a22      	ldr	r2, [pc, #136]	@ (8003418 <HAL_TIM_OC_Start_IT+0x210>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d022      	beq.n	80033d8 <HAL_TIM_OC_Start_IT+0x1d0>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800339a:	d01d      	beq.n	80033d8 <HAL_TIM_OC_Start_IT+0x1d0>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1f      	ldr	r2, [pc, #124]	@ (8003420 <HAL_TIM_OC_Start_IT+0x218>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d018      	beq.n	80033d8 <HAL_TIM_OC_Start_IT+0x1d0>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003424 <HAL_TIM_OC_Start_IT+0x21c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d013      	beq.n	80033d8 <HAL_TIM_OC_Start_IT+0x1d0>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003428 <HAL_TIM_OC_Start_IT+0x220>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d00e      	beq.n	80033d8 <HAL_TIM_OC_Start_IT+0x1d0>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a17      	ldr	r2, [pc, #92]	@ (800341c <HAL_TIM_OC_Start_IT+0x214>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d009      	beq.n	80033d8 <HAL_TIM_OC_Start_IT+0x1d0>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a18      	ldr	r2, [pc, #96]	@ (800342c <HAL_TIM_OC_Start_IT+0x224>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d004      	beq.n	80033d8 <HAL_TIM_OC_Start_IT+0x1d0>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a17      	ldr	r2, [pc, #92]	@ (8003430 <HAL_TIM_OC_Start_IT+0x228>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d111      	bne.n	80033fc <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b06      	cmp	r3, #6
 80033e8:	d010      	beq.n	800340c <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0201 	orr.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033fa:	e007      	b.n	800340c <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800340c:	7bfb      	ldrb	r3, [r7, #15]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40010000 	.word	0x40010000
 800341c:	40010400 	.word	0x40010400
 8003420:	40000400 	.word	0x40000400
 8003424:	40000800 	.word	0x40000800
 8003428:	40000c00 	.word	0x40000c00
 800342c:	40014000 	.word	0x40014000
 8003430:	40001800 	.word	0x40001800

08003434 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b0c      	cmp	r3, #12
 8003446:	d841      	bhi.n	80034cc <HAL_TIM_OC_Stop_IT+0x98>
 8003448:	a201      	add	r2, pc, #4	@ (adr r2, 8003450 <HAL_TIM_OC_Stop_IT+0x1c>)
 800344a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344e:	bf00      	nop
 8003450:	08003485 	.word	0x08003485
 8003454:	080034cd 	.word	0x080034cd
 8003458:	080034cd 	.word	0x080034cd
 800345c:	080034cd 	.word	0x080034cd
 8003460:	08003497 	.word	0x08003497
 8003464:	080034cd 	.word	0x080034cd
 8003468:	080034cd 	.word	0x080034cd
 800346c:	080034cd 	.word	0x080034cd
 8003470:	080034a9 	.word	0x080034a9
 8003474:	080034cd 	.word	0x080034cd
 8003478:	080034cd 	.word	0x080034cd
 800347c:	080034cd 	.word	0x080034cd
 8003480:	080034bb 	.word	0x080034bb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0202 	bic.w	r2, r2, #2
 8003492:	60da      	str	r2, [r3, #12]
      break;
 8003494:	e01d      	b.n	80034d2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0204 	bic.w	r2, r2, #4
 80034a4:	60da      	str	r2, [r3, #12]
      break;
 80034a6:	e014      	b.n	80034d2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0208 	bic.w	r2, r2, #8
 80034b6:	60da      	str	r2, [r3, #12]
      break;
 80034b8:	e00b      	b.n	80034d2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0210 	bic.w	r2, r2, #16
 80034c8:	60da      	str	r2, [r3, #12]
      break;
 80034ca:	e002      	b.n	80034d2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
      break;
 80034d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d161      	bne.n	800359c <HAL_TIM_OC_Stop_IT+0x168>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2200      	movs	r2, #0
 80034de:	6839      	ldr	r1, [r7, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f001 fc2b 	bl	8004d3c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a2f      	ldr	r2, [pc, #188]	@ (80035a8 <HAL_TIM_OC_Stop_IT+0x174>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d004      	beq.n	80034fa <HAL_TIM_OC_Stop_IT+0xc6>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a2d      	ldr	r2, [pc, #180]	@ (80035ac <HAL_TIM_OC_Stop_IT+0x178>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d101      	bne.n	80034fe <HAL_TIM_OC_Stop_IT+0xca>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <HAL_TIM_OC_Stop_IT+0xcc>
 80034fe:	2300      	movs	r3, #0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d017      	beq.n	8003534 <HAL_TIM_OC_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6a1a      	ldr	r2, [r3, #32]
 800350a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800350e:	4013      	ands	r3, r2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10f      	bne.n	8003534 <HAL_TIM_OC_Stop_IT+0x100>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6a1a      	ldr	r2, [r3, #32]
 800351a:	f240 4344 	movw	r3, #1092	@ 0x444
 800351e:	4013      	ands	r3, r2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d107      	bne.n	8003534 <HAL_TIM_OC_Stop_IT+0x100>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003532:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6a1a      	ldr	r2, [r3, #32]
 800353a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10f      	bne.n	8003564 <HAL_TIM_OC_Stop_IT+0x130>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6a1a      	ldr	r2, [r3, #32]
 800354a:	f240 4344 	movw	r3, #1092	@ 0x444
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d107      	bne.n	8003564 <HAL_TIM_OC_Stop_IT+0x130>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0201 	bic.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d104      	bne.n	8003574 <HAL_TIM_OC_Stop_IT+0x140>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003572:	e013      	b.n	800359c <HAL_TIM_OC_Stop_IT+0x168>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2b04      	cmp	r3, #4
 8003578:	d104      	bne.n	8003584 <HAL_TIM_OC_Stop_IT+0x150>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003582:	e00b      	b.n	800359c <HAL_TIM_OC_Stop_IT+0x168>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2b08      	cmp	r3, #8
 8003588:	d104      	bne.n	8003594 <HAL_TIM_OC_Stop_IT+0x160>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003592:	e003      	b.n	800359c <HAL_TIM_OC_Stop_IT+0x168>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 800359c:	7bfb      	ldrb	r3, [r7, #15]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40010000 	.word	0x40010000
 80035ac:	40010400 	.word	0x40010400

080035b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e041      	b.n	8003646 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f839 	bl	800364e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3304      	adds	r3, #4
 80035ec:	4619      	mov	r1, r3
 80035ee:	4610      	mov	r0, r2
 80035f0:	f000 ff8a 	bl	8004508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
	...

08003664 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d109      	bne.n	8003688 <HAL_TIM_PWM_Start+0x24>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b01      	cmp	r3, #1
 800367e:	bf14      	ite	ne
 8003680:	2301      	movne	r3, #1
 8003682:	2300      	moveq	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	e022      	b.n	80036ce <HAL_TIM_PWM_Start+0x6a>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b04      	cmp	r3, #4
 800368c:	d109      	bne.n	80036a2 <HAL_TIM_PWM_Start+0x3e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b01      	cmp	r3, #1
 8003698:	bf14      	ite	ne
 800369a:	2301      	movne	r3, #1
 800369c:	2300      	moveq	r3, #0
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	e015      	b.n	80036ce <HAL_TIM_PWM_Start+0x6a>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d109      	bne.n	80036bc <HAL_TIM_PWM_Start+0x58>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	bf14      	ite	ne
 80036b4:	2301      	movne	r3, #1
 80036b6:	2300      	moveq	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	e008      	b.n	80036ce <HAL_TIM_PWM_Start+0x6a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	bf14      	ite	ne
 80036c8:	2301      	movne	r3, #1
 80036ca:	2300      	moveq	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e07c      	b.n	80037d0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d104      	bne.n	80036e6 <HAL_TIM_PWM_Start+0x82>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036e4:	e013      	b.n	800370e <HAL_TIM_PWM_Start+0xaa>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d104      	bne.n	80036f6 <HAL_TIM_PWM_Start+0x92>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036f4:	e00b      	b.n	800370e <HAL_TIM_PWM_Start+0xaa>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d104      	bne.n	8003706 <HAL_TIM_PWM_Start+0xa2>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003704:	e003      	b.n	800370e <HAL_TIM_PWM_Start+0xaa>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2202      	movs	r2, #2
 800370a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2201      	movs	r2, #1
 8003714:	6839      	ldr	r1, [r7, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f001 fb10 	bl	8004d3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a2d      	ldr	r2, [pc, #180]	@ (80037d8 <HAL_TIM_PWM_Start+0x174>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d004      	beq.n	8003730 <HAL_TIM_PWM_Start+0xcc>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a2c      	ldr	r2, [pc, #176]	@ (80037dc <HAL_TIM_PWM_Start+0x178>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d101      	bne.n	8003734 <HAL_TIM_PWM_Start+0xd0>
 8003730:	2301      	movs	r3, #1
 8003732:	e000      	b.n	8003736 <HAL_TIM_PWM_Start+0xd2>
 8003734:	2300      	movs	r3, #0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d007      	beq.n	800374a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003748:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a22      	ldr	r2, [pc, #136]	@ (80037d8 <HAL_TIM_PWM_Start+0x174>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d022      	beq.n	800379a <HAL_TIM_PWM_Start+0x136>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800375c:	d01d      	beq.n	800379a <HAL_TIM_PWM_Start+0x136>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a1f      	ldr	r2, [pc, #124]	@ (80037e0 <HAL_TIM_PWM_Start+0x17c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d018      	beq.n	800379a <HAL_TIM_PWM_Start+0x136>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1d      	ldr	r2, [pc, #116]	@ (80037e4 <HAL_TIM_PWM_Start+0x180>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d013      	beq.n	800379a <HAL_TIM_PWM_Start+0x136>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1c      	ldr	r2, [pc, #112]	@ (80037e8 <HAL_TIM_PWM_Start+0x184>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00e      	beq.n	800379a <HAL_TIM_PWM_Start+0x136>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a16      	ldr	r2, [pc, #88]	@ (80037dc <HAL_TIM_PWM_Start+0x178>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d009      	beq.n	800379a <HAL_TIM_PWM_Start+0x136>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a18      	ldr	r2, [pc, #96]	@ (80037ec <HAL_TIM_PWM_Start+0x188>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d004      	beq.n	800379a <HAL_TIM_PWM_Start+0x136>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a16      	ldr	r2, [pc, #88]	@ (80037f0 <HAL_TIM_PWM_Start+0x18c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d111      	bne.n	80037be <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2b06      	cmp	r3, #6
 80037aa:	d010      	beq.n	80037ce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037bc:	e007      	b.n	80037ce <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0201 	orr.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40010000 	.word	0x40010000
 80037dc:	40010400 	.word	0x40010400
 80037e0:	40000400 	.word	0x40000400
 80037e4:	40000800 	.word	0x40000800
 80037e8:	40000c00 	.word	0x40000c00
 80037ec:	40014000 	.word	0x40014000
 80037f0:	40001800 	.word	0x40001800

080037f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e041      	b.n	800388a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f839 	bl	8003892 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3304      	adds	r3, #4
 8003830:	4619      	mov	r1, r3
 8003832:	4610      	mov	r0, r2
 8003834:	f000 fe68 	bl	8004508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
	...

080038a8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d104      	bne.n	80038c6 <HAL_TIM_IC_Start_IT+0x1e>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	e013      	b.n	80038ee <HAL_TIM_IC_Start_IT+0x46>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d104      	bne.n	80038d6 <HAL_TIM_IC_Start_IT+0x2e>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	e00b      	b.n	80038ee <HAL_TIM_IC_Start_IT+0x46>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d104      	bne.n	80038e6 <HAL_TIM_IC_Start_IT+0x3e>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	e003      	b.n	80038ee <HAL_TIM_IC_Start_IT+0x46>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d104      	bne.n	8003900 <HAL_TIM_IC_Start_IT+0x58>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e013      	b.n	8003928 <HAL_TIM_IC_Start_IT+0x80>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b04      	cmp	r3, #4
 8003904:	d104      	bne.n	8003910 <HAL_TIM_IC_Start_IT+0x68>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800390c:	b2db      	uxtb	r3, r3
 800390e:	e00b      	b.n	8003928 <HAL_TIM_IC_Start_IT+0x80>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2b08      	cmp	r3, #8
 8003914:	d104      	bne.n	8003920 <HAL_TIM_IC_Start_IT+0x78>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800391c:	b2db      	uxtb	r3, r3
 800391e:	e003      	b.n	8003928 <HAL_TIM_IC_Start_IT+0x80>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003926:	b2db      	uxtb	r3, r3
 8003928:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800392a:	7bbb      	ldrb	r3, [r7, #14]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d102      	bne.n	8003936 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003930:	7b7b      	ldrb	r3, [r7, #13]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d001      	beq.n	800393a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e0cc      	b.n	8003ad4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d104      	bne.n	800394a <HAL_TIM_IC_Start_IT+0xa2>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003948:	e013      	b.n	8003972 <HAL_TIM_IC_Start_IT+0xca>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b04      	cmp	r3, #4
 800394e:	d104      	bne.n	800395a <HAL_TIM_IC_Start_IT+0xb2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003958:	e00b      	b.n	8003972 <HAL_TIM_IC_Start_IT+0xca>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b08      	cmp	r3, #8
 800395e:	d104      	bne.n	800396a <HAL_TIM_IC_Start_IT+0xc2>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003968:	e003      	b.n	8003972 <HAL_TIM_IC_Start_IT+0xca>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2202      	movs	r2, #2
 800396e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d104      	bne.n	8003982 <HAL_TIM_IC_Start_IT+0xda>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003980:	e013      	b.n	80039aa <HAL_TIM_IC_Start_IT+0x102>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b04      	cmp	r3, #4
 8003986:	d104      	bne.n	8003992 <HAL_TIM_IC_Start_IT+0xea>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003990:	e00b      	b.n	80039aa <HAL_TIM_IC_Start_IT+0x102>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d104      	bne.n	80039a2 <HAL_TIM_IC_Start_IT+0xfa>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039a0:	e003      	b.n	80039aa <HAL_TIM_IC_Start_IT+0x102>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2202      	movs	r2, #2
 80039a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b0c      	cmp	r3, #12
 80039ae:	d841      	bhi.n	8003a34 <HAL_TIM_IC_Start_IT+0x18c>
 80039b0:	a201      	add	r2, pc, #4	@ (adr r2, 80039b8 <HAL_TIM_IC_Start_IT+0x110>)
 80039b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b6:	bf00      	nop
 80039b8:	080039ed 	.word	0x080039ed
 80039bc:	08003a35 	.word	0x08003a35
 80039c0:	08003a35 	.word	0x08003a35
 80039c4:	08003a35 	.word	0x08003a35
 80039c8:	080039ff 	.word	0x080039ff
 80039cc:	08003a35 	.word	0x08003a35
 80039d0:	08003a35 	.word	0x08003a35
 80039d4:	08003a35 	.word	0x08003a35
 80039d8:	08003a11 	.word	0x08003a11
 80039dc:	08003a35 	.word	0x08003a35
 80039e0:	08003a35 	.word	0x08003a35
 80039e4:	08003a35 	.word	0x08003a35
 80039e8:	08003a23 	.word	0x08003a23
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0202 	orr.w	r2, r2, #2
 80039fa:	60da      	str	r2, [r3, #12]
      break;
 80039fc:	e01d      	b.n	8003a3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0204 	orr.w	r2, r2, #4
 8003a0c:	60da      	str	r2, [r3, #12]
      break;
 8003a0e:	e014      	b.n	8003a3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0208 	orr.w	r2, r2, #8
 8003a1e:	60da      	str	r2, [r3, #12]
      break;
 8003a20:	e00b      	b.n	8003a3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0210 	orr.w	r2, r2, #16
 8003a30:	60da      	str	r2, [r3, #12]
      break;
 8003a32:	e002      	b.n	8003a3a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
      break;
 8003a38:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d148      	bne.n	8003ad2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2201      	movs	r2, #1
 8003a46:	6839      	ldr	r1, [r7, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f001 f977 	bl	8004d3c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a22      	ldr	r2, [pc, #136]	@ (8003adc <HAL_TIM_IC_Start_IT+0x234>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d022      	beq.n	8003a9e <HAL_TIM_IC_Start_IT+0x1f6>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a60:	d01d      	beq.n	8003a9e <HAL_TIM_IC_Start_IT+0x1f6>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a1e      	ldr	r2, [pc, #120]	@ (8003ae0 <HAL_TIM_IC_Start_IT+0x238>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d018      	beq.n	8003a9e <HAL_TIM_IC_Start_IT+0x1f6>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1c      	ldr	r2, [pc, #112]	@ (8003ae4 <HAL_TIM_IC_Start_IT+0x23c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d013      	beq.n	8003a9e <HAL_TIM_IC_Start_IT+0x1f6>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ae8 <HAL_TIM_IC_Start_IT+0x240>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00e      	beq.n	8003a9e <HAL_TIM_IC_Start_IT+0x1f6>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a19      	ldr	r2, [pc, #100]	@ (8003aec <HAL_TIM_IC_Start_IT+0x244>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d009      	beq.n	8003a9e <HAL_TIM_IC_Start_IT+0x1f6>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a18      	ldr	r2, [pc, #96]	@ (8003af0 <HAL_TIM_IC_Start_IT+0x248>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d004      	beq.n	8003a9e <HAL_TIM_IC_Start_IT+0x1f6>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a16      	ldr	r2, [pc, #88]	@ (8003af4 <HAL_TIM_IC_Start_IT+0x24c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d111      	bne.n	8003ac2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2b06      	cmp	r3, #6
 8003aae:	d010      	beq.n	8003ad2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac0:	e007      	b.n	8003ad2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f042 0201 	orr.w	r2, r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40010000 	.word	0x40010000
 8003ae0:	40000400 	.word	0x40000400
 8003ae4:	40000800 	.word	0x40000800
 8003ae8:	40000c00 	.word	0x40000c00
 8003aec:	40010400 	.word	0x40010400
 8003af0:	40014000 	.word	0x40014000
 8003af4:	40001800 	.word	0x40001800

08003af8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e097      	b.n	8003c3c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d106      	bne.n	8003b26 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7fd ff27 	bl	8001974 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b3c:	f023 0307 	bic.w	r3, r3, #7
 8003b40:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	f000 fcdb 	bl	8004508 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b7a:	f023 0303 	bic.w	r3, r3, #3
 8003b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	021b      	lsls	r3, r3, #8
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003b98:	f023 030c 	bic.w	r3, r3, #12
 8003b9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ba4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	011a      	lsls	r2, r3, #4
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	031b      	lsls	r3, r3, #12
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003bd6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003bde:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	4313      	orrs	r3, r2
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c54:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c5c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c64:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003c6c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d110      	bne.n	8003c96 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d102      	bne.n	8003c80 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c7a:	7b7b      	ldrb	r3, [r7, #13]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d001      	beq.n	8003c84 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e069      	b.n	8003d58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c94:	e031      	b.n	8003cfa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d110      	bne.n	8003cbe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c9c:	7bbb      	ldrb	r3, [r7, #14]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d102      	bne.n	8003ca8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ca2:	7b3b      	ldrb	r3, [r7, #12]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d001      	beq.n	8003cac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e055      	b.n	8003d58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cbc:	e01d      	b.n	8003cfa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d108      	bne.n	8003cd6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cc4:	7bbb      	ldrb	r3, [r7, #14]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d105      	bne.n	8003cd6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003cca:	7b7b      	ldrb	r3, [r7, #13]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d102      	bne.n	8003cd6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003cd0:	7b3b      	ldrb	r3, [r7, #12]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d001      	beq.n	8003cda <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e03e      	b.n	8003d58 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2202      	movs	r2, #2
 8003cde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2202      	movs	r2, #2
 8003cee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_TIM_Encoder_Start+0xc4>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d008      	beq.n	8003d18 <HAL_TIM_Encoder_Start+0xd4>
 8003d06:	e00f      	b.n	8003d28 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	2100      	movs	r1, #0
 8003d10:	4618      	mov	r0, r3
 8003d12:	f001 f813 	bl	8004d3c <TIM_CCxChannelCmd>
      break;
 8003d16:	e016      	b.n	8003d46 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	2104      	movs	r1, #4
 8003d20:	4618      	mov	r0, r3
 8003d22:	f001 f80b 	bl	8004d3c <TIM_CCxChannelCmd>
      break;
 8003d26:	e00e      	b.n	8003d46 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	f001 f803 	bl	8004d3c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	2104      	movs	r1, #4
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fffc 	bl	8004d3c <TIM_CCxChannelCmd>
      break;
 8003d44:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d020      	beq.n	8003dc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d01b      	beq.n	8003dc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f06f 0202 	mvn.w	r2, #2
 8003d94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fd fc5a 	bl	8001664 <HAL_TIM_IC_CaptureCallback>
 8003db0:	e005      	b.n	8003dbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fd fcf6 	bl	80017a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 fb91 	bl	80044e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d020      	beq.n	8003e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01b      	beq.n	8003e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0204 	mvn.w	r2, #4
 8003de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2202      	movs	r2, #2
 8003de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fd fc34 	bl	8001664 <HAL_TIM_IC_CaptureCallback>
 8003dfc:	e005      	b.n	8003e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fd fcd0 	bl	80017a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 fb6b 	bl	80044e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d020      	beq.n	8003e5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d01b      	beq.n	8003e5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f06f 0208 	mvn.w	r2, #8
 8003e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2204      	movs	r2, #4
 8003e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7fd fc0e 	bl	8001664 <HAL_TIM_IC_CaptureCallback>
 8003e48:	e005      	b.n	8003e56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fd fcaa 	bl	80017a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 fb45 	bl	80044e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d020      	beq.n	8003ea8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f003 0310 	and.w	r3, r3, #16
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d01b      	beq.n	8003ea8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f06f 0210 	mvn.w	r2, #16
 8003e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2208      	movs	r2, #8
 8003e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7fd fbe8 	bl	8001664 <HAL_TIM_IC_CaptureCallback>
 8003e94:	e005      	b.n	8003ea2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fd fc84 	bl	80017a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fb1f 	bl	80044e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00c      	beq.n	8003ecc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d007      	beq.n	8003ecc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f06f 0201 	mvn.w	r2, #1
 8003ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fb00 	bl	80044cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00c      	beq.n	8003ef0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d007      	beq.n	8003ef0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f001 f824 	bl	8004f38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00c      	beq.n	8003f14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 faf0 	bl	80044f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00c      	beq.n	8003f38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d007      	beq.n	8003f38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f06f 0220 	mvn.w	r2, #32
 8003f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fff6 	bl	8004f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f38:	bf00      	nop
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <HAL_TIM_OC_ConfigChannel+0x1e>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e048      	b.n	8003ff0 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b0c      	cmp	r3, #12
 8003f6a:	d839      	bhi.n	8003fe0 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f74 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f72:	bf00      	nop
 8003f74:	08003fa9 	.word	0x08003fa9
 8003f78:	08003fe1 	.word	0x08003fe1
 8003f7c:	08003fe1 	.word	0x08003fe1
 8003f80:	08003fe1 	.word	0x08003fe1
 8003f84:	08003fb7 	.word	0x08003fb7
 8003f88:	08003fe1 	.word	0x08003fe1
 8003f8c:	08003fe1 	.word	0x08003fe1
 8003f90:	08003fe1 	.word	0x08003fe1
 8003f94:	08003fc5 	.word	0x08003fc5
 8003f98:	08003fe1 	.word	0x08003fe1
 8003f9c:	08003fe1 	.word	0x08003fe1
 8003fa0:	08003fe1 	.word	0x08003fe1
 8003fa4:	08003fd3 	.word	0x08003fd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fb50 	bl	8004654 <TIM_OC1_SetConfig>
      break;
 8003fb4:	e017      	b.n	8003fe6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68b9      	ldr	r1, [r7, #8]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fbb9 	bl	8004734 <TIM_OC2_SetConfig>
      break;
 8003fc2:	e010      	b.n	8003fe6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fc28 	bl	8004820 <TIM_OC3_SetConfig>
      break;
 8003fd0:	e009      	b.n	8003fe6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68b9      	ldr	r1, [r7, #8]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 fc95 	bl	8004908 <TIM_OC4_SetConfig>
      break;
 8003fde:	e002      	b.n	8003fe6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004012:	2302      	movs	r3, #2
 8004014:	e088      	b.n	8004128 <HAL_TIM_IC_ConfigChannel+0x130>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d11b      	bne.n	800405c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004034:	f000 fcbe 	bl	80049b4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699a      	ldr	r2, [r3, #24]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 020c 	bic.w	r2, r2, #12
 8004046:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6999      	ldr	r1, [r3, #24]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	619a      	str	r2, [r3, #24]
 800405a:	e060      	b.n	800411e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b04      	cmp	r3, #4
 8004060:	d11c      	bne.n	800409c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004072:	f000 fd42 	bl	8004afa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699a      	ldr	r2, [r3, #24]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004084:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6999      	ldr	r1, [r3, #24]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	021a      	lsls	r2, r3, #8
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	619a      	str	r2, [r3, #24]
 800409a:	e040      	b.n	800411e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d11b      	bne.n	80040da <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80040b2:	f000 fd8f 	bl	8004bd4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69da      	ldr	r2, [r3, #28]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 020c 	bic.w	r2, r2, #12
 80040c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	69d9      	ldr	r1, [r3, #28]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	61da      	str	r2, [r3, #28]
 80040d8:	e021      	b.n	800411e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b0c      	cmp	r3, #12
 80040de:	d11c      	bne.n	800411a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80040f0:	f000 fdac 	bl	8004c4c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69da      	ldr	r2, [r3, #28]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004102:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	69d9      	ldr	r1, [r3, #28]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	021a      	lsls	r2, r3, #8
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	61da      	str	r2, [r3, #28]
 8004118:	e001      	b.n	800411e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004126:	7dfb      	ldrb	r3, [r7, #23]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800414a:	2302      	movs	r3, #2
 800414c:	e0ae      	b.n	80042ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b0c      	cmp	r3, #12
 800415a:	f200 809f 	bhi.w	800429c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800415e:	a201      	add	r2, pc, #4	@ (adr r2, 8004164 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004164:	08004199 	.word	0x08004199
 8004168:	0800429d 	.word	0x0800429d
 800416c:	0800429d 	.word	0x0800429d
 8004170:	0800429d 	.word	0x0800429d
 8004174:	080041d9 	.word	0x080041d9
 8004178:	0800429d 	.word	0x0800429d
 800417c:	0800429d 	.word	0x0800429d
 8004180:	0800429d 	.word	0x0800429d
 8004184:	0800421b 	.word	0x0800421b
 8004188:	0800429d 	.word	0x0800429d
 800418c:	0800429d 	.word	0x0800429d
 8004190:	0800429d 	.word	0x0800429d
 8004194:	0800425b 	.word	0x0800425b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fa58 	bl	8004654 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0208 	orr.w	r2, r2, #8
 80041b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0204 	bic.w	r2, r2, #4
 80041c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6999      	ldr	r1, [r3, #24]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	691a      	ldr	r2, [r3, #16]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	619a      	str	r2, [r3, #24]
      break;
 80041d6:	e064      	b.n	80042a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 faa8 	bl	8004734 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699a      	ldr	r2, [r3, #24]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6999      	ldr	r1, [r3, #24]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	021a      	lsls	r2, r3, #8
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	619a      	str	r2, [r3, #24]
      break;
 8004218:	e043      	b.n	80042a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fafd 	bl	8004820 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69da      	ldr	r2, [r3, #28]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f042 0208 	orr.w	r2, r2, #8
 8004234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69da      	ldr	r2, [r3, #28]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0204 	bic.w	r2, r2, #4
 8004244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69d9      	ldr	r1, [r3, #28]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	61da      	str	r2, [r3, #28]
      break;
 8004258:	e023      	b.n	80042a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68b9      	ldr	r1, [r7, #8]
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fb51 	bl	8004908 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69da      	ldr	r2, [r3, #28]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69d9      	ldr	r1, [r3, #28]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	021a      	lsls	r2, r3, #8
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	61da      	str	r2, [r3, #28]
      break;
 800429a:	e002      	b.n	80042a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	75fb      	strb	r3, [r7, #23]
      break;
 80042a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_TIM_ConfigClockSource+0x1c>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e0b4      	b.n	800443a <HAL_TIM_ConfigClockSource+0x186>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004308:	d03e      	beq.n	8004388 <HAL_TIM_ConfigClockSource+0xd4>
 800430a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800430e:	f200 8087 	bhi.w	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004316:	f000 8086 	beq.w	8004426 <HAL_TIM_ConfigClockSource+0x172>
 800431a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800431e:	d87f      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004320:	2b70      	cmp	r3, #112	@ 0x70
 8004322:	d01a      	beq.n	800435a <HAL_TIM_ConfigClockSource+0xa6>
 8004324:	2b70      	cmp	r3, #112	@ 0x70
 8004326:	d87b      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004328:	2b60      	cmp	r3, #96	@ 0x60
 800432a:	d050      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x11a>
 800432c:	2b60      	cmp	r3, #96	@ 0x60
 800432e:	d877      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004330:	2b50      	cmp	r3, #80	@ 0x50
 8004332:	d03c      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0xfa>
 8004334:	2b50      	cmp	r3, #80	@ 0x50
 8004336:	d873      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004338:	2b40      	cmp	r3, #64	@ 0x40
 800433a:	d058      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x13a>
 800433c:	2b40      	cmp	r3, #64	@ 0x40
 800433e:	d86f      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004340:	2b30      	cmp	r3, #48	@ 0x30
 8004342:	d064      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x15a>
 8004344:	2b30      	cmp	r3, #48	@ 0x30
 8004346:	d86b      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004348:	2b20      	cmp	r3, #32
 800434a:	d060      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x15a>
 800434c:	2b20      	cmp	r3, #32
 800434e:	d867      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d05c      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x15a>
 8004354:	2b10      	cmp	r3, #16
 8004356:	d05a      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x15a>
 8004358:	e062      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800436a:	f000 fcc7 	bl	8004cfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800437c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	609a      	str	r2, [r3, #8]
      break;
 8004386:	e04f      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004398:	f000 fcb0 	bl	8004cfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043aa:	609a      	str	r2, [r3, #8]
      break;
 80043ac:	e03c      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ba:	461a      	mov	r2, r3
 80043bc:	f000 fb6e 	bl	8004a9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2150      	movs	r1, #80	@ 0x50
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fc7d 	bl	8004cc6 <TIM_ITRx_SetConfig>
      break;
 80043cc:	e02c      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043da:	461a      	mov	r2, r3
 80043dc:	f000 fbca 	bl	8004b74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2160      	movs	r1, #96	@ 0x60
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fc6d 	bl	8004cc6 <TIM_ITRx_SetConfig>
      break;
 80043ec:	e01c      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043fa:	461a      	mov	r2, r3
 80043fc:	f000 fb4e 	bl	8004a9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2140      	movs	r1, #64	@ 0x40
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fc5d 	bl	8004cc6 <TIM_ITRx_SetConfig>
      break;
 800440c:	e00c      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4619      	mov	r1, r3
 8004418:	4610      	mov	r0, r2
 800441a:	f000 fc54 	bl	8004cc6 <TIM_ITRx_SetConfig>
      break;
 800441e:	e003      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	73fb      	strb	r3, [r7, #15]
      break;
 8004424:	e000      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004426:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004438:	7bfb      	ldrb	r3, [r7, #15]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b0c      	cmp	r3, #12
 8004456:	d831      	bhi.n	80044bc <HAL_TIM_ReadCapturedValue+0x78>
 8004458:	a201      	add	r2, pc, #4	@ (adr r2, 8004460 <HAL_TIM_ReadCapturedValue+0x1c>)
 800445a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445e:	bf00      	nop
 8004460:	08004495 	.word	0x08004495
 8004464:	080044bd 	.word	0x080044bd
 8004468:	080044bd 	.word	0x080044bd
 800446c:	080044bd 	.word	0x080044bd
 8004470:	0800449f 	.word	0x0800449f
 8004474:	080044bd 	.word	0x080044bd
 8004478:	080044bd 	.word	0x080044bd
 800447c:	080044bd 	.word	0x080044bd
 8004480:	080044a9 	.word	0x080044a9
 8004484:	080044bd 	.word	0x080044bd
 8004488:	080044bd 	.word	0x080044bd
 800448c:	080044bd 	.word	0x080044bd
 8004490:	080044b3 	.word	0x080044b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800449a:	60fb      	str	r3, [r7, #12]

      break;
 800449c:	e00f      	b.n	80044be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a4:	60fb      	str	r3, [r7, #12]

      break;
 80044a6:	e00a      	b.n	80044be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ae:	60fb      	str	r3, [r7, #12]

      break;
 80044b0:	e005      	b.n	80044be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b8:	60fb      	str	r3, [r7, #12]

      break;
 80044ba:	e000      	b.n	80044be <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80044bc:	bf00      	nop
  }

  return tmpreg;
 80044be:	68fb      	ldr	r3, [r7, #12]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a43      	ldr	r2, [pc, #268]	@ (8004628 <TIM_Base_SetConfig+0x120>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d013      	beq.n	8004548 <TIM_Base_SetConfig+0x40>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004526:	d00f      	beq.n	8004548 <TIM_Base_SetConfig+0x40>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a40      	ldr	r2, [pc, #256]	@ (800462c <TIM_Base_SetConfig+0x124>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d00b      	beq.n	8004548 <TIM_Base_SetConfig+0x40>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a3f      	ldr	r2, [pc, #252]	@ (8004630 <TIM_Base_SetConfig+0x128>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d007      	beq.n	8004548 <TIM_Base_SetConfig+0x40>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a3e      	ldr	r2, [pc, #248]	@ (8004634 <TIM_Base_SetConfig+0x12c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d003      	beq.n	8004548 <TIM_Base_SetConfig+0x40>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a3d      	ldr	r2, [pc, #244]	@ (8004638 <TIM_Base_SetConfig+0x130>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d108      	bne.n	800455a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800454e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a32      	ldr	r2, [pc, #200]	@ (8004628 <TIM_Base_SetConfig+0x120>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d02b      	beq.n	80045ba <TIM_Base_SetConfig+0xb2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004568:	d027      	beq.n	80045ba <TIM_Base_SetConfig+0xb2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a2f      	ldr	r2, [pc, #188]	@ (800462c <TIM_Base_SetConfig+0x124>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d023      	beq.n	80045ba <TIM_Base_SetConfig+0xb2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a2e      	ldr	r2, [pc, #184]	@ (8004630 <TIM_Base_SetConfig+0x128>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d01f      	beq.n	80045ba <TIM_Base_SetConfig+0xb2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a2d      	ldr	r2, [pc, #180]	@ (8004634 <TIM_Base_SetConfig+0x12c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d01b      	beq.n	80045ba <TIM_Base_SetConfig+0xb2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a2c      	ldr	r2, [pc, #176]	@ (8004638 <TIM_Base_SetConfig+0x130>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d017      	beq.n	80045ba <TIM_Base_SetConfig+0xb2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a2b      	ldr	r2, [pc, #172]	@ (800463c <TIM_Base_SetConfig+0x134>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d013      	beq.n	80045ba <TIM_Base_SetConfig+0xb2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a2a      	ldr	r2, [pc, #168]	@ (8004640 <TIM_Base_SetConfig+0x138>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d00f      	beq.n	80045ba <TIM_Base_SetConfig+0xb2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a29      	ldr	r2, [pc, #164]	@ (8004644 <TIM_Base_SetConfig+0x13c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00b      	beq.n	80045ba <TIM_Base_SetConfig+0xb2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a28      	ldr	r2, [pc, #160]	@ (8004648 <TIM_Base_SetConfig+0x140>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d007      	beq.n	80045ba <TIM_Base_SetConfig+0xb2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a27      	ldr	r2, [pc, #156]	@ (800464c <TIM_Base_SetConfig+0x144>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d003      	beq.n	80045ba <TIM_Base_SetConfig+0xb2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a26      	ldr	r2, [pc, #152]	@ (8004650 <TIM_Base_SetConfig+0x148>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d108      	bne.n	80045cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a0e      	ldr	r2, [pc, #56]	@ (8004628 <TIM_Base_SetConfig+0x120>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d003      	beq.n	80045fa <TIM_Base_SetConfig+0xf2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a10      	ldr	r2, [pc, #64]	@ (8004638 <TIM_Base_SetConfig+0x130>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d103      	bne.n	8004602 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f043 0204 	orr.w	r2, r3, #4
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	601a      	str	r2, [r3, #0]
}
 800461a:	bf00      	nop
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40010000 	.word	0x40010000
 800462c:	40000400 	.word	0x40000400
 8004630:	40000800 	.word	0x40000800
 8004634:	40000c00 	.word	0x40000c00
 8004638:	40010400 	.word	0x40010400
 800463c:	40014000 	.word	0x40014000
 8004640:	40014400 	.word	0x40014400
 8004644:	40014800 	.word	0x40014800
 8004648:	40001800 	.word	0x40001800
 800464c:	40001c00 	.word	0x40001c00
 8004650:	40002000 	.word	0x40002000

08004654 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004654:	b480      	push	{r7}
 8004656:	b087      	sub	sp, #28
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	f023 0201 	bic.w	r2, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 0303 	bic.w	r3, r3, #3
 800468a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f023 0302 	bic.w	r3, r3, #2
 800469c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a20      	ldr	r2, [pc, #128]	@ (800472c <TIM_OC1_SetConfig+0xd8>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d003      	beq.n	80046b8 <TIM_OC1_SetConfig+0x64>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a1f      	ldr	r2, [pc, #124]	@ (8004730 <TIM_OC1_SetConfig+0xdc>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d10c      	bne.n	80046d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f023 0308 	bic.w	r3, r3, #8
 80046be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f023 0304 	bic.w	r3, r3, #4
 80046d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a15      	ldr	r2, [pc, #84]	@ (800472c <TIM_OC1_SetConfig+0xd8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d003      	beq.n	80046e2 <TIM_OC1_SetConfig+0x8e>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a14      	ldr	r2, [pc, #80]	@ (8004730 <TIM_OC1_SetConfig+0xdc>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d111      	bne.n	8004706 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	621a      	str	r2, [r3, #32]
}
 8004720:	bf00      	nop
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	40010000 	.word	0x40010000
 8004730:	40010400 	.word	0x40010400

08004734 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	f023 0210 	bic.w	r2, r3, #16
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800476a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	021b      	lsls	r3, r3, #8
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f023 0320 	bic.w	r3, r3, #32
 800477e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a22      	ldr	r2, [pc, #136]	@ (8004818 <TIM_OC2_SetConfig+0xe4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d003      	beq.n	800479c <TIM_OC2_SetConfig+0x68>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a21      	ldr	r2, [pc, #132]	@ (800481c <TIM_OC2_SetConfig+0xe8>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d10d      	bne.n	80047b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a17      	ldr	r2, [pc, #92]	@ (8004818 <TIM_OC2_SetConfig+0xe4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d003      	beq.n	80047c8 <TIM_OC2_SetConfig+0x94>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a16      	ldr	r2, [pc, #88]	@ (800481c <TIM_OC2_SetConfig+0xe8>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d113      	bne.n	80047f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	621a      	str	r2, [r3, #32]
}
 800480a:	bf00      	nop
 800480c:	371c      	adds	r7, #28
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40010000 	.word	0x40010000
 800481c:	40010400 	.word	0x40010400

08004820 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800484e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0303 	bic.w	r3, r3, #3
 8004856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4313      	orrs	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	021b      	lsls	r3, r3, #8
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	4313      	orrs	r3, r2
 8004874:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a21      	ldr	r2, [pc, #132]	@ (8004900 <TIM_OC3_SetConfig+0xe0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d003      	beq.n	8004886 <TIM_OC3_SetConfig+0x66>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a20      	ldr	r2, [pc, #128]	@ (8004904 <TIM_OC3_SetConfig+0xe4>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d10d      	bne.n	80048a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800488c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a16      	ldr	r2, [pc, #88]	@ (8004900 <TIM_OC3_SetConfig+0xe0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d003      	beq.n	80048b2 <TIM_OC3_SetConfig+0x92>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a15      	ldr	r2, [pc, #84]	@ (8004904 <TIM_OC3_SetConfig+0xe4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d113      	bne.n	80048da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	621a      	str	r2, [r3, #32]
}
 80048f4:	bf00      	nop
 80048f6:	371c      	adds	r7, #28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	40010000 	.word	0x40010000
 8004904:	40010400 	.word	0x40010400

08004908 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800493e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	021b      	lsls	r3, r3, #8
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004952:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	031b      	lsls	r3, r3, #12
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a12      	ldr	r2, [pc, #72]	@ (80049ac <TIM_OC4_SetConfig+0xa4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d003      	beq.n	8004970 <TIM_OC4_SetConfig+0x68>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a11      	ldr	r2, [pc, #68]	@ (80049b0 <TIM_OC4_SetConfig+0xa8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d109      	bne.n	8004984 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004976:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	019b      	lsls	r3, r3, #6
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	621a      	str	r2, [r3, #32]
}
 800499e:	bf00      	nop
 80049a0:	371c      	adds	r7, #28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40010000 	.word	0x40010000
 80049b0:	40010400 	.word	0x40010400

080049b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	f023 0201 	bic.w	r2, r3, #1
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4a28      	ldr	r2, [pc, #160]	@ (8004a80 <TIM_TI1_SetConfig+0xcc>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d01b      	beq.n	8004a1a <TIM_TI1_SetConfig+0x66>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049e8:	d017      	beq.n	8004a1a <TIM_TI1_SetConfig+0x66>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4a25      	ldr	r2, [pc, #148]	@ (8004a84 <TIM_TI1_SetConfig+0xd0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d013      	beq.n	8004a1a <TIM_TI1_SetConfig+0x66>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4a24      	ldr	r2, [pc, #144]	@ (8004a88 <TIM_TI1_SetConfig+0xd4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d00f      	beq.n	8004a1a <TIM_TI1_SetConfig+0x66>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4a23      	ldr	r2, [pc, #140]	@ (8004a8c <TIM_TI1_SetConfig+0xd8>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00b      	beq.n	8004a1a <TIM_TI1_SetConfig+0x66>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4a22      	ldr	r2, [pc, #136]	@ (8004a90 <TIM_TI1_SetConfig+0xdc>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d007      	beq.n	8004a1a <TIM_TI1_SetConfig+0x66>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4a21      	ldr	r2, [pc, #132]	@ (8004a94 <TIM_TI1_SetConfig+0xe0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d003      	beq.n	8004a1a <TIM_TI1_SetConfig+0x66>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4a20      	ldr	r2, [pc, #128]	@ (8004a98 <TIM_TI1_SetConfig+0xe4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d101      	bne.n	8004a1e <TIM_TI1_SetConfig+0x6a>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <TIM_TI1_SetConfig+0x6c>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d008      	beq.n	8004a36 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f023 0303 	bic.w	r3, r3, #3
 8004a2a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	e003      	b.n	8004a3e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f043 0301 	orr.w	r3, r3, #1
 8004a3c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f023 030a 	bic.w	r3, r3, #10
 8004a58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f003 030a 	and.w	r3, r3, #10
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	621a      	str	r2, [r3, #32]
}
 8004a72:	bf00      	nop
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40010000 	.word	0x40010000
 8004a84:	40000400 	.word	0x40000400
 8004a88:	40000800 	.word	0x40000800
 8004a8c:	40000c00 	.word	0x40000c00
 8004a90:	40010400 	.word	0x40010400
 8004a94:	40014000 	.word	0x40014000
 8004a98:	40001800 	.word	0x40001800

08004a9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	f023 0201 	bic.w	r2, r3, #1
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f023 030a 	bic.w	r3, r3, #10
 8004ad8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	621a      	str	r2, [r3, #32]
}
 8004aee:	bf00      	nop
 8004af0:	371c      	adds	r7, #28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b087      	sub	sp, #28
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	60f8      	str	r0, [r7, #12]
 8004b02:	60b9      	str	r1, [r7, #8]
 8004b04:	607a      	str	r2, [r7, #4]
 8004b06:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f023 0210 	bic.w	r2, r3, #16
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	021b      	lsls	r3, r3, #8
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	031b      	lsls	r3, r3, #12
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b4c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	621a      	str	r2, [r3, #32]
}
 8004b68:	bf00      	nop
 8004b6a:	371c      	adds	r7, #28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b087      	sub	sp, #28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	f023 0210 	bic.w	r2, r3, #16
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	031b      	lsls	r3, r3, #12
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004bb0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	621a      	str	r2, [r3, #32]
}
 8004bc8:	bf00      	nop
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f023 0303 	bic.w	r3, r3, #3
 8004c00:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c10:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	011b      	lsls	r3, r3, #4
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004c24:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	021b      	lsls	r3, r3, #8
 8004c2a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	621a      	str	r2, [r3, #32]
}
 8004c40:	bf00      	nop
 8004c42:	371c      	adds	r7, #28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c78:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	021b      	lsls	r3, r3, #8
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c8a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	031b      	lsls	r3, r3, #12
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004c9e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	031b      	lsls	r3, r3, #12
 8004ca4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	621a      	str	r2, [r3, #32]
}
 8004cba:	bf00      	nop
 8004cbc:	371c      	adds	r7, #28
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b085      	sub	sp, #20
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f043 0307 	orr.w	r3, r3, #7
 8004ce8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	609a      	str	r2, [r3, #8]
}
 8004cf0:	bf00      	nop
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
 8004d08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	021a      	lsls	r2, r3, #8
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	609a      	str	r2, [r3, #8]
}
 8004d30:	bf00      	nop
 8004d32:	371c      	adds	r7, #28
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f003 031f 	and.w	r3, r3, #31
 8004d4e:	2201      	movs	r2, #1
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a1a      	ldr	r2, [r3, #32]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	401a      	ands	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a1a      	ldr	r2, [r3, #32]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f003 031f 	and.w	r3, r3, #31
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	fa01 f303 	lsl.w	r3, r1, r3
 8004d74:	431a      	orrs	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	621a      	str	r2, [r3, #32]
}
 8004d7a:	bf00      	nop
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
	...

08004d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d101      	bne.n	8004da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e05a      	b.n	8004e56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a21      	ldr	r2, [pc, #132]	@ (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d022      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dec:	d01d      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a1d      	ldr	r2, [pc, #116]	@ (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d018      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a1a      	ldr	r2, [pc, #104]	@ (8004e70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00e      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a18      	ldr	r2, [pc, #96]	@ (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d009      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a17      	ldr	r2, [pc, #92]	@ (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d004      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a15      	ldr	r2, [pc, #84]	@ (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d10c      	bne.n	8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40010000 	.word	0x40010000
 8004e68:	40000400 	.word	0x40000400
 8004e6c:	40000800 	.word	0x40000800
 8004e70:	40000c00 	.word	0x40000c00
 8004e74:	40010400 	.word	0x40010400
 8004e78:	40014000 	.word	0x40014000
 8004e7c:	40001800 	.word	0x40001800

08004e80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e03d      	b.n	8004f18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e042      	b.n	8004fe4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7fc fd88 	bl	8001a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2224      	movs	r2, #36	@ 0x24
 8004f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fdd3 	bl	8005b3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	695a      	ldr	r2, [r3, #20]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b08a      	sub	sp, #40	@ 0x28
 8004ff0:	af02      	add	r7, sp, #8
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	603b      	str	r3, [r7, #0]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b20      	cmp	r3, #32
 800500a:	d175      	bne.n	80050f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <HAL_UART_Transmit+0x2c>
 8005012:	88fb      	ldrh	r3, [r7, #6]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e06e      	b.n	80050fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2221      	movs	r2, #33	@ 0x21
 8005026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800502a:	f7fc fee7 	bl	8001dfc <HAL_GetTick>
 800502e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	88fa      	ldrh	r2, [r7, #6]
 8005034:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	88fa      	ldrh	r2, [r7, #6]
 800503a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005044:	d108      	bne.n	8005058 <HAL_UART_Transmit+0x6c>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d104      	bne.n	8005058 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800504e:	2300      	movs	r3, #0
 8005050:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	61bb      	str	r3, [r7, #24]
 8005056:	e003      	b.n	8005060 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800505c:	2300      	movs	r3, #0
 800505e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005060:	e02e      	b.n	80050c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2200      	movs	r2, #0
 800506a:	2180      	movs	r1, #128	@ 0x80
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 fb37 	bl	80056e0 <UART_WaitOnFlagUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d005      	beq.n	8005084 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e03a      	b.n	80050fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10b      	bne.n	80050a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005098:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	3302      	adds	r3, #2
 800509e:	61bb      	str	r3, [r7, #24]
 80050a0:	e007      	b.n	80050b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	781a      	ldrb	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	3301      	adds	r3, #1
 80050b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1cb      	bne.n	8005062 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2200      	movs	r2, #0
 80050d2:	2140      	movs	r1, #64	@ 0x40
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 fb03 	bl	80056e0 <UART_WaitOnFlagUntilTimeout>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e006      	b.n	80050fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	e000      	b.n	80050fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80050f8:	2302      	movs	r3, #2
  }
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3720      	adds	r7, #32
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b084      	sub	sp, #16
 8005106:	af00      	add	r7, sp, #0
 8005108:	60f8      	str	r0, [r7, #12]
 800510a:	60b9      	str	r1, [r7, #8]
 800510c:	4613      	mov	r3, r2
 800510e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b20      	cmp	r3, #32
 800511a:	d112      	bne.n	8005142 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <HAL_UART_Receive_IT+0x26>
 8005122:	88fb      	ldrh	r3, [r7, #6]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e00b      	b.n	8005144 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005132:	88fb      	ldrh	r3, [r7, #6]
 8005134:	461a      	mov	r2, r3
 8005136:	68b9      	ldr	r1, [r7, #8]
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 fb2a 	bl	8005792 <UART_Start_Receive_IT>
 800513e:	4603      	mov	r3, r0
 8005140:	e000      	b.n	8005144 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005142:	2302      	movs	r3, #2
  }
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b0ba      	sub	sp, #232	@ 0xe8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005172:	2300      	movs	r3, #0
 8005174:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005178:	2300      	movs	r3, #0
 800517a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800517e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800518a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10f      	bne.n	80051b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b00      	cmp	r3, #0
 800519c:	d009      	beq.n	80051b2 <HAL_UART_IRQHandler+0x66>
 800519e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051a2:	f003 0320 	and.w	r3, r3, #32
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fc07 	bl	80059be <UART_Receive_IT>
      return;
 80051b0:	e273      	b.n	800569a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 80de 	beq.w	8005378 <HAL_UART_IRQHandler+0x22c>
 80051bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d106      	bne.n	80051d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 80d1 	beq.w	8005378 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00b      	beq.n	80051fa <HAL_UART_IRQHandler+0xae>
 80051e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d005      	beq.n	80051fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f2:	f043 0201 	orr.w	r2, r3, #1
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00b      	beq.n	800521e <HAL_UART_IRQHandler+0xd2>
 8005206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d005      	beq.n	800521e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005216:	f043 0202 	orr.w	r2, r3, #2
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800521e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00b      	beq.n	8005242 <HAL_UART_IRQHandler+0xf6>
 800522a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d005      	beq.n	8005242 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800523a:	f043 0204 	orr.w	r2, r3, #4
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b00      	cmp	r3, #0
 800524c:	d011      	beq.n	8005272 <HAL_UART_IRQHandler+0x126>
 800524e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b00      	cmp	r3, #0
 8005258:	d105      	bne.n	8005266 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800525a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d005      	beq.n	8005272 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526a:	f043 0208 	orr.w	r2, r3, #8
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 820a 	beq.w	8005690 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800527c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b00      	cmp	r3, #0
 8005286:	d008      	beq.n	800529a <HAL_UART_IRQHandler+0x14e>
 8005288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 fb92 	bl	80059be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a4:	2b40      	cmp	r3, #64	@ 0x40
 80052a6:	bf0c      	ite	eq
 80052a8:	2301      	moveq	r3, #1
 80052aa:	2300      	movne	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d103      	bne.n	80052c6 <HAL_UART_IRQHandler+0x17a>
 80052be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d04f      	beq.n	8005366 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fa9d 	bl	8005806 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d6:	2b40      	cmp	r3, #64	@ 0x40
 80052d8:	d141      	bne.n	800535e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3314      	adds	r3, #20
 80052e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80052e8:	e853 3f00 	ldrex	r3, [r3]
 80052ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80052f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80052f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3314      	adds	r3, #20
 8005302:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005306:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800530a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005312:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005316:	e841 2300 	strex	r3, r2, [r1]
 800531a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800531e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1d9      	bne.n	80052da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d013      	beq.n	8005356 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005332:	4a8a      	ldr	r2, [pc, #552]	@ (800555c <HAL_UART_IRQHandler+0x410>)
 8005334:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533a:	4618      	mov	r0, r3
 800533c:	f7fc feeb 	bl	8002116 <HAL_DMA_Abort_IT>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d016      	beq.n	8005374 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800534a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005350:	4610      	mov	r0, r2
 8005352:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005354:	e00e      	b.n	8005374 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f9ac 	bl	80056b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800535c:	e00a      	b.n	8005374 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f9a8 	bl	80056b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005364:	e006      	b.n	8005374 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f9a4 	bl	80056b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005372:	e18d      	b.n	8005690 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005374:	bf00      	nop
    return;
 8005376:	e18b      	b.n	8005690 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537c:	2b01      	cmp	r3, #1
 800537e:	f040 8167 	bne.w	8005650 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005386:	f003 0310 	and.w	r3, r3, #16
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 8160 	beq.w	8005650 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005394:	f003 0310 	and.w	r3, r3, #16
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 8159 	beq.w	8005650 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800539e:	2300      	movs	r3, #0
 80053a0:	60bb      	str	r3, [r7, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	60bb      	str	r3, [r7, #8]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	60bb      	str	r3, [r7, #8]
 80053b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053be:	2b40      	cmp	r3, #64	@ 0x40
 80053c0:	f040 80ce 	bne.w	8005560 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 80a9 	beq.w	800552c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053e2:	429a      	cmp	r2, r3
 80053e4:	f080 80a2 	bcs.w	800552c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053fa:	f000 8088 	beq.w	800550e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	330c      	adds	r3, #12
 8005404:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800540c:	e853 3f00 	ldrex	r3, [r3]
 8005410:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005414:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005418:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800541c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	330c      	adds	r3, #12
 8005426:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800542a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800542e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005436:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005442:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1d9      	bne.n	80053fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3314      	adds	r3, #20
 8005450:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005452:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005454:	e853 3f00 	ldrex	r3, [r3]
 8005458:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800545a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800545c:	f023 0301 	bic.w	r3, r3, #1
 8005460:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3314      	adds	r3, #20
 800546a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800546e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005472:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005474:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005476:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005480:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1e1      	bne.n	800544a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3314      	adds	r3, #20
 800548c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005490:	e853 3f00 	ldrex	r3, [r3]
 8005494:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005496:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005498:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800549c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3314      	adds	r3, #20
 80054a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80054aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80054ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80054b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80054b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e3      	bne.n	8005486 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	330c      	adds	r3, #12
 80054d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054de:	f023 0310 	bic.w	r3, r3, #16
 80054e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	330c      	adds	r3, #12
 80054ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80054f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80054f2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054f8:	e841 2300 	strex	r3, r2, [r1]
 80054fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e3      	bne.n	80054cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005508:	4618      	mov	r0, r3
 800550a:	f7fc fd94 	bl	8002036 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2202      	movs	r2, #2
 8005512:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800551c:	b29b      	uxth	r3, r3
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	b29b      	uxth	r3, r3
 8005522:	4619      	mov	r1, r3
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f8cf 	bl	80056c8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800552a:	e0b3      	b.n	8005694 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005530:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005534:	429a      	cmp	r2, r3
 8005536:	f040 80ad 	bne.w	8005694 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005544:	f040 80a6 	bne.w	8005694 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005552:	4619      	mov	r1, r3
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 f8b7 	bl	80056c8 <HAL_UARTEx_RxEventCallback>
      return;
 800555a:	e09b      	b.n	8005694 <HAL_UART_IRQHandler+0x548>
 800555c:	080058cd 	.word	0x080058cd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005568:	b29b      	uxth	r3, r3
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005574:	b29b      	uxth	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 808e 	beq.w	8005698 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800557c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 8089 	beq.w	8005698 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	330c      	adds	r3, #12
 800558c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005590:	e853 3f00 	ldrex	r3, [r3]
 8005594:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005598:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800559c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	330c      	adds	r3, #12
 80055a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80055aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80055ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055b2:	e841 2300 	strex	r3, r2, [r1]
 80055b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1e3      	bne.n	8005586 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3314      	adds	r3, #20
 80055c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	e853 3f00 	ldrex	r3, [r3]
 80055cc:	623b      	str	r3, [r7, #32]
   return(result);
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	f023 0301 	bic.w	r3, r3, #1
 80055d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3314      	adds	r3, #20
 80055de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80055e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80055e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055ea:	e841 2300 	strex	r3, r2, [r1]
 80055ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1e3      	bne.n	80055be <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	330c      	adds	r3, #12
 800560a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	e853 3f00 	ldrex	r3, [r3]
 8005612:	60fb      	str	r3, [r7, #12]
   return(result);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f023 0310 	bic.w	r3, r3, #16
 800561a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	330c      	adds	r3, #12
 8005624:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005628:	61fa      	str	r2, [r7, #28]
 800562a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	69b9      	ldr	r1, [r7, #24]
 800562e:	69fa      	ldr	r2, [r7, #28]
 8005630:	e841 2300 	strex	r3, r2, [r1]
 8005634:	617b      	str	r3, [r7, #20]
   return(result);
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e3      	bne.n	8005604 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005642:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005646:	4619      	mov	r1, r3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f83d 	bl	80056c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800564e:	e023      	b.n	8005698 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005658:	2b00      	cmp	r3, #0
 800565a:	d009      	beq.n	8005670 <HAL_UART_IRQHandler+0x524>
 800565c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f940 	bl	80058ee <UART_Transmit_IT>
    return;
 800566e:	e014      	b.n	800569a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00e      	beq.n	800569a <HAL_UART_IRQHandler+0x54e>
 800567c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005684:	2b00      	cmp	r3, #0
 8005686:	d008      	beq.n	800569a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f980 	bl	800598e <UART_EndTransmit_IT>
    return;
 800568e:	e004      	b.n	800569a <HAL_UART_IRQHandler+0x54e>
    return;
 8005690:	bf00      	nop
 8005692:	e002      	b.n	800569a <HAL_UART_IRQHandler+0x54e>
      return;
 8005694:	bf00      	nop
 8005696:	e000      	b.n	800569a <HAL_UART_IRQHandler+0x54e>
      return;
 8005698:	bf00      	nop
  }
}
 800569a:	37e8      	adds	r7, #232	@ 0xe8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	460b      	mov	r3, r1
 80056d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	4613      	mov	r3, r2
 80056ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f0:	e03b      	b.n	800576a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056f8:	d037      	beq.n	800576a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056fa:	f7fc fb7f 	bl	8001dfc <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	6a3a      	ldr	r2, [r7, #32]
 8005706:	429a      	cmp	r2, r3
 8005708:	d302      	bcc.n	8005710 <UART_WaitOnFlagUntilTimeout+0x30>
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e03a      	b.n	800578a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f003 0304 	and.w	r3, r3, #4
 800571e:	2b00      	cmp	r3, #0
 8005720:	d023      	beq.n	800576a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b80      	cmp	r3, #128	@ 0x80
 8005726:	d020      	beq.n	800576a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2b40      	cmp	r3, #64	@ 0x40
 800572c:	d01d      	beq.n	800576a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	2b08      	cmp	r3, #8
 800573a:	d116      	bne.n	800576a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 f857 	bl	8005806 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2208      	movs	r2, #8
 800575c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e00f      	b.n	800578a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	4013      	ands	r3, r2
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	429a      	cmp	r2, r3
 8005778:	bf0c      	ite	eq
 800577a:	2301      	moveq	r3, #1
 800577c:	2300      	movne	r3, #0
 800577e:	b2db      	uxtb	r3, r3
 8005780:	461a      	mov	r2, r3
 8005782:	79fb      	ldrb	r3, [r7, #7]
 8005784:	429a      	cmp	r2, r3
 8005786:	d0b4      	beq.n	80056f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3718      	adds	r7, #24
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005792:	b480      	push	{r7}
 8005794:	b085      	sub	sp, #20
 8005796:	af00      	add	r7, sp, #0
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	60b9      	str	r1, [r7, #8]
 800579c:	4613      	mov	r3, r2
 800579e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	88fa      	ldrh	r2, [r7, #6]
 80057aa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	88fa      	ldrh	r2, [r7, #6]
 80057b0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2222      	movs	r2, #34	@ 0x22
 80057bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d007      	beq.n	80057d8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057d6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695a      	ldr	r2, [r3, #20]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0201 	orr.w	r2, r2, #1
 80057e6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0220 	orr.w	r2, r2, #32
 80057f6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005806:	b480      	push	{r7}
 8005808:	b095      	sub	sp, #84	@ 0x54
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	330c      	adds	r3, #12
 8005814:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800581e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005820:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005824:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	330c      	adds	r3, #12
 800582c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800582e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005830:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005832:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005834:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005836:	e841 2300 	strex	r3, r2, [r1]
 800583a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800583c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1e5      	bne.n	800580e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3314      	adds	r3, #20
 8005848:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	e853 3f00 	ldrex	r3, [r3]
 8005850:	61fb      	str	r3, [r7, #28]
   return(result);
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	f023 0301 	bic.w	r3, r3, #1
 8005858:	64bb      	str	r3, [r7, #72]	@ 0x48
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3314      	adds	r3, #20
 8005860:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005862:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005864:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005866:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005868:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800586a:	e841 2300 	strex	r3, r2, [r1]
 800586e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1e5      	bne.n	8005842 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587a:	2b01      	cmp	r3, #1
 800587c:	d119      	bne.n	80058b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	330c      	adds	r3, #12
 8005884:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	e853 3f00 	ldrex	r3, [r3]
 800588c:	60bb      	str	r3, [r7, #8]
   return(result);
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	f023 0310 	bic.w	r3, r3, #16
 8005894:	647b      	str	r3, [r7, #68]	@ 0x44
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	330c      	adds	r3, #12
 800589c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800589e:	61ba      	str	r2, [r7, #24]
 80058a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	6979      	ldr	r1, [r7, #20]
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	613b      	str	r3, [r7, #16]
   return(result);
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e5      	bne.n	800587e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80058c0:	bf00      	nop
 80058c2:	3754      	adds	r7, #84	@ 0x54
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f7ff fee7 	bl	80056b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058e6:	bf00      	nop
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b085      	sub	sp, #20
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b21      	cmp	r3, #33	@ 0x21
 8005900:	d13e      	bne.n	8005980 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800590a:	d114      	bne.n	8005936 <UART_Transmit_IT+0x48>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d110      	bne.n	8005936 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005928:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	1c9a      	adds	r2, r3, #2
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	621a      	str	r2, [r3, #32]
 8005934:	e008      	b.n	8005948 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	1c59      	adds	r1, r3, #1
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6211      	str	r1, [r2, #32]
 8005940:	781a      	ldrb	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800594c:	b29b      	uxth	r3, r3
 800594e:	3b01      	subs	r3, #1
 8005950:	b29b      	uxth	r3, r3
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	4619      	mov	r1, r3
 8005956:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10f      	bne.n	800597c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800596a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800597a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800597c:	2300      	movs	r3, #0
 800597e:	e000      	b.n	8005982 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005980:	2302      	movs	r3, #2
  }
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b082      	sub	sp, #8
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2220      	movs	r2, #32
 80059aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff fe76 	bl	80056a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b08c      	sub	sp, #48	@ 0x30
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80059c6:	2300      	movs	r3, #0
 80059c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b22      	cmp	r3, #34	@ 0x22
 80059d8:	f040 80aa 	bne.w	8005b30 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059e4:	d115      	bne.n	8005a12 <UART_Receive_IT+0x54>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d111      	bne.n	8005a12 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0a:	1c9a      	adds	r2, r3, #2
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a10:	e024      	b.n	8005a5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a20:	d007      	beq.n	8005a32 <UART_Receive_IT+0x74>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10a      	bne.n	8005a40 <UART_Receive_IT+0x82>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d106      	bne.n	8005a40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a3c:	701a      	strb	r2, [r3, #0]
 8005a3e:	e008      	b.n	8005a52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	3b01      	subs	r3, #1
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	4619      	mov	r1, r3
 8005a6a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d15d      	bne.n	8005b2c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0220 	bic.w	r2, r2, #32
 8005a7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695a      	ldr	r2, [r3, #20]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0201 	bic.w	r2, r2, #1
 8005a9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d135      	bne.n	8005b22 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	330c      	adds	r3, #12
 8005ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	e853 3f00 	ldrex	r3, [r3]
 8005aca:	613b      	str	r3, [r7, #16]
   return(result);
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f023 0310 	bic.w	r3, r3, #16
 8005ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	330c      	adds	r3, #12
 8005ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005adc:	623a      	str	r2, [r7, #32]
 8005ade:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae0:	69f9      	ldr	r1, [r7, #28]
 8005ae2:	6a3a      	ldr	r2, [r7, #32]
 8005ae4:	e841 2300 	strex	r3, r2, [r1]
 8005ae8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1e5      	bne.n	8005abc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0310 	and.w	r3, r3, #16
 8005afa:	2b10      	cmp	r3, #16
 8005afc:	d10a      	bne.n	8005b14 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005afe:	2300      	movs	r3, #0
 8005b00:	60fb      	str	r3, [r7, #12]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b18:	4619      	mov	r1, r3
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7ff fdd4 	bl	80056c8 <HAL_UARTEx_RxEventCallback>
 8005b20:	e002      	b.n	8005b28 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7fb fd46 	bl	80015b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	e002      	b.n	8005b32 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	e000      	b.n	8005b32 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005b30:	2302      	movs	r3, #2
  }
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3730      	adds	r7, #48	@ 0x30
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b40:	b0c0      	sub	sp, #256	@ 0x100
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b58:	68d9      	ldr	r1, [r3, #12]
 8005b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	ea40 0301 	orr.w	r3, r0, r1
 8005b64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	431a      	orrs	r2, r3
 8005b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005b94:	f021 010c 	bic.w	r1, r1, #12
 8005b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ba2:	430b      	orrs	r3, r1
 8005ba4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb6:	6999      	ldr	r1, [r3, #24]
 8005bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	ea40 0301 	orr.w	r3, r0, r1
 8005bc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	4b8f      	ldr	r3, [pc, #572]	@ (8005e08 <UART_SetConfig+0x2cc>)
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d005      	beq.n	8005bdc <UART_SetConfig+0xa0>
 8005bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	4b8d      	ldr	r3, [pc, #564]	@ (8005e0c <UART_SetConfig+0x2d0>)
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d104      	bne.n	8005be6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bdc:	f7fc fd8a 	bl	80026f4 <HAL_RCC_GetPCLK2Freq>
 8005be0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005be4:	e003      	b.n	8005bee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005be6:	f7fc fd71 	bl	80026cc <HAL_RCC_GetPCLK1Freq>
 8005bea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bf8:	f040 810c 	bne.w	8005e14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c00:	2200      	movs	r2, #0
 8005c02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c06:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c0e:	4622      	mov	r2, r4
 8005c10:	462b      	mov	r3, r5
 8005c12:	1891      	adds	r1, r2, r2
 8005c14:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c16:	415b      	adcs	r3, r3
 8005c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c1e:	4621      	mov	r1, r4
 8005c20:	eb12 0801 	adds.w	r8, r2, r1
 8005c24:	4629      	mov	r1, r5
 8005c26:	eb43 0901 	adc.w	r9, r3, r1
 8005c2a:	f04f 0200 	mov.w	r2, #0
 8005c2e:	f04f 0300 	mov.w	r3, #0
 8005c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c3e:	4690      	mov	r8, r2
 8005c40:	4699      	mov	r9, r3
 8005c42:	4623      	mov	r3, r4
 8005c44:	eb18 0303 	adds.w	r3, r8, r3
 8005c48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c4c:	462b      	mov	r3, r5
 8005c4e:	eb49 0303 	adc.w	r3, r9, r3
 8005c52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c62:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005c66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	18db      	adds	r3, r3, r3
 8005c6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c70:	4613      	mov	r3, r2
 8005c72:	eb42 0303 	adc.w	r3, r2, r3
 8005c76:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c80:	f7fa ff14 	bl	8000aac <__aeabi_uldivmod>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	4b61      	ldr	r3, [pc, #388]	@ (8005e10 <UART_SetConfig+0x2d4>)
 8005c8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c8e:	095b      	lsrs	r3, r3, #5
 8005c90:	011c      	lsls	r4, r3, #4
 8005c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c96:	2200      	movs	r2, #0
 8005c98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c9c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ca0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ca4:	4642      	mov	r2, r8
 8005ca6:	464b      	mov	r3, r9
 8005ca8:	1891      	adds	r1, r2, r2
 8005caa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005cac:	415b      	adcs	r3, r3
 8005cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005cb4:	4641      	mov	r1, r8
 8005cb6:	eb12 0a01 	adds.w	sl, r2, r1
 8005cba:	4649      	mov	r1, r9
 8005cbc:	eb43 0b01 	adc.w	fp, r3, r1
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	f04f 0300 	mov.w	r3, #0
 8005cc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ccc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cd4:	4692      	mov	sl, r2
 8005cd6:	469b      	mov	fp, r3
 8005cd8:	4643      	mov	r3, r8
 8005cda:	eb1a 0303 	adds.w	r3, sl, r3
 8005cde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ce2:	464b      	mov	r3, r9
 8005ce4:	eb4b 0303 	adc.w	r3, fp, r3
 8005ce8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cf8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005cfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d00:	460b      	mov	r3, r1
 8005d02:	18db      	adds	r3, r3, r3
 8005d04:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d06:	4613      	mov	r3, r2
 8005d08:	eb42 0303 	adc.w	r3, r2, r3
 8005d0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d16:	f7fa fec9 	bl	8000aac <__aeabi_uldivmod>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	4611      	mov	r1, r2
 8005d20:	4b3b      	ldr	r3, [pc, #236]	@ (8005e10 <UART_SetConfig+0x2d4>)
 8005d22:	fba3 2301 	umull	r2, r3, r3, r1
 8005d26:	095b      	lsrs	r3, r3, #5
 8005d28:	2264      	movs	r2, #100	@ 0x64
 8005d2a:	fb02 f303 	mul.w	r3, r2, r3
 8005d2e:	1acb      	subs	r3, r1, r3
 8005d30:	00db      	lsls	r3, r3, #3
 8005d32:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005d36:	4b36      	ldr	r3, [pc, #216]	@ (8005e10 <UART_SetConfig+0x2d4>)
 8005d38:	fba3 2302 	umull	r2, r3, r3, r2
 8005d3c:	095b      	lsrs	r3, r3, #5
 8005d3e:	005b      	lsls	r3, r3, #1
 8005d40:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005d44:	441c      	add	r4, r3
 8005d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d50:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005d54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005d58:	4642      	mov	r2, r8
 8005d5a:	464b      	mov	r3, r9
 8005d5c:	1891      	adds	r1, r2, r2
 8005d5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d60:	415b      	adcs	r3, r3
 8005d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005d68:	4641      	mov	r1, r8
 8005d6a:	1851      	adds	r1, r2, r1
 8005d6c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005d6e:	4649      	mov	r1, r9
 8005d70:	414b      	adcs	r3, r1
 8005d72:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d74:	f04f 0200 	mov.w	r2, #0
 8005d78:	f04f 0300 	mov.w	r3, #0
 8005d7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d80:	4659      	mov	r1, fp
 8005d82:	00cb      	lsls	r3, r1, #3
 8005d84:	4651      	mov	r1, sl
 8005d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d8a:	4651      	mov	r1, sl
 8005d8c:	00ca      	lsls	r2, r1, #3
 8005d8e:	4610      	mov	r0, r2
 8005d90:	4619      	mov	r1, r3
 8005d92:	4603      	mov	r3, r0
 8005d94:	4642      	mov	r2, r8
 8005d96:	189b      	adds	r3, r3, r2
 8005d98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d9c:	464b      	mov	r3, r9
 8005d9e:	460a      	mov	r2, r1
 8005da0:	eb42 0303 	adc.w	r3, r2, r3
 8005da4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005db4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005db8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	18db      	adds	r3, r3, r3
 8005dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	eb42 0303 	adc.w	r3, r2, r3
 8005dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005dce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005dd2:	f7fa fe6b 	bl	8000aac <__aeabi_uldivmod>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4b0d      	ldr	r3, [pc, #52]	@ (8005e10 <UART_SetConfig+0x2d4>)
 8005ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8005de0:	095b      	lsrs	r3, r3, #5
 8005de2:	2164      	movs	r1, #100	@ 0x64
 8005de4:	fb01 f303 	mul.w	r3, r1, r3
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	00db      	lsls	r3, r3, #3
 8005dec:	3332      	adds	r3, #50	@ 0x32
 8005dee:	4a08      	ldr	r2, [pc, #32]	@ (8005e10 <UART_SetConfig+0x2d4>)
 8005df0:	fba2 2303 	umull	r2, r3, r2, r3
 8005df4:	095b      	lsrs	r3, r3, #5
 8005df6:	f003 0207 	and.w	r2, r3, #7
 8005dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4422      	add	r2, r4
 8005e02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e04:	e106      	b.n	8006014 <UART_SetConfig+0x4d8>
 8005e06:	bf00      	nop
 8005e08:	40011000 	.word	0x40011000
 8005e0c:	40011400 	.word	0x40011400
 8005e10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e1e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e26:	4642      	mov	r2, r8
 8005e28:	464b      	mov	r3, r9
 8005e2a:	1891      	adds	r1, r2, r2
 8005e2c:	6239      	str	r1, [r7, #32]
 8005e2e:	415b      	adcs	r3, r3
 8005e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e36:	4641      	mov	r1, r8
 8005e38:	1854      	adds	r4, r2, r1
 8005e3a:	4649      	mov	r1, r9
 8005e3c:	eb43 0501 	adc.w	r5, r3, r1
 8005e40:	f04f 0200 	mov.w	r2, #0
 8005e44:	f04f 0300 	mov.w	r3, #0
 8005e48:	00eb      	lsls	r3, r5, #3
 8005e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e4e:	00e2      	lsls	r2, r4, #3
 8005e50:	4614      	mov	r4, r2
 8005e52:	461d      	mov	r5, r3
 8005e54:	4643      	mov	r3, r8
 8005e56:	18e3      	adds	r3, r4, r3
 8005e58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e5c:	464b      	mov	r3, r9
 8005e5e:	eb45 0303 	adc.w	r3, r5, r3
 8005e62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	f04f 0300 	mov.w	r3, #0
 8005e7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e82:	4629      	mov	r1, r5
 8005e84:	008b      	lsls	r3, r1, #2
 8005e86:	4621      	mov	r1, r4
 8005e88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	008a      	lsls	r2, r1, #2
 8005e90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005e94:	f7fa fe0a 	bl	8000aac <__aeabi_uldivmod>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4b60      	ldr	r3, [pc, #384]	@ (8006020 <UART_SetConfig+0x4e4>)
 8005e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005ea2:	095b      	lsrs	r3, r3, #5
 8005ea4:	011c      	lsls	r4, r3, #4
 8005ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005eb0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005eb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005eb8:	4642      	mov	r2, r8
 8005eba:	464b      	mov	r3, r9
 8005ebc:	1891      	adds	r1, r2, r2
 8005ebe:	61b9      	str	r1, [r7, #24]
 8005ec0:	415b      	adcs	r3, r3
 8005ec2:	61fb      	str	r3, [r7, #28]
 8005ec4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ec8:	4641      	mov	r1, r8
 8005eca:	1851      	adds	r1, r2, r1
 8005ecc:	6139      	str	r1, [r7, #16]
 8005ece:	4649      	mov	r1, r9
 8005ed0:	414b      	adcs	r3, r1
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	f04f 0300 	mov.w	r3, #0
 8005edc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ee0:	4659      	mov	r1, fp
 8005ee2:	00cb      	lsls	r3, r1, #3
 8005ee4:	4651      	mov	r1, sl
 8005ee6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eea:	4651      	mov	r1, sl
 8005eec:	00ca      	lsls	r2, r1, #3
 8005eee:	4610      	mov	r0, r2
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	4642      	mov	r2, r8
 8005ef6:	189b      	adds	r3, r3, r2
 8005ef8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005efc:	464b      	mov	r3, r9
 8005efe:	460a      	mov	r2, r1
 8005f00:	eb42 0303 	adc.w	r3, r2, r3
 8005f04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f14:	f04f 0200 	mov.w	r2, #0
 8005f18:	f04f 0300 	mov.w	r3, #0
 8005f1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f20:	4649      	mov	r1, r9
 8005f22:	008b      	lsls	r3, r1, #2
 8005f24:	4641      	mov	r1, r8
 8005f26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f2a:	4641      	mov	r1, r8
 8005f2c:	008a      	lsls	r2, r1, #2
 8005f2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005f32:	f7fa fdbb 	bl	8000aac <__aeabi_uldivmod>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	4b38      	ldr	r3, [pc, #224]	@ (8006020 <UART_SetConfig+0x4e4>)
 8005f3e:	fba3 2301 	umull	r2, r3, r3, r1
 8005f42:	095b      	lsrs	r3, r3, #5
 8005f44:	2264      	movs	r2, #100	@ 0x64
 8005f46:	fb02 f303 	mul.w	r3, r2, r3
 8005f4a:	1acb      	subs	r3, r1, r3
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	3332      	adds	r3, #50	@ 0x32
 8005f50:	4a33      	ldr	r2, [pc, #204]	@ (8006020 <UART_SetConfig+0x4e4>)
 8005f52:	fba2 2303 	umull	r2, r3, r2, r3
 8005f56:	095b      	lsrs	r3, r3, #5
 8005f58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f5c:	441c      	add	r4, r3
 8005f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f62:	2200      	movs	r2, #0
 8005f64:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f66:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005f6c:	4642      	mov	r2, r8
 8005f6e:	464b      	mov	r3, r9
 8005f70:	1891      	adds	r1, r2, r2
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	415b      	adcs	r3, r3
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f7c:	4641      	mov	r1, r8
 8005f7e:	1851      	adds	r1, r2, r1
 8005f80:	6039      	str	r1, [r7, #0]
 8005f82:	4649      	mov	r1, r9
 8005f84:	414b      	adcs	r3, r1
 8005f86:	607b      	str	r3, [r7, #4]
 8005f88:	f04f 0200 	mov.w	r2, #0
 8005f8c:	f04f 0300 	mov.w	r3, #0
 8005f90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f94:	4659      	mov	r1, fp
 8005f96:	00cb      	lsls	r3, r1, #3
 8005f98:	4651      	mov	r1, sl
 8005f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f9e:	4651      	mov	r1, sl
 8005fa0:	00ca      	lsls	r2, r1, #3
 8005fa2:	4610      	mov	r0, r2
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	4642      	mov	r2, r8
 8005faa:	189b      	adds	r3, r3, r2
 8005fac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fae:	464b      	mov	r3, r9
 8005fb0:	460a      	mov	r2, r1
 8005fb2:	eb42 0303 	adc.w	r3, r2, r3
 8005fb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005fc2:	667a      	str	r2, [r7, #100]	@ 0x64
 8005fc4:	f04f 0200 	mov.w	r2, #0
 8005fc8:	f04f 0300 	mov.w	r3, #0
 8005fcc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005fd0:	4649      	mov	r1, r9
 8005fd2:	008b      	lsls	r3, r1, #2
 8005fd4:	4641      	mov	r1, r8
 8005fd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fda:	4641      	mov	r1, r8
 8005fdc:	008a      	lsls	r2, r1, #2
 8005fde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005fe2:	f7fa fd63 	bl	8000aac <__aeabi_uldivmod>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4b0d      	ldr	r3, [pc, #52]	@ (8006020 <UART_SetConfig+0x4e4>)
 8005fec:	fba3 1302 	umull	r1, r3, r3, r2
 8005ff0:	095b      	lsrs	r3, r3, #5
 8005ff2:	2164      	movs	r1, #100	@ 0x64
 8005ff4:	fb01 f303 	mul.w	r3, r1, r3
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	3332      	adds	r3, #50	@ 0x32
 8005ffe:	4a08      	ldr	r2, [pc, #32]	@ (8006020 <UART_SetConfig+0x4e4>)
 8006000:	fba2 2303 	umull	r2, r3, r2, r3
 8006004:	095b      	lsrs	r3, r3, #5
 8006006:	f003 020f 	and.w	r2, r3, #15
 800600a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4422      	add	r2, r4
 8006012:	609a      	str	r2, [r3, #8]
}
 8006014:	bf00      	nop
 8006016:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800601a:	46bd      	mov	sp, r7
 800601c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006020:	51eb851f 	.word	0x51eb851f

08006024 <siprintf>:
 8006024:	b40e      	push	{r1, r2, r3}
 8006026:	b510      	push	{r4, lr}
 8006028:	b09d      	sub	sp, #116	@ 0x74
 800602a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800602c:	9002      	str	r0, [sp, #8]
 800602e:	9006      	str	r0, [sp, #24]
 8006030:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006034:	480a      	ldr	r0, [pc, #40]	@ (8006060 <siprintf+0x3c>)
 8006036:	9107      	str	r1, [sp, #28]
 8006038:	9104      	str	r1, [sp, #16]
 800603a:	490a      	ldr	r1, [pc, #40]	@ (8006064 <siprintf+0x40>)
 800603c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006040:	9105      	str	r1, [sp, #20]
 8006042:	2400      	movs	r4, #0
 8006044:	a902      	add	r1, sp, #8
 8006046:	6800      	ldr	r0, [r0, #0]
 8006048:	9301      	str	r3, [sp, #4]
 800604a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800604c:	f000 f994 	bl	8006378 <_svfiprintf_r>
 8006050:	9b02      	ldr	r3, [sp, #8]
 8006052:	701c      	strb	r4, [r3, #0]
 8006054:	b01d      	add	sp, #116	@ 0x74
 8006056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800605a:	b003      	add	sp, #12
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	20000020 	.word	0x20000020
 8006064:	ffff0208 	.word	0xffff0208

08006068 <memset>:
 8006068:	4402      	add	r2, r0
 800606a:	4603      	mov	r3, r0
 800606c:	4293      	cmp	r3, r2
 800606e:	d100      	bne.n	8006072 <memset+0xa>
 8006070:	4770      	bx	lr
 8006072:	f803 1b01 	strb.w	r1, [r3], #1
 8006076:	e7f9      	b.n	800606c <memset+0x4>

08006078 <__errno>:
 8006078:	4b01      	ldr	r3, [pc, #4]	@ (8006080 <__errno+0x8>)
 800607a:	6818      	ldr	r0, [r3, #0]
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	20000020 	.word	0x20000020

08006084 <__libc_init_array>:
 8006084:	b570      	push	{r4, r5, r6, lr}
 8006086:	4d0d      	ldr	r5, [pc, #52]	@ (80060bc <__libc_init_array+0x38>)
 8006088:	4c0d      	ldr	r4, [pc, #52]	@ (80060c0 <__libc_init_array+0x3c>)
 800608a:	1b64      	subs	r4, r4, r5
 800608c:	10a4      	asrs	r4, r4, #2
 800608e:	2600      	movs	r6, #0
 8006090:	42a6      	cmp	r6, r4
 8006092:	d109      	bne.n	80060a8 <__libc_init_array+0x24>
 8006094:	4d0b      	ldr	r5, [pc, #44]	@ (80060c4 <__libc_init_array+0x40>)
 8006096:	4c0c      	ldr	r4, [pc, #48]	@ (80060c8 <__libc_init_array+0x44>)
 8006098:	f000 fc64 	bl	8006964 <_init>
 800609c:	1b64      	subs	r4, r4, r5
 800609e:	10a4      	asrs	r4, r4, #2
 80060a0:	2600      	movs	r6, #0
 80060a2:	42a6      	cmp	r6, r4
 80060a4:	d105      	bne.n	80060b2 <__libc_init_array+0x2e>
 80060a6:	bd70      	pop	{r4, r5, r6, pc}
 80060a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ac:	4798      	blx	r3
 80060ae:	3601      	adds	r6, #1
 80060b0:	e7ee      	b.n	8006090 <__libc_init_array+0xc>
 80060b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060b6:	4798      	blx	r3
 80060b8:	3601      	adds	r6, #1
 80060ba:	e7f2      	b.n	80060a2 <__libc_init_array+0x1e>
 80060bc:	08006a48 	.word	0x08006a48
 80060c0:	08006a48 	.word	0x08006a48
 80060c4:	08006a48 	.word	0x08006a48
 80060c8:	08006a4c 	.word	0x08006a4c

080060cc <__retarget_lock_acquire_recursive>:
 80060cc:	4770      	bx	lr

080060ce <__retarget_lock_release_recursive>:
 80060ce:	4770      	bx	lr

080060d0 <_free_r>:
 80060d0:	b538      	push	{r3, r4, r5, lr}
 80060d2:	4605      	mov	r5, r0
 80060d4:	2900      	cmp	r1, #0
 80060d6:	d041      	beq.n	800615c <_free_r+0x8c>
 80060d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060dc:	1f0c      	subs	r4, r1, #4
 80060de:	2b00      	cmp	r3, #0
 80060e0:	bfb8      	it	lt
 80060e2:	18e4      	addlt	r4, r4, r3
 80060e4:	f000 f8e0 	bl	80062a8 <__malloc_lock>
 80060e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006160 <_free_r+0x90>)
 80060ea:	6813      	ldr	r3, [r2, #0]
 80060ec:	b933      	cbnz	r3, 80060fc <_free_r+0x2c>
 80060ee:	6063      	str	r3, [r4, #4]
 80060f0:	6014      	str	r4, [r2, #0]
 80060f2:	4628      	mov	r0, r5
 80060f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060f8:	f000 b8dc 	b.w	80062b4 <__malloc_unlock>
 80060fc:	42a3      	cmp	r3, r4
 80060fe:	d908      	bls.n	8006112 <_free_r+0x42>
 8006100:	6820      	ldr	r0, [r4, #0]
 8006102:	1821      	adds	r1, r4, r0
 8006104:	428b      	cmp	r3, r1
 8006106:	bf01      	itttt	eq
 8006108:	6819      	ldreq	r1, [r3, #0]
 800610a:	685b      	ldreq	r3, [r3, #4]
 800610c:	1809      	addeq	r1, r1, r0
 800610e:	6021      	streq	r1, [r4, #0]
 8006110:	e7ed      	b.n	80060ee <_free_r+0x1e>
 8006112:	461a      	mov	r2, r3
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	b10b      	cbz	r3, 800611c <_free_r+0x4c>
 8006118:	42a3      	cmp	r3, r4
 800611a:	d9fa      	bls.n	8006112 <_free_r+0x42>
 800611c:	6811      	ldr	r1, [r2, #0]
 800611e:	1850      	adds	r0, r2, r1
 8006120:	42a0      	cmp	r0, r4
 8006122:	d10b      	bne.n	800613c <_free_r+0x6c>
 8006124:	6820      	ldr	r0, [r4, #0]
 8006126:	4401      	add	r1, r0
 8006128:	1850      	adds	r0, r2, r1
 800612a:	4283      	cmp	r3, r0
 800612c:	6011      	str	r1, [r2, #0]
 800612e:	d1e0      	bne.n	80060f2 <_free_r+0x22>
 8006130:	6818      	ldr	r0, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	6053      	str	r3, [r2, #4]
 8006136:	4408      	add	r0, r1
 8006138:	6010      	str	r0, [r2, #0]
 800613a:	e7da      	b.n	80060f2 <_free_r+0x22>
 800613c:	d902      	bls.n	8006144 <_free_r+0x74>
 800613e:	230c      	movs	r3, #12
 8006140:	602b      	str	r3, [r5, #0]
 8006142:	e7d6      	b.n	80060f2 <_free_r+0x22>
 8006144:	6820      	ldr	r0, [r4, #0]
 8006146:	1821      	adds	r1, r4, r0
 8006148:	428b      	cmp	r3, r1
 800614a:	bf04      	itt	eq
 800614c:	6819      	ldreq	r1, [r3, #0]
 800614e:	685b      	ldreq	r3, [r3, #4]
 8006150:	6063      	str	r3, [r4, #4]
 8006152:	bf04      	itt	eq
 8006154:	1809      	addeq	r1, r1, r0
 8006156:	6021      	streq	r1, [r4, #0]
 8006158:	6054      	str	r4, [r2, #4]
 800615a:	e7ca      	b.n	80060f2 <_free_r+0x22>
 800615c:	bd38      	pop	{r3, r4, r5, pc}
 800615e:	bf00      	nop
 8006160:	200003dc 	.word	0x200003dc

08006164 <sbrk_aligned>:
 8006164:	b570      	push	{r4, r5, r6, lr}
 8006166:	4e0f      	ldr	r6, [pc, #60]	@ (80061a4 <sbrk_aligned+0x40>)
 8006168:	460c      	mov	r4, r1
 800616a:	6831      	ldr	r1, [r6, #0]
 800616c:	4605      	mov	r5, r0
 800616e:	b911      	cbnz	r1, 8006176 <sbrk_aligned+0x12>
 8006170:	f000 fba4 	bl	80068bc <_sbrk_r>
 8006174:	6030      	str	r0, [r6, #0]
 8006176:	4621      	mov	r1, r4
 8006178:	4628      	mov	r0, r5
 800617a:	f000 fb9f 	bl	80068bc <_sbrk_r>
 800617e:	1c43      	adds	r3, r0, #1
 8006180:	d103      	bne.n	800618a <sbrk_aligned+0x26>
 8006182:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006186:	4620      	mov	r0, r4
 8006188:	bd70      	pop	{r4, r5, r6, pc}
 800618a:	1cc4      	adds	r4, r0, #3
 800618c:	f024 0403 	bic.w	r4, r4, #3
 8006190:	42a0      	cmp	r0, r4
 8006192:	d0f8      	beq.n	8006186 <sbrk_aligned+0x22>
 8006194:	1a21      	subs	r1, r4, r0
 8006196:	4628      	mov	r0, r5
 8006198:	f000 fb90 	bl	80068bc <_sbrk_r>
 800619c:	3001      	adds	r0, #1
 800619e:	d1f2      	bne.n	8006186 <sbrk_aligned+0x22>
 80061a0:	e7ef      	b.n	8006182 <sbrk_aligned+0x1e>
 80061a2:	bf00      	nop
 80061a4:	200003d8 	.word	0x200003d8

080061a8 <_malloc_r>:
 80061a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061ac:	1ccd      	adds	r5, r1, #3
 80061ae:	f025 0503 	bic.w	r5, r5, #3
 80061b2:	3508      	adds	r5, #8
 80061b4:	2d0c      	cmp	r5, #12
 80061b6:	bf38      	it	cc
 80061b8:	250c      	movcc	r5, #12
 80061ba:	2d00      	cmp	r5, #0
 80061bc:	4606      	mov	r6, r0
 80061be:	db01      	blt.n	80061c4 <_malloc_r+0x1c>
 80061c0:	42a9      	cmp	r1, r5
 80061c2:	d904      	bls.n	80061ce <_malloc_r+0x26>
 80061c4:	230c      	movs	r3, #12
 80061c6:	6033      	str	r3, [r6, #0]
 80061c8:	2000      	movs	r0, #0
 80061ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80062a4 <_malloc_r+0xfc>
 80061d2:	f000 f869 	bl	80062a8 <__malloc_lock>
 80061d6:	f8d8 3000 	ldr.w	r3, [r8]
 80061da:	461c      	mov	r4, r3
 80061dc:	bb44      	cbnz	r4, 8006230 <_malloc_r+0x88>
 80061de:	4629      	mov	r1, r5
 80061e0:	4630      	mov	r0, r6
 80061e2:	f7ff ffbf 	bl	8006164 <sbrk_aligned>
 80061e6:	1c43      	adds	r3, r0, #1
 80061e8:	4604      	mov	r4, r0
 80061ea:	d158      	bne.n	800629e <_malloc_r+0xf6>
 80061ec:	f8d8 4000 	ldr.w	r4, [r8]
 80061f0:	4627      	mov	r7, r4
 80061f2:	2f00      	cmp	r7, #0
 80061f4:	d143      	bne.n	800627e <_malloc_r+0xd6>
 80061f6:	2c00      	cmp	r4, #0
 80061f8:	d04b      	beq.n	8006292 <_malloc_r+0xea>
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	4639      	mov	r1, r7
 80061fe:	4630      	mov	r0, r6
 8006200:	eb04 0903 	add.w	r9, r4, r3
 8006204:	f000 fb5a 	bl	80068bc <_sbrk_r>
 8006208:	4581      	cmp	r9, r0
 800620a:	d142      	bne.n	8006292 <_malloc_r+0xea>
 800620c:	6821      	ldr	r1, [r4, #0]
 800620e:	1a6d      	subs	r5, r5, r1
 8006210:	4629      	mov	r1, r5
 8006212:	4630      	mov	r0, r6
 8006214:	f7ff ffa6 	bl	8006164 <sbrk_aligned>
 8006218:	3001      	adds	r0, #1
 800621a:	d03a      	beq.n	8006292 <_malloc_r+0xea>
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	442b      	add	r3, r5
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	f8d8 3000 	ldr.w	r3, [r8]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	bb62      	cbnz	r2, 8006284 <_malloc_r+0xdc>
 800622a:	f8c8 7000 	str.w	r7, [r8]
 800622e:	e00f      	b.n	8006250 <_malloc_r+0xa8>
 8006230:	6822      	ldr	r2, [r4, #0]
 8006232:	1b52      	subs	r2, r2, r5
 8006234:	d420      	bmi.n	8006278 <_malloc_r+0xd0>
 8006236:	2a0b      	cmp	r2, #11
 8006238:	d917      	bls.n	800626a <_malloc_r+0xc2>
 800623a:	1961      	adds	r1, r4, r5
 800623c:	42a3      	cmp	r3, r4
 800623e:	6025      	str	r5, [r4, #0]
 8006240:	bf18      	it	ne
 8006242:	6059      	strne	r1, [r3, #4]
 8006244:	6863      	ldr	r3, [r4, #4]
 8006246:	bf08      	it	eq
 8006248:	f8c8 1000 	streq.w	r1, [r8]
 800624c:	5162      	str	r2, [r4, r5]
 800624e:	604b      	str	r3, [r1, #4]
 8006250:	4630      	mov	r0, r6
 8006252:	f000 f82f 	bl	80062b4 <__malloc_unlock>
 8006256:	f104 000b 	add.w	r0, r4, #11
 800625a:	1d23      	adds	r3, r4, #4
 800625c:	f020 0007 	bic.w	r0, r0, #7
 8006260:	1ac2      	subs	r2, r0, r3
 8006262:	bf1c      	itt	ne
 8006264:	1a1b      	subne	r3, r3, r0
 8006266:	50a3      	strne	r3, [r4, r2]
 8006268:	e7af      	b.n	80061ca <_malloc_r+0x22>
 800626a:	6862      	ldr	r2, [r4, #4]
 800626c:	42a3      	cmp	r3, r4
 800626e:	bf0c      	ite	eq
 8006270:	f8c8 2000 	streq.w	r2, [r8]
 8006274:	605a      	strne	r2, [r3, #4]
 8006276:	e7eb      	b.n	8006250 <_malloc_r+0xa8>
 8006278:	4623      	mov	r3, r4
 800627a:	6864      	ldr	r4, [r4, #4]
 800627c:	e7ae      	b.n	80061dc <_malloc_r+0x34>
 800627e:	463c      	mov	r4, r7
 8006280:	687f      	ldr	r7, [r7, #4]
 8006282:	e7b6      	b.n	80061f2 <_malloc_r+0x4a>
 8006284:	461a      	mov	r2, r3
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	42a3      	cmp	r3, r4
 800628a:	d1fb      	bne.n	8006284 <_malloc_r+0xdc>
 800628c:	2300      	movs	r3, #0
 800628e:	6053      	str	r3, [r2, #4]
 8006290:	e7de      	b.n	8006250 <_malloc_r+0xa8>
 8006292:	230c      	movs	r3, #12
 8006294:	6033      	str	r3, [r6, #0]
 8006296:	4630      	mov	r0, r6
 8006298:	f000 f80c 	bl	80062b4 <__malloc_unlock>
 800629c:	e794      	b.n	80061c8 <_malloc_r+0x20>
 800629e:	6005      	str	r5, [r0, #0]
 80062a0:	e7d6      	b.n	8006250 <_malloc_r+0xa8>
 80062a2:	bf00      	nop
 80062a4:	200003dc 	.word	0x200003dc

080062a8 <__malloc_lock>:
 80062a8:	4801      	ldr	r0, [pc, #4]	@ (80062b0 <__malloc_lock+0x8>)
 80062aa:	f7ff bf0f 	b.w	80060cc <__retarget_lock_acquire_recursive>
 80062ae:	bf00      	nop
 80062b0:	200003d4 	.word	0x200003d4

080062b4 <__malloc_unlock>:
 80062b4:	4801      	ldr	r0, [pc, #4]	@ (80062bc <__malloc_unlock+0x8>)
 80062b6:	f7ff bf0a 	b.w	80060ce <__retarget_lock_release_recursive>
 80062ba:	bf00      	nop
 80062bc:	200003d4 	.word	0x200003d4

080062c0 <__ssputs_r>:
 80062c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062c4:	688e      	ldr	r6, [r1, #8]
 80062c6:	461f      	mov	r7, r3
 80062c8:	42be      	cmp	r6, r7
 80062ca:	680b      	ldr	r3, [r1, #0]
 80062cc:	4682      	mov	sl, r0
 80062ce:	460c      	mov	r4, r1
 80062d0:	4690      	mov	r8, r2
 80062d2:	d82d      	bhi.n	8006330 <__ssputs_r+0x70>
 80062d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80062dc:	d026      	beq.n	800632c <__ssputs_r+0x6c>
 80062de:	6965      	ldr	r5, [r4, #20]
 80062e0:	6909      	ldr	r1, [r1, #16]
 80062e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062e6:	eba3 0901 	sub.w	r9, r3, r1
 80062ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062ee:	1c7b      	adds	r3, r7, #1
 80062f0:	444b      	add	r3, r9
 80062f2:	106d      	asrs	r5, r5, #1
 80062f4:	429d      	cmp	r5, r3
 80062f6:	bf38      	it	cc
 80062f8:	461d      	movcc	r5, r3
 80062fa:	0553      	lsls	r3, r2, #21
 80062fc:	d527      	bpl.n	800634e <__ssputs_r+0x8e>
 80062fe:	4629      	mov	r1, r5
 8006300:	f7ff ff52 	bl	80061a8 <_malloc_r>
 8006304:	4606      	mov	r6, r0
 8006306:	b360      	cbz	r0, 8006362 <__ssputs_r+0xa2>
 8006308:	6921      	ldr	r1, [r4, #16]
 800630a:	464a      	mov	r2, r9
 800630c:	f000 fae6 	bl	80068dc <memcpy>
 8006310:	89a3      	ldrh	r3, [r4, #12]
 8006312:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800631a:	81a3      	strh	r3, [r4, #12]
 800631c:	6126      	str	r6, [r4, #16]
 800631e:	6165      	str	r5, [r4, #20]
 8006320:	444e      	add	r6, r9
 8006322:	eba5 0509 	sub.w	r5, r5, r9
 8006326:	6026      	str	r6, [r4, #0]
 8006328:	60a5      	str	r5, [r4, #8]
 800632a:	463e      	mov	r6, r7
 800632c:	42be      	cmp	r6, r7
 800632e:	d900      	bls.n	8006332 <__ssputs_r+0x72>
 8006330:	463e      	mov	r6, r7
 8006332:	6820      	ldr	r0, [r4, #0]
 8006334:	4632      	mov	r2, r6
 8006336:	4641      	mov	r1, r8
 8006338:	f000 faa6 	bl	8006888 <memmove>
 800633c:	68a3      	ldr	r3, [r4, #8]
 800633e:	1b9b      	subs	r3, r3, r6
 8006340:	60a3      	str	r3, [r4, #8]
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	4433      	add	r3, r6
 8006346:	6023      	str	r3, [r4, #0]
 8006348:	2000      	movs	r0, #0
 800634a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800634e:	462a      	mov	r2, r5
 8006350:	f000 fad2 	bl	80068f8 <_realloc_r>
 8006354:	4606      	mov	r6, r0
 8006356:	2800      	cmp	r0, #0
 8006358:	d1e0      	bne.n	800631c <__ssputs_r+0x5c>
 800635a:	6921      	ldr	r1, [r4, #16]
 800635c:	4650      	mov	r0, sl
 800635e:	f7ff feb7 	bl	80060d0 <_free_r>
 8006362:	230c      	movs	r3, #12
 8006364:	f8ca 3000 	str.w	r3, [sl]
 8006368:	89a3      	ldrh	r3, [r4, #12]
 800636a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800636e:	81a3      	strh	r3, [r4, #12]
 8006370:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006374:	e7e9      	b.n	800634a <__ssputs_r+0x8a>
	...

08006378 <_svfiprintf_r>:
 8006378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637c:	4698      	mov	r8, r3
 800637e:	898b      	ldrh	r3, [r1, #12]
 8006380:	061b      	lsls	r3, r3, #24
 8006382:	b09d      	sub	sp, #116	@ 0x74
 8006384:	4607      	mov	r7, r0
 8006386:	460d      	mov	r5, r1
 8006388:	4614      	mov	r4, r2
 800638a:	d510      	bpl.n	80063ae <_svfiprintf_r+0x36>
 800638c:	690b      	ldr	r3, [r1, #16]
 800638e:	b973      	cbnz	r3, 80063ae <_svfiprintf_r+0x36>
 8006390:	2140      	movs	r1, #64	@ 0x40
 8006392:	f7ff ff09 	bl	80061a8 <_malloc_r>
 8006396:	6028      	str	r0, [r5, #0]
 8006398:	6128      	str	r0, [r5, #16]
 800639a:	b930      	cbnz	r0, 80063aa <_svfiprintf_r+0x32>
 800639c:	230c      	movs	r3, #12
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80063a4:	b01d      	add	sp, #116	@ 0x74
 80063a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063aa:	2340      	movs	r3, #64	@ 0x40
 80063ac:	616b      	str	r3, [r5, #20]
 80063ae:	2300      	movs	r3, #0
 80063b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80063b2:	2320      	movs	r3, #32
 80063b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80063b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80063bc:	2330      	movs	r3, #48	@ 0x30
 80063be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800655c <_svfiprintf_r+0x1e4>
 80063c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80063c6:	f04f 0901 	mov.w	r9, #1
 80063ca:	4623      	mov	r3, r4
 80063cc:	469a      	mov	sl, r3
 80063ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063d2:	b10a      	cbz	r2, 80063d8 <_svfiprintf_r+0x60>
 80063d4:	2a25      	cmp	r2, #37	@ 0x25
 80063d6:	d1f9      	bne.n	80063cc <_svfiprintf_r+0x54>
 80063d8:	ebba 0b04 	subs.w	fp, sl, r4
 80063dc:	d00b      	beq.n	80063f6 <_svfiprintf_r+0x7e>
 80063de:	465b      	mov	r3, fp
 80063e0:	4622      	mov	r2, r4
 80063e2:	4629      	mov	r1, r5
 80063e4:	4638      	mov	r0, r7
 80063e6:	f7ff ff6b 	bl	80062c0 <__ssputs_r>
 80063ea:	3001      	adds	r0, #1
 80063ec:	f000 80a7 	beq.w	800653e <_svfiprintf_r+0x1c6>
 80063f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063f2:	445a      	add	r2, fp
 80063f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80063f6:	f89a 3000 	ldrb.w	r3, [sl]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 809f 	beq.w	800653e <_svfiprintf_r+0x1c6>
 8006400:	2300      	movs	r3, #0
 8006402:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006406:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800640a:	f10a 0a01 	add.w	sl, sl, #1
 800640e:	9304      	str	r3, [sp, #16]
 8006410:	9307      	str	r3, [sp, #28]
 8006412:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006416:	931a      	str	r3, [sp, #104]	@ 0x68
 8006418:	4654      	mov	r4, sl
 800641a:	2205      	movs	r2, #5
 800641c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006420:	484e      	ldr	r0, [pc, #312]	@ (800655c <_svfiprintf_r+0x1e4>)
 8006422:	f7f9 fefd 	bl	8000220 <memchr>
 8006426:	9a04      	ldr	r2, [sp, #16]
 8006428:	b9d8      	cbnz	r0, 8006462 <_svfiprintf_r+0xea>
 800642a:	06d0      	lsls	r0, r2, #27
 800642c:	bf44      	itt	mi
 800642e:	2320      	movmi	r3, #32
 8006430:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006434:	0711      	lsls	r1, r2, #28
 8006436:	bf44      	itt	mi
 8006438:	232b      	movmi	r3, #43	@ 0x2b
 800643a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800643e:	f89a 3000 	ldrb.w	r3, [sl]
 8006442:	2b2a      	cmp	r3, #42	@ 0x2a
 8006444:	d015      	beq.n	8006472 <_svfiprintf_r+0xfa>
 8006446:	9a07      	ldr	r2, [sp, #28]
 8006448:	4654      	mov	r4, sl
 800644a:	2000      	movs	r0, #0
 800644c:	f04f 0c0a 	mov.w	ip, #10
 8006450:	4621      	mov	r1, r4
 8006452:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006456:	3b30      	subs	r3, #48	@ 0x30
 8006458:	2b09      	cmp	r3, #9
 800645a:	d94b      	bls.n	80064f4 <_svfiprintf_r+0x17c>
 800645c:	b1b0      	cbz	r0, 800648c <_svfiprintf_r+0x114>
 800645e:	9207      	str	r2, [sp, #28]
 8006460:	e014      	b.n	800648c <_svfiprintf_r+0x114>
 8006462:	eba0 0308 	sub.w	r3, r0, r8
 8006466:	fa09 f303 	lsl.w	r3, r9, r3
 800646a:	4313      	orrs	r3, r2
 800646c:	9304      	str	r3, [sp, #16]
 800646e:	46a2      	mov	sl, r4
 8006470:	e7d2      	b.n	8006418 <_svfiprintf_r+0xa0>
 8006472:	9b03      	ldr	r3, [sp, #12]
 8006474:	1d19      	adds	r1, r3, #4
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	9103      	str	r1, [sp, #12]
 800647a:	2b00      	cmp	r3, #0
 800647c:	bfbb      	ittet	lt
 800647e:	425b      	neglt	r3, r3
 8006480:	f042 0202 	orrlt.w	r2, r2, #2
 8006484:	9307      	strge	r3, [sp, #28]
 8006486:	9307      	strlt	r3, [sp, #28]
 8006488:	bfb8      	it	lt
 800648a:	9204      	strlt	r2, [sp, #16]
 800648c:	7823      	ldrb	r3, [r4, #0]
 800648e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006490:	d10a      	bne.n	80064a8 <_svfiprintf_r+0x130>
 8006492:	7863      	ldrb	r3, [r4, #1]
 8006494:	2b2a      	cmp	r3, #42	@ 0x2a
 8006496:	d132      	bne.n	80064fe <_svfiprintf_r+0x186>
 8006498:	9b03      	ldr	r3, [sp, #12]
 800649a:	1d1a      	adds	r2, r3, #4
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	9203      	str	r2, [sp, #12]
 80064a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80064a4:	3402      	adds	r4, #2
 80064a6:	9305      	str	r3, [sp, #20]
 80064a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800656c <_svfiprintf_r+0x1f4>
 80064ac:	7821      	ldrb	r1, [r4, #0]
 80064ae:	2203      	movs	r2, #3
 80064b0:	4650      	mov	r0, sl
 80064b2:	f7f9 feb5 	bl	8000220 <memchr>
 80064b6:	b138      	cbz	r0, 80064c8 <_svfiprintf_r+0x150>
 80064b8:	9b04      	ldr	r3, [sp, #16]
 80064ba:	eba0 000a 	sub.w	r0, r0, sl
 80064be:	2240      	movs	r2, #64	@ 0x40
 80064c0:	4082      	lsls	r2, r0
 80064c2:	4313      	orrs	r3, r2
 80064c4:	3401      	adds	r4, #1
 80064c6:	9304      	str	r3, [sp, #16]
 80064c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064cc:	4824      	ldr	r0, [pc, #144]	@ (8006560 <_svfiprintf_r+0x1e8>)
 80064ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80064d2:	2206      	movs	r2, #6
 80064d4:	f7f9 fea4 	bl	8000220 <memchr>
 80064d8:	2800      	cmp	r0, #0
 80064da:	d036      	beq.n	800654a <_svfiprintf_r+0x1d2>
 80064dc:	4b21      	ldr	r3, [pc, #132]	@ (8006564 <_svfiprintf_r+0x1ec>)
 80064de:	bb1b      	cbnz	r3, 8006528 <_svfiprintf_r+0x1b0>
 80064e0:	9b03      	ldr	r3, [sp, #12]
 80064e2:	3307      	adds	r3, #7
 80064e4:	f023 0307 	bic.w	r3, r3, #7
 80064e8:	3308      	adds	r3, #8
 80064ea:	9303      	str	r3, [sp, #12]
 80064ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064ee:	4433      	add	r3, r6
 80064f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80064f2:	e76a      	b.n	80063ca <_svfiprintf_r+0x52>
 80064f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80064f8:	460c      	mov	r4, r1
 80064fa:	2001      	movs	r0, #1
 80064fc:	e7a8      	b.n	8006450 <_svfiprintf_r+0xd8>
 80064fe:	2300      	movs	r3, #0
 8006500:	3401      	adds	r4, #1
 8006502:	9305      	str	r3, [sp, #20]
 8006504:	4619      	mov	r1, r3
 8006506:	f04f 0c0a 	mov.w	ip, #10
 800650a:	4620      	mov	r0, r4
 800650c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006510:	3a30      	subs	r2, #48	@ 0x30
 8006512:	2a09      	cmp	r2, #9
 8006514:	d903      	bls.n	800651e <_svfiprintf_r+0x1a6>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0c6      	beq.n	80064a8 <_svfiprintf_r+0x130>
 800651a:	9105      	str	r1, [sp, #20]
 800651c:	e7c4      	b.n	80064a8 <_svfiprintf_r+0x130>
 800651e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006522:	4604      	mov	r4, r0
 8006524:	2301      	movs	r3, #1
 8006526:	e7f0      	b.n	800650a <_svfiprintf_r+0x192>
 8006528:	ab03      	add	r3, sp, #12
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	462a      	mov	r2, r5
 800652e:	4b0e      	ldr	r3, [pc, #56]	@ (8006568 <_svfiprintf_r+0x1f0>)
 8006530:	a904      	add	r1, sp, #16
 8006532:	4638      	mov	r0, r7
 8006534:	f3af 8000 	nop.w
 8006538:	1c42      	adds	r2, r0, #1
 800653a:	4606      	mov	r6, r0
 800653c:	d1d6      	bne.n	80064ec <_svfiprintf_r+0x174>
 800653e:	89ab      	ldrh	r3, [r5, #12]
 8006540:	065b      	lsls	r3, r3, #25
 8006542:	f53f af2d 	bmi.w	80063a0 <_svfiprintf_r+0x28>
 8006546:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006548:	e72c      	b.n	80063a4 <_svfiprintf_r+0x2c>
 800654a:	ab03      	add	r3, sp, #12
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	462a      	mov	r2, r5
 8006550:	4b05      	ldr	r3, [pc, #20]	@ (8006568 <_svfiprintf_r+0x1f0>)
 8006552:	a904      	add	r1, sp, #16
 8006554:	4638      	mov	r0, r7
 8006556:	f000 f879 	bl	800664c <_printf_i>
 800655a:	e7ed      	b.n	8006538 <_svfiprintf_r+0x1c0>
 800655c:	08006a0c 	.word	0x08006a0c
 8006560:	08006a16 	.word	0x08006a16
 8006564:	00000000 	.word	0x00000000
 8006568:	080062c1 	.word	0x080062c1
 800656c:	08006a12 	.word	0x08006a12

08006570 <_printf_common>:
 8006570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006574:	4616      	mov	r6, r2
 8006576:	4698      	mov	r8, r3
 8006578:	688a      	ldr	r2, [r1, #8]
 800657a:	690b      	ldr	r3, [r1, #16]
 800657c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006580:	4293      	cmp	r3, r2
 8006582:	bfb8      	it	lt
 8006584:	4613      	movlt	r3, r2
 8006586:	6033      	str	r3, [r6, #0]
 8006588:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800658c:	4607      	mov	r7, r0
 800658e:	460c      	mov	r4, r1
 8006590:	b10a      	cbz	r2, 8006596 <_printf_common+0x26>
 8006592:	3301      	adds	r3, #1
 8006594:	6033      	str	r3, [r6, #0]
 8006596:	6823      	ldr	r3, [r4, #0]
 8006598:	0699      	lsls	r1, r3, #26
 800659a:	bf42      	ittt	mi
 800659c:	6833      	ldrmi	r3, [r6, #0]
 800659e:	3302      	addmi	r3, #2
 80065a0:	6033      	strmi	r3, [r6, #0]
 80065a2:	6825      	ldr	r5, [r4, #0]
 80065a4:	f015 0506 	ands.w	r5, r5, #6
 80065a8:	d106      	bne.n	80065b8 <_printf_common+0x48>
 80065aa:	f104 0a19 	add.w	sl, r4, #25
 80065ae:	68e3      	ldr	r3, [r4, #12]
 80065b0:	6832      	ldr	r2, [r6, #0]
 80065b2:	1a9b      	subs	r3, r3, r2
 80065b4:	42ab      	cmp	r3, r5
 80065b6:	dc26      	bgt.n	8006606 <_printf_common+0x96>
 80065b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80065bc:	6822      	ldr	r2, [r4, #0]
 80065be:	3b00      	subs	r3, #0
 80065c0:	bf18      	it	ne
 80065c2:	2301      	movne	r3, #1
 80065c4:	0692      	lsls	r2, r2, #26
 80065c6:	d42b      	bmi.n	8006620 <_printf_common+0xb0>
 80065c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80065cc:	4641      	mov	r1, r8
 80065ce:	4638      	mov	r0, r7
 80065d0:	47c8      	blx	r9
 80065d2:	3001      	adds	r0, #1
 80065d4:	d01e      	beq.n	8006614 <_printf_common+0xa4>
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	6922      	ldr	r2, [r4, #16]
 80065da:	f003 0306 	and.w	r3, r3, #6
 80065de:	2b04      	cmp	r3, #4
 80065e0:	bf02      	ittt	eq
 80065e2:	68e5      	ldreq	r5, [r4, #12]
 80065e4:	6833      	ldreq	r3, [r6, #0]
 80065e6:	1aed      	subeq	r5, r5, r3
 80065e8:	68a3      	ldr	r3, [r4, #8]
 80065ea:	bf0c      	ite	eq
 80065ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065f0:	2500      	movne	r5, #0
 80065f2:	4293      	cmp	r3, r2
 80065f4:	bfc4      	itt	gt
 80065f6:	1a9b      	subgt	r3, r3, r2
 80065f8:	18ed      	addgt	r5, r5, r3
 80065fa:	2600      	movs	r6, #0
 80065fc:	341a      	adds	r4, #26
 80065fe:	42b5      	cmp	r5, r6
 8006600:	d11a      	bne.n	8006638 <_printf_common+0xc8>
 8006602:	2000      	movs	r0, #0
 8006604:	e008      	b.n	8006618 <_printf_common+0xa8>
 8006606:	2301      	movs	r3, #1
 8006608:	4652      	mov	r2, sl
 800660a:	4641      	mov	r1, r8
 800660c:	4638      	mov	r0, r7
 800660e:	47c8      	blx	r9
 8006610:	3001      	adds	r0, #1
 8006612:	d103      	bne.n	800661c <_printf_common+0xac>
 8006614:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800661c:	3501      	adds	r5, #1
 800661e:	e7c6      	b.n	80065ae <_printf_common+0x3e>
 8006620:	18e1      	adds	r1, r4, r3
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	2030      	movs	r0, #48	@ 0x30
 8006626:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800662a:	4422      	add	r2, r4
 800662c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006630:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006634:	3302      	adds	r3, #2
 8006636:	e7c7      	b.n	80065c8 <_printf_common+0x58>
 8006638:	2301      	movs	r3, #1
 800663a:	4622      	mov	r2, r4
 800663c:	4641      	mov	r1, r8
 800663e:	4638      	mov	r0, r7
 8006640:	47c8      	blx	r9
 8006642:	3001      	adds	r0, #1
 8006644:	d0e6      	beq.n	8006614 <_printf_common+0xa4>
 8006646:	3601      	adds	r6, #1
 8006648:	e7d9      	b.n	80065fe <_printf_common+0x8e>
	...

0800664c <_printf_i>:
 800664c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006650:	7e0f      	ldrb	r7, [r1, #24]
 8006652:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006654:	2f78      	cmp	r7, #120	@ 0x78
 8006656:	4691      	mov	r9, r2
 8006658:	4680      	mov	r8, r0
 800665a:	460c      	mov	r4, r1
 800665c:	469a      	mov	sl, r3
 800665e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006662:	d807      	bhi.n	8006674 <_printf_i+0x28>
 8006664:	2f62      	cmp	r7, #98	@ 0x62
 8006666:	d80a      	bhi.n	800667e <_printf_i+0x32>
 8006668:	2f00      	cmp	r7, #0
 800666a:	f000 80d1 	beq.w	8006810 <_printf_i+0x1c4>
 800666e:	2f58      	cmp	r7, #88	@ 0x58
 8006670:	f000 80b8 	beq.w	80067e4 <_printf_i+0x198>
 8006674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006678:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800667c:	e03a      	b.n	80066f4 <_printf_i+0xa8>
 800667e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006682:	2b15      	cmp	r3, #21
 8006684:	d8f6      	bhi.n	8006674 <_printf_i+0x28>
 8006686:	a101      	add	r1, pc, #4	@ (adr r1, 800668c <_printf_i+0x40>)
 8006688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800668c:	080066e5 	.word	0x080066e5
 8006690:	080066f9 	.word	0x080066f9
 8006694:	08006675 	.word	0x08006675
 8006698:	08006675 	.word	0x08006675
 800669c:	08006675 	.word	0x08006675
 80066a0:	08006675 	.word	0x08006675
 80066a4:	080066f9 	.word	0x080066f9
 80066a8:	08006675 	.word	0x08006675
 80066ac:	08006675 	.word	0x08006675
 80066b0:	08006675 	.word	0x08006675
 80066b4:	08006675 	.word	0x08006675
 80066b8:	080067f7 	.word	0x080067f7
 80066bc:	08006723 	.word	0x08006723
 80066c0:	080067b1 	.word	0x080067b1
 80066c4:	08006675 	.word	0x08006675
 80066c8:	08006675 	.word	0x08006675
 80066cc:	08006819 	.word	0x08006819
 80066d0:	08006675 	.word	0x08006675
 80066d4:	08006723 	.word	0x08006723
 80066d8:	08006675 	.word	0x08006675
 80066dc:	08006675 	.word	0x08006675
 80066e0:	080067b9 	.word	0x080067b9
 80066e4:	6833      	ldr	r3, [r6, #0]
 80066e6:	1d1a      	adds	r2, r3, #4
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6032      	str	r2, [r6, #0]
 80066ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066f4:	2301      	movs	r3, #1
 80066f6:	e09c      	b.n	8006832 <_printf_i+0x1e6>
 80066f8:	6833      	ldr	r3, [r6, #0]
 80066fa:	6820      	ldr	r0, [r4, #0]
 80066fc:	1d19      	adds	r1, r3, #4
 80066fe:	6031      	str	r1, [r6, #0]
 8006700:	0606      	lsls	r6, r0, #24
 8006702:	d501      	bpl.n	8006708 <_printf_i+0xbc>
 8006704:	681d      	ldr	r5, [r3, #0]
 8006706:	e003      	b.n	8006710 <_printf_i+0xc4>
 8006708:	0645      	lsls	r5, r0, #25
 800670a:	d5fb      	bpl.n	8006704 <_printf_i+0xb8>
 800670c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006710:	2d00      	cmp	r5, #0
 8006712:	da03      	bge.n	800671c <_printf_i+0xd0>
 8006714:	232d      	movs	r3, #45	@ 0x2d
 8006716:	426d      	negs	r5, r5
 8006718:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800671c:	4858      	ldr	r0, [pc, #352]	@ (8006880 <_printf_i+0x234>)
 800671e:	230a      	movs	r3, #10
 8006720:	e011      	b.n	8006746 <_printf_i+0xfa>
 8006722:	6821      	ldr	r1, [r4, #0]
 8006724:	6833      	ldr	r3, [r6, #0]
 8006726:	0608      	lsls	r0, r1, #24
 8006728:	f853 5b04 	ldr.w	r5, [r3], #4
 800672c:	d402      	bmi.n	8006734 <_printf_i+0xe8>
 800672e:	0649      	lsls	r1, r1, #25
 8006730:	bf48      	it	mi
 8006732:	b2ad      	uxthmi	r5, r5
 8006734:	2f6f      	cmp	r7, #111	@ 0x6f
 8006736:	4852      	ldr	r0, [pc, #328]	@ (8006880 <_printf_i+0x234>)
 8006738:	6033      	str	r3, [r6, #0]
 800673a:	bf14      	ite	ne
 800673c:	230a      	movne	r3, #10
 800673e:	2308      	moveq	r3, #8
 8006740:	2100      	movs	r1, #0
 8006742:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006746:	6866      	ldr	r6, [r4, #4]
 8006748:	60a6      	str	r6, [r4, #8]
 800674a:	2e00      	cmp	r6, #0
 800674c:	db05      	blt.n	800675a <_printf_i+0x10e>
 800674e:	6821      	ldr	r1, [r4, #0]
 8006750:	432e      	orrs	r6, r5
 8006752:	f021 0104 	bic.w	r1, r1, #4
 8006756:	6021      	str	r1, [r4, #0]
 8006758:	d04b      	beq.n	80067f2 <_printf_i+0x1a6>
 800675a:	4616      	mov	r6, r2
 800675c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006760:	fb03 5711 	mls	r7, r3, r1, r5
 8006764:	5dc7      	ldrb	r7, [r0, r7]
 8006766:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800676a:	462f      	mov	r7, r5
 800676c:	42bb      	cmp	r3, r7
 800676e:	460d      	mov	r5, r1
 8006770:	d9f4      	bls.n	800675c <_printf_i+0x110>
 8006772:	2b08      	cmp	r3, #8
 8006774:	d10b      	bne.n	800678e <_printf_i+0x142>
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	07df      	lsls	r7, r3, #31
 800677a:	d508      	bpl.n	800678e <_printf_i+0x142>
 800677c:	6923      	ldr	r3, [r4, #16]
 800677e:	6861      	ldr	r1, [r4, #4]
 8006780:	4299      	cmp	r1, r3
 8006782:	bfde      	ittt	le
 8006784:	2330      	movle	r3, #48	@ 0x30
 8006786:	f806 3c01 	strble.w	r3, [r6, #-1]
 800678a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800678e:	1b92      	subs	r2, r2, r6
 8006790:	6122      	str	r2, [r4, #16]
 8006792:	f8cd a000 	str.w	sl, [sp]
 8006796:	464b      	mov	r3, r9
 8006798:	aa03      	add	r2, sp, #12
 800679a:	4621      	mov	r1, r4
 800679c:	4640      	mov	r0, r8
 800679e:	f7ff fee7 	bl	8006570 <_printf_common>
 80067a2:	3001      	adds	r0, #1
 80067a4:	d14a      	bne.n	800683c <_printf_i+0x1f0>
 80067a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067aa:	b004      	add	sp, #16
 80067ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	f043 0320 	orr.w	r3, r3, #32
 80067b6:	6023      	str	r3, [r4, #0]
 80067b8:	4832      	ldr	r0, [pc, #200]	@ (8006884 <_printf_i+0x238>)
 80067ba:	2778      	movs	r7, #120	@ 0x78
 80067bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	6831      	ldr	r1, [r6, #0]
 80067c4:	061f      	lsls	r7, r3, #24
 80067c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80067ca:	d402      	bmi.n	80067d2 <_printf_i+0x186>
 80067cc:	065f      	lsls	r7, r3, #25
 80067ce:	bf48      	it	mi
 80067d0:	b2ad      	uxthmi	r5, r5
 80067d2:	6031      	str	r1, [r6, #0]
 80067d4:	07d9      	lsls	r1, r3, #31
 80067d6:	bf44      	itt	mi
 80067d8:	f043 0320 	orrmi.w	r3, r3, #32
 80067dc:	6023      	strmi	r3, [r4, #0]
 80067de:	b11d      	cbz	r5, 80067e8 <_printf_i+0x19c>
 80067e0:	2310      	movs	r3, #16
 80067e2:	e7ad      	b.n	8006740 <_printf_i+0xf4>
 80067e4:	4826      	ldr	r0, [pc, #152]	@ (8006880 <_printf_i+0x234>)
 80067e6:	e7e9      	b.n	80067bc <_printf_i+0x170>
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	f023 0320 	bic.w	r3, r3, #32
 80067ee:	6023      	str	r3, [r4, #0]
 80067f0:	e7f6      	b.n	80067e0 <_printf_i+0x194>
 80067f2:	4616      	mov	r6, r2
 80067f4:	e7bd      	b.n	8006772 <_printf_i+0x126>
 80067f6:	6833      	ldr	r3, [r6, #0]
 80067f8:	6825      	ldr	r5, [r4, #0]
 80067fa:	6961      	ldr	r1, [r4, #20]
 80067fc:	1d18      	adds	r0, r3, #4
 80067fe:	6030      	str	r0, [r6, #0]
 8006800:	062e      	lsls	r6, r5, #24
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	d501      	bpl.n	800680a <_printf_i+0x1be>
 8006806:	6019      	str	r1, [r3, #0]
 8006808:	e002      	b.n	8006810 <_printf_i+0x1c4>
 800680a:	0668      	lsls	r0, r5, #25
 800680c:	d5fb      	bpl.n	8006806 <_printf_i+0x1ba>
 800680e:	8019      	strh	r1, [r3, #0]
 8006810:	2300      	movs	r3, #0
 8006812:	6123      	str	r3, [r4, #16]
 8006814:	4616      	mov	r6, r2
 8006816:	e7bc      	b.n	8006792 <_printf_i+0x146>
 8006818:	6833      	ldr	r3, [r6, #0]
 800681a:	1d1a      	adds	r2, r3, #4
 800681c:	6032      	str	r2, [r6, #0]
 800681e:	681e      	ldr	r6, [r3, #0]
 8006820:	6862      	ldr	r2, [r4, #4]
 8006822:	2100      	movs	r1, #0
 8006824:	4630      	mov	r0, r6
 8006826:	f7f9 fcfb 	bl	8000220 <memchr>
 800682a:	b108      	cbz	r0, 8006830 <_printf_i+0x1e4>
 800682c:	1b80      	subs	r0, r0, r6
 800682e:	6060      	str	r0, [r4, #4]
 8006830:	6863      	ldr	r3, [r4, #4]
 8006832:	6123      	str	r3, [r4, #16]
 8006834:	2300      	movs	r3, #0
 8006836:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800683a:	e7aa      	b.n	8006792 <_printf_i+0x146>
 800683c:	6923      	ldr	r3, [r4, #16]
 800683e:	4632      	mov	r2, r6
 8006840:	4649      	mov	r1, r9
 8006842:	4640      	mov	r0, r8
 8006844:	47d0      	blx	sl
 8006846:	3001      	adds	r0, #1
 8006848:	d0ad      	beq.n	80067a6 <_printf_i+0x15a>
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	079b      	lsls	r3, r3, #30
 800684e:	d413      	bmi.n	8006878 <_printf_i+0x22c>
 8006850:	68e0      	ldr	r0, [r4, #12]
 8006852:	9b03      	ldr	r3, [sp, #12]
 8006854:	4298      	cmp	r0, r3
 8006856:	bfb8      	it	lt
 8006858:	4618      	movlt	r0, r3
 800685a:	e7a6      	b.n	80067aa <_printf_i+0x15e>
 800685c:	2301      	movs	r3, #1
 800685e:	4632      	mov	r2, r6
 8006860:	4649      	mov	r1, r9
 8006862:	4640      	mov	r0, r8
 8006864:	47d0      	blx	sl
 8006866:	3001      	adds	r0, #1
 8006868:	d09d      	beq.n	80067a6 <_printf_i+0x15a>
 800686a:	3501      	adds	r5, #1
 800686c:	68e3      	ldr	r3, [r4, #12]
 800686e:	9903      	ldr	r1, [sp, #12]
 8006870:	1a5b      	subs	r3, r3, r1
 8006872:	42ab      	cmp	r3, r5
 8006874:	dcf2      	bgt.n	800685c <_printf_i+0x210>
 8006876:	e7eb      	b.n	8006850 <_printf_i+0x204>
 8006878:	2500      	movs	r5, #0
 800687a:	f104 0619 	add.w	r6, r4, #25
 800687e:	e7f5      	b.n	800686c <_printf_i+0x220>
 8006880:	08006a1d 	.word	0x08006a1d
 8006884:	08006a2e 	.word	0x08006a2e

08006888 <memmove>:
 8006888:	4288      	cmp	r0, r1
 800688a:	b510      	push	{r4, lr}
 800688c:	eb01 0402 	add.w	r4, r1, r2
 8006890:	d902      	bls.n	8006898 <memmove+0x10>
 8006892:	4284      	cmp	r4, r0
 8006894:	4623      	mov	r3, r4
 8006896:	d807      	bhi.n	80068a8 <memmove+0x20>
 8006898:	1e43      	subs	r3, r0, #1
 800689a:	42a1      	cmp	r1, r4
 800689c:	d008      	beq.n	80068b0 <memmove+0x28>
 800689e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068a6:	e7f8      	b.n	800689a <memmove+0x12>
 80068a8:	4402      	add	r2, r0
 80068aa:	4601      	mov	r1, r0
 80068ac:	428a      	cmp	r2, r1
 80068ae:	d100      	bne.n	80068b2 <memmove+0x2a>
 80068b0:	bd10      	pop	{r4, pc}
 80068b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068ba:	e7f7      	b.n	80068ac <memmove+0x24>

080068bc <_sbrk_r>:
 80068bc:	b538      	push	{r3, r4, r5, lr}
 80068be:	4d06      	ldr	r5, [pc, #24]	@ (80068d8 <_sbrk_r+0x1c>)
 80068c0:	2300      	movs	r3, #0
 80068c2:	4604      	mov	r4, r0
 80068c4:	4608      	mov	r0, r1
 80068c6:	602b      	str	r3, [r5, #0]
 80068c8:	f7fb f9c0 	bl	8001c4c <_sbrk>
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	d102      	bne.n	80068d6 <_sbrk_r+0x1a>
 80068d0:	682b      	ldr	r3, [r5, #0]
 80068d2:	b103      	cbz	r3, 80068d6 <_sbrk_r+0x1a>
 80068d4:	6023      	str	r3, [r4, #0]
 80068d6:	bd38      	pop	{r3, r4, r5, pc}
 80068d8:	200003d0 	.word	0x200003d0

080068dc <memcpy>:
 80068dc:	440a      	add	r2, r1
 80068de:	4291      	cmp	r1, r2
 80068e0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80068e4:	d100      	bne.n	80068e8 <memcpy+0xc>
 80068e6:	4770      	bx	lr
 80068e8:	b510      	push	{r4, lr}
 80068ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068f2:	4291      	cmp	r1, r2
 80068f4:	d1f9      	bne.n	80068ea <memcpy+0xe>
 80068f6:	bd10      	pop	{r4, pc}

080068f8 <_realloc_r>:
 80068f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068fc:	4607      	mov	r7, r0
 80068fe:	4614      	mov	r4, r2
 8006900:	460d      	mov	r5, r1
 8006902:	b921      	cbnz	r1, 800690e <_realloc_r+0x16>
 8006904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006908:	4611      	mov	r1, r2
 800690a:	f7ff bc4d 	b.w	80061a8 <_malloc_r>
 800690e:	b92a      	cbnz	r2, 800691c <_realloc_r+0x24>
 8006910:	f7ff fbde 	bl	80060d0 <_free_r>
 8006914:	4625      	mov	r5, r4
 8006916:	4628      	mov	r0, r5
 8006918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800691c:	f000 f81a 	bl	8006954 <_malloc_usable_size_r>
 8006920:	4284      	cmp	r4, r0
 8006922:	4606      	mov	r6, r0
 8006924:	d802      	bhi.n	800692c <_realloc_r+0x34>
 8006926:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800692a:	d8f4      	bhi.n	8006916 <_realloc_r+0x1e>
 800692c:	4621      	mov	r1, r4
 800692e:	4638      	mov	r0, r7
 8006930:	f7ff fc3a 	bl	80061a8 <_malloc_r>
 8006934:	4680      	mov	r8, r0
 8006936:	b908      	cbnz	r0, 800693c <_realloc_r+0x44>
 8006938:	4645      	mov	r5, r8
 800693a:	e7ec      	b.n	8006916 <_realloc_r+0x1e>
 800693c:	42b4      	cmp	r4, r6
 800693e:	4622      	mov	r2, r4
 8006940:	4629      	mov	r1, r5
 8006942:	bf28      	it	cs
 8006944:	4632      	movcs	r2, r6
 8006946:	f7ff ffc9 	bl	80068dc <memcpy>
 800694a:	4629      	mov	r1, r5
 800694c:	4638      	mov	r0, r7
 800694e:	f7ff fbbf 	bl	80060d0 <_free_r>
 8006952:	e7f1      	b.n	8006938 <_realloc_r+0x40>

08006954 <_malloc_usable_size_r>:
 8006954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006958:	1f18      	subs	r0, r3, #4
 800695a:	2b00      	cmp	r3, #0
 800695c:	bfbc      	itt	lt
 800695e:	580b      	ldrlt	r3, [r1, r0]
 8006960:	18c0      	addlt	r0, r0, r3
 8006962:	4770      	bx	lr

08006964 <_init>:
 8006964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006966:	bf00      	nop
 8006968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800696a:	bc08      	pop	{r3}
 800696c:	469e      	mov	lr, r3
 800696e:	4770      	bx	lr

08006970 <_fini>:
 8006970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006972:	bf00      	nop
 8006974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006976:	bc08      	pop	{r3}
 8006978:	469e      	mov	lr, r3
 800697a:	4770      	bx	lr
