
rpm_controller_pid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000649c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800666c  0800666c  0000766c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067d0  080067d0  00008070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080067d0  080067d0  000077d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067d8  080067d8  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067d8  080067d8  000077d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067dc  080067dc  000077dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080067e0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  20000070  08006850  00008070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08006850  0000843c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3f2  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f4e  00000000  00000000  00016492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  000183e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a55  00000000  00000000  00019108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ea8  00000000  00000000  00019b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eead  00000000  00000000  0003ba05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0f77  00000000  00000000  0004a8b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011b829  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e68  00000000  00000000  0011b86c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0011f6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006654 	.word	0x08006654

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08006654 	.word	0x08006654

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b40:	f000 b988 	b.w	8000e54 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	468e      	mov	lr, r1
 8000b64:	4604      	mov	r4, r0
 8000b66:	4688      	mov	r8, r1
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d14a      	bne.n	8000c02 <__udivmoddi4+0xa6>
 8000b6c:	428a      	cmp	r2, r1
 8000b6e:	4617      	mov	r7, r2
 8000b70:	d962      	bls.n	8000c38 <__udivmoddi4+0xdc>
 8000b72:	fab2 f682 	clz	r6, r2
 8000b76:	b14e      	cbz	r6, 8000b8c <__udivmoddi4+0x30>
 8000b78:	f1c6 0320 	rsb	r3, r6, #32
 8000b7c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b80:	fa20 f303 	lsr.w	r3, r0, r3
 8000b84:	40b7      	lsls	r7, r6
 8000b86:	ea43 0808 	orr.w	r8, r3, r8
 8000b8a:	40b4      	lsls	r4, r6
 8000b8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b90:	fa1f fc87 	uxth.w	ip, r7
 8000b94:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b98:	0c23      	lsrs	r3, r4, #16
 8000b9a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b9e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ba2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d909      	bls.n	8000bbe <__udivmoddi4+0x62>
 8000baa:	18fb      	adds	r3, r7, r3
 8000bac:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000bb0:	f080 80ea 	bcs.w	8000d88 <__udivmoddi4+0x22c>
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	f240 80e7 	bls.w	8000d88 <__udivmoddi4+0x22c>
 8000bba:	3902      	subs	r1, #2
 8000bbc:	443b      	add	r3, r7
 8000bbe:	1a9a      	subs	r2, r3, r2
 8000bc0:	b2a3      	uxth	r3, r4
 8000bc2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bc6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bce:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bd2:	459c      	cmp	ip, r3
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0x8e>
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000bdc:	f080 80d6 	bcs.w	8000d8c <__udivmoddi4+0x230>
 8000be0:	459c      	cmp	ip, r3
 8000be2:	f240 80d3 	bls.w	8000d8c <__udivmoddi4+0x230>
 8000be6:	443b      	add	r3, r7
 8000be8:	3802      	subs	r0, #2
 8000bea:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bee:	eba3 030c 	sub.w	r3, r3, ip
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	b11d      	cbz	r5, 8000bfe <__udivmoddi4+0xa2>
 8000bf6:	40f3      	lsrs	r3, r6
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	e9c5 3200 	strd	r3, r2, [r5]
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d905      	bls.n	8000c12 <__udivmoddi4+0xb6>
 8000c06:	b10d      	cbz	r5, 8000c0c <__udivmoddi4+0xb0>
 8000c08:	e9c5 0100 	strd	r0, r1, [r5]
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4608      	mov	r0, r1
 8000c10:	e7f5      	b.n	8000bfe <__udivmoddi4+0xa2>
 8000c12:	fab3 f183 	clz	r1, r3
 8000c16:	2900      	cmp	r1, #0
 8000c18:	d146      	bne.n	8000ca8 <__udivmoddi4+0x14c>
 8000c1a:	4573      	cmp	r3, lr
 8000c1c:	d302      	bcc.n	8000c24 <__udivmoddi4+0xc8>
 8000c1e:	4282      	cmp	r2, r0
 8000c20:	f200 8105 	bhi.w	8000e2e <__udivmoddi4+0x2d2>
 8000c24:	1a84      	subs	r4, r0, r2
 8000c26:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	4690      	mov	r8, r2
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	d0e5      	beq.n	8000bfe <__udivmoddi4+0xa2>
 8000c32:	e9c5 4800 	strd	r4, r8, [r5]
 8000c36:	e7e2      	b.n	8000bfe <__udivmoddi4+0xa2>
 8000c38:	2a00      	cmp	r2, #0
 8000c3a:	f000 8090 	beq.w	8000d5e <__udivmoddi4+0x202>
 8000c3e:	fab2 f682 	clz	r6, r2
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	f040 80a4 	bne.w	8000d90 <__udivmoddi4+0x234>
 8000c48:	1a8a      	subs	r2, r1, r2
 8000c4a:	0c03      	lsrs	r3, r0, #16
 8000c4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c50:	b280      	uxth	r0, r0
 8000c52:	b2bc      	uxth	r4, r7
 8000c54:	2101      	movs	r1, #1
 8000c56:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c5a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c62:	fb04 f20c 	mul.w	r2, r4, ip
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d907      	bls.n	8000c7a <__udivmoddi4+0x11e>
 8000c6a:	18fb      	adds	r3, r7, r3
 8000c6c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000c70:	d202      	bcs.n	8000c78 <__udivmoddi4+0x11c>
 8000c72:	429a      	cmp	r2, r3
 8000c74:	f200 80e0 	bhi.w	8000e38 <__udivmoddi4+0x2dc>
 8000c78:	46c4      	mov	ip, r8
 8000c7a:	1a9b      	subs	r3, r3, r2
 8000c7c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c80:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c84:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c88:	fb02 f404 	mul.w	r4, r2, r4
 8000c8c:	429c      	cmp	r4, r3
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x144>
 8000c90:	18fb      	adds	r3, r7, r3
 8000c92:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x142>
 8000c98:	429c      	cmp	r4, r3
 8000c9a:	f200 80ca 	bhi.w	8000e32 <__udivmoddi4+0x2d6>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	1b1b      	subs	r3, r3, r4
 8000ca2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ca6:	e7a5      	b.n	8000bf4 <__udivmoddi4+0x98>
 8000ca8:	f1c1 0620 	rsb	r6, r1, #32
 8000cac:	408b      	lsls	r3, r1
 8000cae:	fa22 f706 	lsr.w	r7, r2, r6
 8000cb2:	431f      	orrs	r7, r3
 8000cb4:	fa0e f401 	lsl.w	r4, lr, r1
 8000cb8:	fa20 f306 	lsr.w	r3, r0, r6
 8000cbc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cc0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cc4:	4323      	orrs	r3, r4
 8000cc6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cca:	fa1f fc87 	uxth.w	ip, r7
 8000cce:	fbbe f0f9 	udiv	r0, lr, r9
 8000cd2:	0c1c      	lsrs	r4, r3, #16
 8000cd4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000cd8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cdc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ce0:	45a6      	cmp	lr, r4
 8000ce2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ce6:	d909      	bls.n	8000cfc <__udivmoddi4+0x1a0>
 8000ce8:	193c      	adds	r4, r7, r4
 8000cea:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000cee:	f080 809c 	bcs.w	8000e2a <__udivmoddi4+0x2ce>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	f240 8099 	bls.w	8000e2a <__udivmoddi4+0x2ce>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	443c      	add	r4, r7
 8000cfc:	eba4 040e 	sub.w	r4, r4, lr
 8000d00:	fa1f fe83 	uxth.w	lr, r3
 8000d04:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d08:	fb09 4413 	mls	r4, r9, r3, r4
 8000d0c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d10:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d14:	45a4      	cmp	ip, r4
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x1ce>
 8000d18:	193c      	adds	r4, r7, r4
 8000d1a:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d1e:	f080 8082 	bcs.w	8000e26 <__udivmoddi4+0x2ca>
 8000d22:	45a4      	cmp	ip, r4
 8000d24:	d97f      	bls.n	8000e26 <__udivmoddi4+0x2ca>
 8000d26:	3b02      	subs	r3, #2
 8000d28:	443c      	add	r4, r7
 8000d2a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d2e:	eba4 040c 	sub.w	r4, r4, ip
 8000d32:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d36:	4564      	cmp	r4, ip
 8000d38:	4673      	mov	r3, lr
 8000d3a:	46e1      	mov	r9, ip
 8000d3c:	d362      	bcc.n	8000e04 <__udivmoddi4+0x2a8>
 8000d3e:	d05f      	beq.n	8000e00 <__udivmoddi4+0x2a4>
 8000d40:	b15d      	cbz	r5, 8000d5a <__udivmoddi4+0x1fe>
 8000d42:	ebb8 0203 	subs.w	r2, r8, r3
 8000d46:	eb64 0409 	sbc.w	r4, r4, r9
 8000d4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d4e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d52:	431e      	orrs	r6, r3
 8000d54:	40cc      	lsrs	r4, r1
 8000d56:	e9c5 6400 	strd	r6, r4, [r5]
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	e74f      	b.n	8000bfe <__udivmoddi4+0xa2>
 8000d5e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d62:	0c01      	lsrs	r1, r0, #16
 8000d64:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d68:	b280      	uxth	r0, r0
 8000d6a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d6e:	463b      	mov	r3, r7
 8000d70:	4638      	mov	r0, r7
 8000d72:	463c      	mov	r4, r7
 8000d74:	46b8      	mov	r8, r7
 8000d76:	46be      	mov	lr, r7
 8000d78:	2620      	movs	r6, #32
 8000d7a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d7e:	eba2 0208 	sub.w	r2, r2, r8
 8000d82:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d86:	e766      	b.n	8000c56 <__udivmoddi4+0xfa>
 8000d88:	4601      	mov	r1, r0
 8000d8a:	e718      	b.n	8000bbe <__udivmoddi4+0x62>
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	e72c      	b.n	8000bea <__udivmoddi4+0x8e>
 8000d90:	f1c6 0220 	rsb	r2, r6, #32
 8000d94:	fa2e f302 	lsr.w	r3, lr, r2
 8000d98:	40b7      	lsls	r7, r6
 8000d9a:	40b1      	lsls	r1, r6
 8000d9c:	fa20 f202 	lsr.w	r2, r0, r2
 8000da0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da4:	430a      	orrs	r2, r1
 8000da6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000daa:	b2bc      	uxth	r4, r7
 8000dac:	fb0e 3318 	mls	r3, lr, r8, r3
 8000db0:	0c11      	lsrs	r1, r2, #16
 8000db2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db6:	fb08 f904 	mul.w	r9, r8, r4
 8000dba:	40b0      	lsls	r0, r6
 8000dbc:	4589      	cmp	r9, r1
 8000dbe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dc2:	b280      	uxth	r0, r0
 8000dc4:	d93e      	bls.n	8000e44 <__udivmoddi4+0x2e8>
 8000dc6:	1879      	adds	r1, r7, r1
 8000dc8:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000dcc:	d201      	bcs.n	8000dd2 <__udivmoddi4+0x276>
 8000dce:	4589      	cmp	r9, r1
 8000dd0:	d81f      	bhi.n	8000e12 <__udivmoddi4+0x2b6>
 8000dd2:	eba1 0109 	sub.w	r1, r1, r9
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fb09 f804 	mul.w	r8, r9, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	b292      	uxth	r2, r2
 8000de4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000de8:	4542      	cmp	r2, r8
 8000dea:	d229      	bcs.n	8000e40 <__udivmoddi4+0x2e4>
 8000dec:	18ba      	adds	r2, r7, r2
 8000dee:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000df2:	d2c4      	bcs.n	8000d7e <__udivmoddi4+0x222>
 8000df4:	4542      	cmp	r2, r8
 8000df6:	d2c2      	bcs.n	8000d7e <__udivmoddi4+0x222>
 8000df8:	f1a9 0102 	sub.w	r1, r9, #2
 8000dfc:	443a      	add	r2, r7
 8000dfe:	e7be      	b.n	8000d7e <__udivmoddi4+0x222>
 8000e00:	45f0      	cmp	r8, lr
 8000e02:	d29d      	bcs.n	8000d40 <__udivmoddi4+0x1e4>
 8000e04:	ebbe 0302 	subs.w	r3, lr, r2
 8000e08:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	46e1      	mov	r9, ip
 8000e10:	e796      	b.n	8000d40 <__udivmoddi4+0x1e4>
 8000e12:	eba7 0909 	sub.w	r9, r7, r9
 8000e16:	4449      	add	r1, r9
 8000e18:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e1c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e20:	fb09 f804 	mul.w	r8, r9, r4
 8000e24:	e7db      	b.n	8000dde <__udivmoddi4+0x282>
 8000e26:	4673      	mov	r3, lr
 8000e28:	e77f      	b.n	8000d2a <__udivmoddi4+0x1ce>
 8000e2a:	4650      	mov	r0, sl
 8000e2c:	e766      	b.n	8000cfc <__udivmoddi4+0x1a0>
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e6fd      	b.n	8000c2e <__udivmoddi4+0xd2>
 8000e32:	443b      	add	r3, r7
 8000e34:	3a02      	subs	r2, #2
 8000e36:	e733      	b.n	8000ca0 <__udivmoddi4+0x144>
 8000e38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e3c:	443b      	add	r3, r7
 8000e3e:	e71c      	b.n	8000c7a <__udivmoddi4+0x11e>
 8000e40:	4649      	mov	r1, r9
 8000e42:	e79c      	b.n	8000d7e <__udivmoddi4+0x222>
 8000e44:	eba1 0109 	sub.w	r1, r1, r9
 8000e48:	46c4      	mov	ip, r8
 8000e4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4e:	fb09 f804 	mul.w	r8, r9, r4
 8000e52:	e7c4      	b.n	8000dde <__udivmoddi4+0x282>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <PID_control>:
float Kp=1, Ki=0, Kd=0;
float umax=8000;/*Constant*/
float umin=0; /*Constant*/
float T=0.02;
float PID_control (float setpoint, float measure)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e62:	edc7 0a00 	vstr	s1, [r7]
	ek_2=ek_1;
 8000e66:	4b43      	ldr	r3, [pc, #268]	@ (8000f74 <PID_control+0x11c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a43      	ldr	r2, [pc, #268]	@ (8000f78 <PID_control+0x120>)
 8000e6c:	6013      	str	r3, [r2, #0]
	ek_1=ek;
 8000e6e:	4b43      	ldr	r3, [pc, #268]	@ (8000f7c <PID_control+0x124>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a40      	ldr	r2, [pc, #256]	@ (8000f74 <PID_control+0x11c>)
 8000e74:	6013      	str	r3, [r2, #0]
	ek=setpoint-measure;
 8000e76:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e7a:	edd7 7a00 	vldr	s15, [r7]
 8000e7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e82:	4b3e      	ldr	r3, [pc, #248]	@ (8000f7c <PID_control+0x124>)
 8000e84:	edc3 7a00 	vstr	s15, [r3]
	uk_1=uk;
 8000e88:	4b3d      	ldr	r3, [pc, #244]	@ (8000f80 <PID_control+0x128>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a3d      	ldr	r2, [pc, #244]	@ (8000f84 <PID_control+0x12c>)
 8000e8e:	6013      	str	r3, [r2, #0]
	uk=uk_1+Kp*(ek-ek_1) +Ki*(T/2)*(ek+ek_1)+ (Kd/T)*(ek-2*ek_1+ek_2);
 8000e90:	4b3a      	ldr	r3, [pc, #232]	@ (8000f7c <PID_control+0x124>)
 8000e92:	ed93 7a00 	vldr	s14, [r3]
 8000e96:	4b37      	ldr	r3, [pc, #220]	@ (8000f74 <PID_control+0x11c>)
 8000e98:	edd3 7a00 	vldr	s15, [r3]
 8000e9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ea0:	4b39      	ldr	r3, [pc, #228]	@ (8000f88 <PID_control+0x130>)
 8000ea2:	edd3 7a00 	vldr	s15, [r3]
 8000ea6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eaa:	4b36      	ldr	r3, [pc, #216]	@ (8000f84 <PID_control+0x12c>)
 8000eac:	edd3 7a00 	vldr	s15, [r3]
 8000eb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eb4:	4b35      	ldr	r3, [pc, #212]	@ (8000f8c <PID_control+0x134>)
 8000eb6:	edd3 7a00 	vldr	s15, [r3]
 8000eba:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8000ebe:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8000ec2:	4b33      	ldr	r3, [pc, #204]	@ (8000f90 <PID_control+0x138>)
 8000ec4:	edd3 7a00 	vldr	s15, [r3]
 8000ec8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8000f7c <PID_control+0x124>)
 8000ece:	ed93 6a00 	vldr	s12, [r3]
 8000ed2:	4b28      	ldr	r3, [pc, #160]	@ (8000f74 <PID_control+0x11c>)
 8000ed4:	edd3 7a00 	vldr	s15, [r3]
 8000ed8:	ee76 7a27 	vadd.f32	s15, s12, s15
 8000edc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ee0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8000f94 <PID_control+0x13c>)
 8000ee6:	ed93 6a00 	vldr	s12, [r3]
 8000eea:	4b28      	ldr	r3, [pc, #160]	@ (8000f8c <PID_control+0x134>)
 8000eec:	edd3 7a00 	vldr	s15, [r3]
 8000ef0:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8000ef4:	4b21      	ldr	r3, [pc, #132]	@ (8000f7c <PID_control+0x124>)
 8000ef6:	ed93 6a00 	vldr	s12, [r3]
 8000efa:	4b1e      	ldr	r3, [pc, #120]	@ (8000f74 <PID_control+0x11c>)
 8000efc:	edd3 7a00 	vldr	s15, [r3]
 8000f00:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f04:	ee36 6a67 	vsub.f32	s12, s12, s15
 8000f08:	4b1b      	ldr	r3, [pc, #108]	@ (8000f78 <PID_control+0x120>)
 8000f0a:	edd3 7a00 	vldr	s15, [r3]
 8000f0e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8000f12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f1a:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <PID_control+0x128>)
 8000f1c:	edc3 7a00 	vstr	s15, [r3]
	if (uk>umax) uk=umax;
 8000f20:	4b17      	ldr	r3, [pc, #92]	@ (8000f80 <PID_control+0x128>)
 8000f22:	ed93 7a00 	vldr	s14, [r3]
 8000f26:	4b1c      	ldr	r3, [pc, #112]	@ (8000f98 <PID_control+0x140>)
 8000f28:	edd3 7a00 	vldr	s15, [r3]
 8000f2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f34:	dd03      	ble.n	8000f3e <PID_control+0xe6>
 8000f36:	4b18      	ldr	r3, [pc, #96]	@ (8000f98 <PID_control+0x140>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a11      	ldr	r2, [pc, #68]	@ (8000f80 <PID_control+0x128>)
 8000f3c:	6013      	str	r3, [r2, #0]
	if (uk<umin) uk=umin;
 8000f3e:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <PID_control+0x128>)
 8000f40:	ed93 7a00 	vldr	s14, [r3]
 8000f44:	4b15      	ldr	r3, [pc, #84]	@ (8000f9c <PID_control+0x144>)
 8000f46:	edd3 7a00 	vldr	s15, [r3]
 8000f4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f52:	d503      	bpl.n	8000f5c <PID_control+0x104>
 8000f54:	4b11      	ldr	r3, [pc, #68]	@ (8000f9c <PID_control+0x144>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a09      	ldr	r2, [pc, #36]	@ (8000f80 <PID_control+0x128>)
 8000f5a:	6013      	str	r3, [r2, #0]
	return (uk);
 8000f5c:	4b08      	ldr	r3, [pc, #32]	@ (8000f80 <PID_control+0x128>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	ee07 3a90 	vmov	s15, r3
}
 8000f64:	eeb0 0a67 	vmov.f32	s0, s15
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	200002c8 	.word	0x200002c8
 8000f78:	200002cc 	.word	0x200002cc
 8000f7c:	200002d0 	.word	0x200002d0
 8000f80:	200002c0 	.word	0x200002c0
 8000f84:	200002c4 	.word	0x200002c4
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000010 	.word	0x20000010
 8000f90:	200002d4 	.word	0x200002d4
 8000f94:	200002d8 	.word	0x200002d8
 8000f98:	2000000c 	.word	0x2000000c
 8000f9c:	200002dc 	.word	0x200002dc

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b598      	push	{r3, r4, r7, lr}
 8000fa2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

HAL_Init();
 8000fa4:	f000 fefc 	bl	8001da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa8:	f000 f894 	bl	80010d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fac:	f000 fa8e 	bl	80014cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fb0:	f000 fa62 	bl	8001478 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000fb4:	f000 fa0c 	bl	80013d0 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000fb8:	f000 f8fa 	bl	80011b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000fbc:	f000 f998 	bl	80012f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000fc0:	213c      	movs	r1, #60	@ 0x3c
 8000fc2:	4837      	ldr	r0, [pc, #220]	@ (80010a0 <main+0x100>)
 8000fc4:	f002 fc6c 	bl	80038a0 <HAL_TIM_Encoder_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4836      	ldr	r0, [pc, #216]	@ (80010a4 <main+0x104>)
 8000fcc:	f002 fa9a 	bl	8003504 <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart2, &rx_uart, 1);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4935      	ldr	r1, [pc, #212]	@ (80010a8 <main+0x108>)
 8000fd4:	4835      	ldr	r0, [pc, #212]	@ (80010ac <main+0x10c>)
 8000fd6:	f003 fe70 	bl	8004cba <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4834      	ldr	r0, [pc, #208]	@ (80010b0 <main+0x110>)
 8000fde:	f002 f96f 	bl	80032c0 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 //305 - medio, 1000 - maximo, 250 - minimo
	 encoder_position = __HAL_TIM_GET_COUNTER(&htim4);
 8000fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80010a0 <main+0x100>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe8:	4a32      	ldr	r2, [pc, #200]	@ (80010b4 <main+0x114>)
 8000fea:	6013      	str	r3, [r2, #0]
	 rpm_real = frequencia*60;
 8000fec:	4b32      	ldr	r3, [pc, #200]	@ (80010b8 <main+0x118>)
 8000fee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	4b31      	ldr	r3, [pc, #196]	@ (80010bc <main+0x11c>)
 8000ff8:	f7ff fb16 	bl	8000628 <__aeabi_dmul>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	492f      	ldr	r1, [pc, #188]	@ (80010c0 <main+0x120>)
 8001002:	e9c1 2300 	strd	r2, r3, [r1]
	 Encoder_CheckChange(&htim4);
 8001006:	4826      	ldr	r0, [pc, #152]	@ (80010a0 <main+0x100>)
 8001008:	f000 fc50 	bl	80018ac <Encoder_CheckChange>
	 if(rpm_selection > 3){
 800100c:	4b2d      	ldr	r3, [pc, #180]	@ (80010c4 <main+0x124>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b03      	cmp	r3, #3
 8001012:	d903      	bls.n	800101c <main+0x7c>
		 rpm_selection = 3;
 8001014:	4b2b      	ldr	r3, [pc, #172]	@ (80010c4 <main+0x124>)
 8001016:	2203      	movs	r2, #3
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	e006      	b.n	800102a <main+0x8a>
	 } else if(rpm_selection < 1){
 800101c:	4b29      	ldr	r3, [pc, #164]	@ (80010c4 <main+0x124>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <main+0x8a>
		 rpm_selection = 1;
 8001024:	4b27      	ldr	r3, [pc, #156]	@ (80010c4 <main+0x124>)
 8001026:	2201      	movs	r2, #1
 8001028:	601a      	str	r2, [r3, #0]
	 }
	 //pwm = (uint32_t)(rpm_select * 1000)/7400;

	 //PID_Compute(&RPM_PID);
	 if(parada) {
 800102a:	4b27      	ldr	r3, [pc, #156]	@ (80010c8 <main+0x128>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d004      	beq.n	800103c <main+0x9c>
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001032:	4b1f      	ldr	r3, [pc, #124]	@ (80010b0 <main+0x110>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2200      	movs	r2, #0
 8001038:	635a      	str	r2, [r3, #52]	@ 0x34
 800103a:	e7d2      	b.n	8000fe2 <main+0x42>
	 } else if(teste_motor){
 800103c:	4b23      	ldr	r3, [pc, #140]	@ (80010cc <main+0x12c>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d020      	beq.n	8001086 <main+0xe6>
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 250);
 8001044:	4b1a      	ldr	r3, [pc, #104]	@ (80010b0 <main+0x110>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	22fa      	movs	r2, #250	@ 0xfa
 800104a:	635a      	str	r2, [r3, #52]	@ 0x34
		 HAL_Delay(5000);
 800104c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001050:	f000 ff18 	bl	8001e84 <HAL_Delay>
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 305);
 8001054:	4b16      	ldr	r3, [pc, #88]	@ (80010b0 <main+0x110>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f240 1231 	movw	r2, #305	@ 0x131
 800105c:	635a      	str	r2, [r3, #52]	@ 0x34
		 HAL_Delay(5000);
 800105e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001062:	f000 ff0f 	bl	8001e84 <HAL_Delay>
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);
 8001066:	4b12      	ldr	r3, [pc, #72]	@ (80010b0 <main+0x110>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800106e:	635a      	str	r2, [r3, #52]	@ 0x34
		 HAL_Delay(5000);
 8001070:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001074:	f000 ff06 	bl	8001e84 <HAL_Delay>
		 teste_motor = false;
 8001078:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <main+0x12c>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
		 parada = true;
 800107e:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <main+0x128>)
 8001080:	2201      	movs	r2, #1
 8001082:	701a      	strb	r2, [r3, #0]
 8001084:	e7ad      	b.n	8000fe2 <main+0x42>
	 }else{
		 //__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, velocity[rpm_selection - 1]);
		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm);
 8001086:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <main+0x130>)
 8001088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108c:	4908      	ldr	r1, [pc, #32]	@ (80010b0 <main+0x110>)
 800108e:	680c      	ldr	r4, [r1, #0]
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fcda 	bl	8000a4c <__aeabi_d2uiz>
 8001098:	4603      	mov	r3, r0
 800109a:	6363      	str	r3, [r4, #52]	@ 0x34
	 encoder_position = __HAL_TIM_GET_COUNTER(&htim4);
 800109c:	e7a1      	b.n	8000fe2 <main+0x42>
 800109e:	bf00      	nop
 80010a0:	2000011c 	.word	0x2000011c
 80010a4:	200000d4 	.word	0x200000d4
 80010a8:	200001f0 	.word	0x200001f0
 80010ac:	20000164 	.word	0x20000164
 80010b0:	2000008c 	.word	0x2000008c
 80010b4:	200001ac 	.word	0x200001ac
 80010b8:	200001e0 	.word	0x200001e0
 80010bc:	404e0000 	.word	0x404e0000
 80010c0:	200001e8 	.word	0x200001e8
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000004 	.word	0x20000004
 80010cc:	200001c8 	.word	0x200001c8
 80010d0:	200001b8 	.word	0x200001b8

080010d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b094      	sub	sp, #80	@ 0x50
 80010d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	2234      	movs	r2, #52	@ 0x34
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f004 fe38 	bl	8005d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	4b2a      	ldr	r3, [pc, #168]	@ (80011a8 <SystemClock_Config+0xd4>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001100:	4a29      	ldr	r2, [pc, #164]	@ (80011a8 <SystemClock_Config+0xd4>)
 8001102:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001106:	6413      	str	r3, [r2, #64]	@ 0x40
 8001108:	4b27      	ldr	r3, [pc, #156]	@ (80011a8 <SystemClock_Config+0xd4>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001114:	2300      	movs	r3, #0
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	4b24      	ldr	r3, [pc, #144]	@ (80011ac <SystemClock_Config+0xd8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001120:	4a22      	ldr	r2, [pc, #136]	@ (80011ac <SystemClock_Config+0xd8>)
 8001122:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b20      	ldr	r3, [pc, #128]	@ (80011ac <SystemClock_Config+0xd8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001134:	2302      	movs	r3, #2
 8001136:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001138:	2301      	movs	r3, #1
 800113a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800113c:	2310      	movs	r3, #16
 800113e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001140:	2302      	movs	r3, #2
 8001142:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001144:	2300      	movs	r3, #0
 8001146:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001148:	2310      	movs	r3, #16
 800114a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800114c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001150:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001152:	2304      	movs	r3, #4
 8001154:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001156:	2302      	movs	r3, #2
 8001158:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800115a:	2302      	movs	r3, #2
 800115c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	4618      	mov	r0, r3
 8001164:	f001 fd66 	bl	8002c34 <HAL_RCC_OscConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800116e:	f000 fbcf 	bl	8001910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001172:	230f      	movs	r3, #15
 8001174:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001176:	2302      	movs	r3, #2
 8001178:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800117e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001182:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	2102      	movs	r1, #2
 800118e:	4618      	mov	r0, r3
 8001190:	f001 fa06 	bl	80025a0 <HAL_RCC_ClockConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800119a:	f000 fbb9 	bl	8001910 <Error_Handler>
  }
}
 800119e:	bf00      	nop
 80011a0:	3750      	adds	r7, #80	@ 0x50
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40007000 	.word	0x40007000

080011b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b096      	sub	sp, #88	@ 0x58
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	611a      	str	r2, [r3, #16]
 80011de:	615a      	str	r2, [r3, #20]
 80011e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	2220      	movs	r2, #32
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f004 fdb5 	bl	8005d58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011ee:	4b3e      	ldr	r3, [pc, #248]	@ (80012e8 <MX_TIM1_Init+0x138>)
 80011f0:	4a3e      	ldr	r2, [pc, #248]	@ (80012ec <MX_TIM1_Init+0x13c>)
 80011f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80011f4:	4b3c      	ldr	r3, [pc, #240]	@ (80012e8 <MX_TIM1_Init+0x138>)
 80011f6:	2253      	movs	r2, #83	@ 0x53
 80011f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fa:	4b3b      	ldr	r3, [pc, #236]	@ (80012e8 <MX_TIM1_Init+0x138>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001200:	4b39      	ldr	r3, [pc, #228]	@ (80012e8 <MX_TIM1_Init+0x138>)
 8001202:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001206:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001208:	4b37      	ldr	r3, [pc, #220]	@ (80012e8 <MX_TIM1_Init+0x138>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800120e:	4b36      	ldr	r3, [pc, #216]	@ (80012e8 <MX_TIM1_Init+0x138>)
 8001210:	2200      	movs	r2, #0
 8001212:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001214:	4b34      	ldr	r3, [pc, #208]	@ (80012e8 <MX_TIM1_Init+0x138>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800121a:	4833      	ldr	r0, [pc, #204]	@ (80012e8 <MX_TIM1_Init+0x138>)
 800121c:	f001 ffa8 	bl	8003170 <HAL_TIM_Base_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001226:	f000 fb73 	bl	8001910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800122e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001230:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001234:	4619      	mov	r1, r3
 8001236:	482c      	ldr	r0, [pc, #176]	@ (80012e8 <MX_TIM1_Init+0x138>)
 8001238:	f002 fe0e 	bl	8003e58 <HAL_TIM_ConfigClockSource>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001242:	f000 fb65 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001246:	4828      	ldr	r0, [pc, #160]	@ (80012e8 <MX_TIM1_Init+0x138>)
 8001248:	f001 ffe1 	bl	800320e <HAL_TIM_PWM_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001252:	f000 fb5d 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800125e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001262:	4619      	mov	r1, r3
 8001264:	4820      	ldr	r0, [pc, #128]	@ (80012e8 <MX_TIM1_Init+0x138>)
 8001266:	f003 fb6b 	bl	8004940 <HAL_TIMEx_MasterConfigSynchronization>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001270:	f000 fb4e 	bl	8001910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001274:	2360      	movs	r3, #96	@ 0x60
 8001276:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001280:	2300      	movs	r3, #0
 8001282:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001290:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001294:	2200      	movs	r2, #0
 8001296:	4619      	mov	r1, r3
 8001298:	4813      	ldr	r0, [pc, #76]	@ (80012e8 <MX_TIM1_Init+0x138>)
 800129a:	f002 fd1b 	bl	8003cd4 <HAL_TIM_PWM_ConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80012a4:	f000 fb34 	bl	8001910 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	4619      	mov	r1, r3
 80012ca:	4807      	ldr	r0, [pc, #28]	@ (80012e8 <MX_TIM1_Init+0x138>)
 80012cc:	f003 fbb4 	bl	8004a38 <HAL_TIMEx_ConfigBreakDeadTime>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80012d6:	f000 fb1b 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012da:	4803      	ldr	r0, [pc, #12]	@ (80012e8 <MX_TIM1_Init+0x138>)
 80012dc:	f000 fbfa 	bl	8001ad4 <HAL_TIM_MspPostInit>

}
 80012e0:	bf00      	nop
 80012e2:	3758      	adds	r7, #88	@ 0x58
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2000008c 	.word	0x2000008c
 80012ec:	40010000 	.word	0x40010000

080012f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	@ 0x28
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	f107 0318 	add.w	r3, r7, #24
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800130e:	463b      	mov	r3, r7
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800131a:	4b2c      	ldr	r3, [pc, #176]	@ (80013cc <MX_TIM2_Init+0xdc>)
 800131c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001320:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840 - 1;
 8001322:	4b2a      	ldr	r3, [pc, #168]	@ (80013cc <MX_TIM2_Init+0xdc>)
 8001324:	f240 3247 	movw	r2, #839	@ 0x347
 8001328:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132a:	4b28      	ldr	r3, [pc, #160]	@ (80013cc <MX_TIM2_Init+0xdc>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001330:	4b26      	ldr	r3, [pc, #152]	@ (80013cc <MX_TIM2_Init+0xdc>)
 8001332:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001336:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001338:	4b24      	ldr	r3, [pc, #144]	@ (80013cc <MX_TIM2_Init+0xdc>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133e:	4b23      	ldr	r3, [pc, #140]	@ (80013cc <MX_TIM2_Init+0xdc>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001344:	4821      	ldr	r0, [pc, #132]	@ (80013cc <MX_TIM2_Init+0xdc>)
 8001346:	f001 ff13 	bl	8003170 <HAL_TIM_Base_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001350:	f000 fade 	bl	8001910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001354:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001358:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800135a:	f107 0318 	add.w	r3, r7, #24
 800135e:	4619      	mov	r1, r3
 8001360:	481a      	ldr	r0, [pc, #104]	@ (80013cc <MX_TIM2_Init+0xdc>)
 8001362:	f002 fd79 	bl	8003e58 <HAL_TIM_ConfigClockSource>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800136c:	f000 fad0 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001370:	4816      	ldr	r0, [pc, #88]	@ (80013cc <MX_TIM2_Init+0xdc>)
 8001372:	f002 f86d 	bl	8003450 <HAL_TIM_IC_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800137c:	f000 fac8 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	4619      	mov	r1, r3
 800138e:	480f      	ldr	r0, [pc, #60]	@ (80013cc <MX_TIM2_Init+0xdc>)
 8001390:	f003 fad6 	bl	8004940 <HAL_TIMEx_MasterConfigSynchronization>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800139a:	f000 fab9 	bl	8001910 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800139e:	2302      	movs	r3, #2
 80013a0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013a2:	2301      	movs	r3, #1
 80013a4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013ae:	463b      	mov	r3, r7
 80013b0:	2200      	movs	r2, #0
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	@ (80013cc <MX_TIM2_Init+0xdc>)
 80013b6:	f002 fbf1 	bl	8003b9c <HAL_TIM_IC_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80013c0:	f000 faa6 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	3728      	adds	r7, #40	@ 0x28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200000d4 	.word	0x200000d4

080013d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08c      	sub	sp, #48	@ 0x30
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	2224      	movs	r2, #36	@ 0x24
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f004 fcba 	bl	8005d58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013ec:	4b20      	ldr	r3, [pc, #128]	@ (8001470 <MX_TIM4_Init+0xa0>)
 80013ee:	4a21      	ldr	r2, [pc, #132]	@ (8001474 <MX_TIM4_Init+0xa4>)
 80013f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001470 <MX_TIM4_Init+0xa0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001470 <MX_TIM4_Init+0xa0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001470 <MX_TIM4_Init+0xa0>)
 8001400:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001404:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001406:	4b1a      	ldr	r3, [pc, #104]	@ (8001470 <MX_TIM4_Init+0xa0>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140c:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <MX_TIM4_Init+0xa0>)
 800140e:	2200      	movs	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001412:	2303      	movs	r3, #3
 8001414:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800141a:	2301      	movs	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001422:	230a      	movs	r3, #10
 8001424:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800142a:	2301      	movs	r3, #1
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001432:	230a      	movs	r3, #10
 8001434:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	4619      	mov	r1, r3
 800143c:	480c      	ldr	r0, [pc, #48]	@ (8001470 <MX_TIM4_Init+0xa0>)
 800143e:	f002 f989 	bl	8003754 <HAL_TIM_Encoder_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001448:	f000 fa62 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	4619      	mov	r1, r3
 8001458:	4805      	ldr	r0, [pc, #20]	@ (8001470 <MX_TIM4_Init+0xa0>)
 800145a:	f003 fa71 	bl	8004940 <HAL_TIMEx_MasterConfigSynchronization>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001464:	f000 fa54 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	3730      	adds	r7, #48	@ 0x30
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	2000011c 	.word	0x2000011c
 8001474:	40000800 	.word	0x40000800

08001478 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <MX_USART2_UART_Init+0x4c>)
 800147e:	4a12      	ldr	r2, [pc, #72]	@ (80014c8 <MX_USART2_UART_Init+0x50>)
 8001480:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <MX_USART2_UART_Init+0x4c>)
 8001484:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001488:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <MX_USART2_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <MX_USART2_UART_Init+0x4c>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <MX_USART2_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800149c:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <MX_USART2_UART_Init+0x4c>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a2:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <MX_USART2_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <MX_USART2_UART_Init+0x4c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ae:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <MX_USART2_UART_Init+0x4c>)
 80014b0:	f003 fb28 	bl	8004b04 <HAL_UART_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ba:	f000 fa29 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000164 	.word	0x20000164
 80014c8:	40004400 	.word	0x40004400

080014cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	@ 0x28
 80014d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b44      	ldr	r3, [pc, #272]	@ (80015f8 <MX_GPIO_Init+0x12c>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a43      	ldr	r2, [pc, #268]	@ (80015f8 <MX_GPIO_Init+0x12c>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b41      	ldr	r3, [pc, #260]	@ (80015f8 <MX_GPIO_Init+0x12c>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	4b3d      	ldr	r3, [pc, #244]	@ (80015f8 <MX_GPIO_Init+0x12c>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a3c      	ldr	r2, [pc, #240]	@ (80015f8 <MX_GPIO_Init+0x12c>)
 8001508:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b3a      	ldr	r3, [pc, #232]	@ (80015f8 <MX_GPIO_Init+0x12c>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	4b36      	ldr	r3, [pc, #216]	@ (80015f8 <MX_GPIO_Init+0x12c>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a35      	ldr	r2, [pc, #212]	@ (80015f8 <MX_GPIO_Init+0x12c>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b33      	ldr	r3, [pc, #204]	@ (80015f8 <MX_GPIO_Init+0x12c>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	4b2f      	ldr	r3, [pc, #188]	@ (80015f8 <MX_GPIO_Init+0x12c>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	4a2e      	ldr	r2, [pc, #184]	@ (80015f8 <MX_GPIO_Init+0x12c>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	6313      	str	r3, [r2, #48]	@ 0x30
 8001546:	4b2c      	ldr	r3, [pc, #176]	@ (80015f8 <MX_GPIO_Init+0x12c>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	2120      	movs	r1, #32
 8001556:	4829      	ldr	r0, [pc, #164]	@ (80015fc <MX_GPIO_Init+0x130>)
 8001558:	f000 fff0 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin encoder_button_Pin */
  GPIO_InitStruct.Pin = B1_Pin|encoder_button_Pin;
 800155c:	f242 0304 	movw	r3, #8196	@ 0x2004
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001562:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4619      	mov	r1, r3
 8001572:	4823      	ldr	r0, [pc, #140]	@ (8001600 <MX_GPIO_Init+0x134>)
 8001574:	f000 fe4e 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_parada_Pin btn_rotina_teste_Pin */
  GPIO_InitStruct.Pin = btn_parada_Pin|btn_rotina_teste_Pin;
 8001578:	2318      	movs	r3, #24
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800157c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	481c      	ldr	r0, [pc, #112]	@ (8001600 <MX_GPIO_Init+0x134>)
 800158e:	f000 fe41 	bl	8002214 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001592:	2320      	movs	r3, #32
 8001594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4814      	ldr	r0, [pc, #80]	@ (80015fc <MX_GPIO_Init+0x130>)
 80015aa:	f000 fe33 	bl	8002214 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	2008      	movs	r0, #8
 80015b4:	f000 fd65 	bl	8002082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80015b8:	2008      	movs	r0, #8
 80015ba:	f000 fd7e 	bl	80020ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	2009      	movs	r0, #9
 80015c4:	f000 fd5d 	bl	8002082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80015c8:	2009      	movs	r0, #9
 80015ca:	f000 fd76 	bl	80020ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	200a      	movs	r0, #10
 80015d4:	f000 fd55 	bl	8002082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80015d8:	200a      	movs	r0, #10
 80015da:	f000 fd6e 	bl	80020ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	2028      	movs	r0, #40	@ 0x28
 80015e4:	f000 fd4d 	bl	8002082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015e8:	2028      	movs	r0, #40	@ 0x28
 80015ea:	f000 fd66 	bl	80020ba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015ee:	bf00      	nop
 80015f0:	3728      	adds	r7, #40	@ 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020000 	.word	0x40020000
 8001600:	40020800 	.word	0x40020800

08001604 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	80fb      	strh	r3, [r7, #6]
	uint32_t tempo_atual = HAL_GetTick();
 800160e:	f000 fc2d 	bl	8001e6c <HAL_GetTick>
 8001612:	60f8      	str	r0, [r7, #12]
	static uint32_t tempo_anterior = 0;
	static uint32_t tempo_anterior_parada = 0;
	static uint32_t tempo_anterior_teste = 0;

	switch(GPIO_Pin) {
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	2b10      	cmp	r3, #16
 8001618:	d026      	beq.n	8001668 <HAL_GPIO_EXTI_Callback+0x64>
 800161a:	2b10      	cmp	r3, #16
 800161c:	dc34      	bgt.n	8001688 <HAL_GPIO_EXTI_Callback+0x84>
 800161e:	2b04      	cmp	r3, #4
 8001620:	d002      	beq.n	8001628 <HAL_GPIO_EXTI_Callback+0x24>
 8001622:	2b08      	cmp	r3, #8
 8001624:	d010      	beq.n	8001648 <HAL_GPIO_EXTI_Callback+0x44>
			teste_motor = true;
			tempo_anterior_teste = tempo_atual;
		}
		break;
	default:
		break;
 8001626:	e02f      	b.n	8001688 <HAL_GPIO_EXTI_Callback+0x84>
		if((tempo_atual - tempo_anterior) > 50) {
 8001628:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <HAL_GPIO_EXTI_Callback+0x9c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b32      	cmp	r3, #50	@ 0x32
 8001632:	d92b      	bls.n	800168c <HAL_GPIO_EXTI_Callback+0x88>
			parada = false;
 8001634:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
			teste_motor = false;
 800163a:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <HAL_GPIO_EXTI_Callback+0xa4>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
			tempo_anterior = tempo_atual;
 8001640:	4a17      	ldr	r2, [pc, #92]	@ (80016a0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6013      	str	r3, [r2, #0]
		break;
 8001646:	e021      	b.n	800168c <HAL_GPIO_EXTI_Callback+0x88>
		if((tempo_atual - tempo_anterior_parada) > 50) {
 8001648:	4b18      	ldr	r3, [pc, #96]	@ (80016ac <HAL_GPIO_EXTI_Callback+0xa8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b32      	cmp	r3, #50	@ 0x32
 8001652:	d91d      	bls.n	8001690 <HAL_GPIO_EXTI_Callback+0x8c>
			teste_motor = false;
 8001654:	4b14      	ldr	r3, [pc, #80]	@ (80016a8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
			parada = true;
 800165a:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <HAL_GPIO_EXTI_Callback+0xa0>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
			tempo_anterior_parada = tempo_atual;
 8001660:	4a12      	ldr	r2, [pc, #72]	@ (80016ac <HAL_GPIO_EXTI_Callback+0xa8>)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6013      	str	r3, [r2, #0]
		break;
 8001666:	e013      	b.n	8001690 <HAL_GPIO_EXTI_Callback+0x8c>
		if((tempo_atual - tempo_anterior_teste) > 50) {
 8001668:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <HAL_GPIO_EXTI_Callback+0xac>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b32      	cmp	r3, #50	@ 0x32
 8001672:	d90f      	bls.n	8001694 <HAL_GPIO_EXTI_Callback+0x90>
			parada = false;
 8001674:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
			teste_motor = true;
 800167a:	4b0b      	ldr	r3, [pc, #44]	@ (80016a8 <HAL_GPIO_EXTI_Callback+0xa4>)
 800167c:	2201      	movs	r2, #1
 800167e:	701a      	strb	r2, [r3, #0]
			tempo_anterior_teste = tempo_atual;
 8001680:	4a0b      	ldr	r2, [pc, #44]	@ (80016b0 <HAL_GPIO_EXTI_Callback+0xac>)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6013      	str	r3, [r2, #0]
		break;
 8001686:	e005      	b.n	8001694 <HAL_GPIO_EXTI_Callback+0x90>
		break;
 8001688:	bf00      	nop
 800168a:	e004      	b.n	8001696 <HAL_GPIO_EXTI_Callback+0x92>
		break;
 800168c:	bf00      	nop
 800168e:	e002      	b.n	8001696 <HAL_GPIO_EXTI_Callback+0x92>
		break;
 8001690:	bf00      	nop
 8001692:	e000      	b.n	8001696 <HAL_GPIO_EXTI_Callback+0x92>
		break;
 8001694:	bf00      	nop
	}
}
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200002e0 	.word	0x200002e0
 80016a4:	20000004 	.word	0x20000004
 80016a8:	200001c8 	.word	0x200001c8
 80016ac:	200002e4 	.word	0x200002e4
 80016b0:	200002e8 	.word	0x200002e8

080016b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	6078      	str	r0, [r7, #4]
	if(rx_uart != '\r' && rx_index < RX_BUFFER_SIZE - 1) {
 80016bc:	4b37      	ldr	r3, [pc, #220]	@ (800179c <HAL_UART_RxCpltCallback+0xe8>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b0d      	cmp	r3, #13
 80016c2:	d011      	beq.n	80016e8 <HAL_UART_RxCpltCallback+0x34>
 80016c4:	4b36      	ldr	r3, [pc, #216]	@ (80017a0 <HAL_UART_RxCpltCallback+0xec>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b62      	cmp	r3, #98	@ 0x62
 80016ca:	d80d      	bhi.n	80016e8 <HAL_UART_RxCpltCallback+0x34>
		rx_buffer[rx_index] = rx_uart;
 80016cc:	4b34      	ldr	r3, [pc, #208]	@ (80017a0 <HAL_UART_RxCpltCallback+0xec>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b32      	ldr	r3, [pc, #200]	@ (800179c <HAL_UART_RxCpltCallback+0xe8>)
 80016d4:	7819      	ldrb	r1, [r3, #0]
 80016d6:	4b33      	ldr	r3, [pc, #204]	@ (80017a4 <HAL_UART_RxCpltCallback+0xf0>)
 80016d8:	5499      	strb	r1, [r3, r2]
		rx_index++;
 80016da:	4b31      	ldr	r3, [pc, #196]	@ (80017a0 <HAL_UART_RxCpltCallback+0xec>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	3301      	adds	r3, #1
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4b2f      	ldr	r3, [pc, #188]	@ (80017a0 <HAL_UART_RxCpltCallback+0xec>)
 80016e4:	701a      	strb	r2, [r3, #0]
 80016e6:	e04f      	b.n	8001788 <HAL_UART_RxCpltCallback+0xd4>
	} else {
		rx_buffer[rx_index] = '\0';
 80016e8:	4b2d      	ldr	r3, [pc, #180]	@ (80017a0 <HAL_UART_RxCpltCallback+0xec>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b2d      	ldr	r3, [pc, #180]	@ (80017a4 <HAL_UART_RxCpltCallback+0xf0>)
 80016f0:	2100      	movs	r1, #0
 80016f2:	5499      	strb	r1, [r3, r2]
		rpm_select = atoi(rx_buffer);
 80016f4:	482b      	ldr	r0, [pc, #172]	@ (80017a4 <HAL_UART_RxCpltCallback+0xf0>)
 80016f6:	f004 fa71 	bl	8005bdc <atoi>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ff29 	bl	8000554 <__aeabi_i2d>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4928      	ldr	r1, [pc, #160]	@ (80017a8 <HAL_UART_RxCpltCallback+0xf4>)
 8001708:	e9c1 2300 	strd	r2, r3, [r1]
		snprintf(tx_buffer, TX_BUFFER_SIZE, "RPM selecionado = %lu\r\n", rpm_select);
 800170c:	4b26      	ldr	r3, [pc, #152]	@ (80017a8 <HAL_UART_RxCpltCallback+0xf4>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	e9cd 2300 	strd	r2, r3, [sp]
 8001716:	4a25      	ldr	r2, [pc, #148]	@ (80017ac <HAL_UART_RxCpltCallback+0xf8>)
 8001718:	2164      	movs	r1, #100	@ 0x64
 800171a:	4825      	ldr	r0, [pc, #148]	@ (80017b0 <HAL_UART_RxCpltCallback+0xfc>)
 800171c:	f004 fae6 	bl	8005cec <sniprintf>
		HAL_UART_Transmit(&huart2, tx_buffer, sizeof(tx_buffer), 100);
 8001720:	2364      	movs	r3, #100	@ 0x64
 8001722:	2264      	movs	r2, #100	@ 0x64
 8001724:	4922      	ldr	r1, [pc, #136]	@ (80017b0 <HAL_UART_RxCpltCallback+0xfc>)
 8001726:	4823      	ldr	r0, [pc, #140]	@ (80017b4 <HAL_UART_RxCpltCallback+0x100>)
 8001728:	f003 fa3c 	bl	8004ba4 <HAL_UART_Transmit>
		rx_index = 0;
 800172c:	4b1c      	ldr	r3, [pc, #112]	@ (80017a0 <HAL_UART_RxCpltCallback+0xec>)
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
		pwm = PID_control (rpm_select, rpm_real);
 8001732:	4b1d      	ldr	r3, [pc, #116]	@ (80017a8 <HAL_UART_RxCpltCallback+0xf4>)
 8001734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f7ff f9a6 	bl	8000a8c <__aeabi_d2f>
 8001740:	4604      	mov	r4, r0
 8001742:	4b1d      	ldr	r3, [pc, #116]	@ (80017b8 <HAL_UART_RxCpltCallback+0x104>)
 8001744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	f7ff f99e 	bl	8000a8c <__aeabi_d2f>
 8001750:	4603      	mov	r3, r0
 8001752:	ee00 3a90 	vmov	s1, r3
 8001756:	ee00 4a10 	vmov	s0, r4
 800175a:	f7ff fb7d 	bl	8000e58 <PID_control>
 800175e:	ee10 3a10 	vmov	r3, s0
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe ff08 	bl	8000578 <__aeabi_f2d>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4913      	ldr	r1, [pc, #76]	@ (80017bc <HAL_UART_RxCpltCallback+0x108>)
 800176e:	e9c1 2300 	strd	r2, r3, [r1]
		parada = false;
 8001772:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <HAL_UART_RxCpltCallback+0x10c>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
		teste_motor = false;
 8001778:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <HAL_UART_RxCpltCallback+0x110>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, RX_BUFFER_SIZE);
 800177e:	2264      	movs	r2, #100	@ 0x64
 8001780:	2100      	movs	r1, #0
 8001782:	4808      	ldr	r0, [pc, #32]	@ (80017a4 <HAL_UART_RxCpltCallback+0xf0>)
 8001784:	f004 fae8 	bl	8005d58 <memset>
	}

	HAL_UART_Receive_IT(&huart2, &rx_uart, 1);
 8001788:	2201      	movs	r2, #1
 800178a:	4904      	ldr	r1, [pc, #16]	@ (800179c <HAL_UART_RxCpltCallback+0xe8>)
 800178c:	4809      	ldr	r0, [pc, #36]	@ (80017b4 <HAL_UART_RxCpltCallback+0x100>)
 800178e:	f003 fa94 	bl	8004cba <HAL_UART_Receive_IT>
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bd90      	pop	{r4, r7, pc}
 800179a:	bf00      	nop
 800179c:	200001f0 	.word	0x200001f0
 80017a0:	20000258 	.word	0x20000258
 80017a4:	200001f4 	.word	0x200001f4
 80017a8:	200001b0 	.word	0x200001b0
 80017ac:	0800666c 	.word	0x0800666c
 80017b0:	2000025c 	.word	0x2000025c
 80017b4:	20000164 	.word	0x20000164
 80017b8:	200001e8 	.word	0x200001e8
 80017bc:	200001b8 	.word	0x200001b8
 80017c0:	20000004 	.word	0x20000004
 80017c4:	200001c8 	.word	0x200001c8

080017c8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && htim->Instance == TIM2) {
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7f1b      	ldrb	r3, [r3, #28]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d157      	bne.n	8001888 <HAL_TIM_IC_CaptureCallback+0xc0>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017e0:	d152      	bne.n	8001888 <HAL_TIM_IC_CaptureCallback+0xc0>
		if(is_captured == false) {
 80017e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001890 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	f083 0301 	eor.w	r3, r3, #1
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00a      	beq.n	8001806 <HAL_TIM_IC_CaptureCallback+0x3e>
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80017f0:	2100      	movs	r1, #0
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f002 fbf8 	bl	8003fe8 <HAL_TIM_ReadCapturedValue>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4a26      	ldr	r2, [pc, #152]	@ (8001894 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80017fc:	6013      	str	r3, [r2, #0]
			is_captured = true;
 80017fe:	4b24      	ldr	r3, [pc, #144]	@ (8001890 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
			frequencia = ref_clock/difference;
			__HAL_TIM_SET_COUNTER(htim, 0);
			is_captured = false;
		}
	}
}
 8001804:	e040      	b.n	8001888 <HAL_TIM_IC_CaptureCallback+0xc0>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001806:	2100      	movs	r1, #0
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f002 fbed 	bl	8003fe8 <HAL_TIM_ReadCapturedValue>
 800180e:	4603      	mov	r3, r0
 8001810:	4a21      	ldr	r2, [pc, #132]	@ (8001898 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001812:	6013      	str	r3, [r2, #0]
			if(IC_Val2 > IC_Val1) {
 8001814:	4b20      	ldr	r3, [pc, #128]	@ (8001898 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b1e      	ldr	r3, [pc, #120]	@ (8001894 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d907      	bls.n	8001830 <HAL_TIM_IC_CaptureCallback+0x68>
				difference = IC_Val2 - IC_Val1;
 8001820:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	4a1c      	ldr	r2, [pc, #112]	@ (800189c <HAL_TIM_IC_CaptureCallback+0xd4>)
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e00d      	b.n	800184c <HAL_TIM_IC_CaptureCallback+0x84>
			else if (IC_Val2 < IC_Val1) {
 8001830:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b17      	ldr	r3, [pc, #92]	@ (8001894 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d207      	bcs.n	800184c <HAL_TIM_IC_CaptureCallback+0x84>
				difference = (0xffffffff - IC_Val1) + IC_Val2;
 800183c:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	3b01      	subs	r3, #1
 8001848:	4a14      	ldr	r2, [pc, #80]	@ (800189c <HAL_TIM_IC_CaptureCallback+0xd4>)
 800184a:	6013      	str	r3, [r2, #0]
			ref_clock = TIMCLOCK/PRESCALER;
 800184c:	4b14      	ldr	r3, [pc, #80]	@ (80018a0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 800184e:	4a15      	ldr	r2, [pc, #84]	@ (80018a4 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001850:	601a      	str	r2, [r3, #0]
			frequencia = ref_clock/difference;
 8001852:	4b13      	ldr	r3, [pc, #76]	@ (80018a0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001854:	ed93 7a00 	vldr	s14, [r3]
 8001858:	4b10      	ldr	r3, [pc, #64]	@ (800189c <HAL_TIM_IC_CaptureCallback+0xd4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001864:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001868:	ee16 0a90 	vmov	r0, s13
 800186c:	f7fe fe84 	bl	8000578 <__aeabi_f2d>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	490c      	ldr	r1, [pc, #48]	@ (80018a8 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001876:	e9c1 2300 	strd	r2, r3, [r1]
			__HAL_TIM_SET_COUNTER(htim, 0);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	@ 0x24
			is_captured = false;
 8001882:	4b03      	ldr	r3, [pc, #12]	@ (8001890 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	200001c9 	.word	0x200001c9
 8001894:	200001cc 	.word	0x200001cc
 8001898:	200001d0 	.word	0x200001d0
 800189c:	200001d4 	.word	0x200001d4
 80018a0:	200001d8 	.word	0x200001d8
 80018a4:	47c35000 	.word	0x47c35000
 80018a8:	200001e0 	.word	0x200001e0

080018ac <Encoder_CheckChange>:

void Encoder_CheckChange(TIM_HandleTypeDef *htim) {
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	count = encoder_position/2;
 80018b4:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <Encoder_CheckChange+0x54>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	085b      	lsrs	r3, r3, #1
 80018ba:	4a12      	ldr	r2, [pc, #72]	@ (8001904 <Encoder_CheckChange+0x58>)
 80018bc:	6013      	str	r3, [r2, #0]
	if (count > last_count) {
 80018be:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <Encoder_CheckChange+0x58>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b11      	ldr	r3, [pc, #68]	@ (8001908 <Encoder_CheckChange+0x5c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d905      	bls.n	80018d6 <Encoder_CheckChange+0x2a>
       rpm_selection++;
 80018ca:	4b10      	ldr	r3, [pc, #64]	@ (800190c <Encoder_CheckChange+0x60>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	4a0e      	ldr	r2, [pc, #56]	@ (800190c <Encoder_CheckChange+0x60>)
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	e00a      	b.n	80018ec <Encoder_CheckChange+0x40>
    } else if (count < last_count) {
 80018d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <Encoder_CheckChange+0x58>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <Encoder_CheckChange+0x5c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d204      	bcs.n	80018ec <Encoder_CheckChange+0x40>
       rpm_selection--;
 80018e2:	4b0a      	ldr	r3, [pc, #40]	@ (800190c <Encoder_CheckChange+0x60>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	4a08      	ldr	r2, [pc, #32]	@ (800190c <Encoder_CheckChange+0x60>)
 80018ea:	6013      	str	r3, [r2, #0]
    }
    last_count = count;
 80018ec:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <Encoder_CheckChange+0x58>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a05      	ldr	r2, [pc, #20]	@ (8001908 <Encoder_CheckChange+0x5c>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	200001ac 	.word	0x200001ac
 8001904:	200001c4 	.word	0x200001c4
 8001908:	200001c0 	.word	0x200001c0
 800190c:	20000000 	.word	0x20000000

08001910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001914:	b672      	cpsid	i
}
 8001916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <Error_Handler+0x8>

0800191c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <HAL_MspInit+0x4c>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192a:	4a0f      	ldr	r2, [pc, #60]	@ (8001968 <HAL_MspInit+0x4c>)
 800192c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001930:	6453      	str	r3, [r2, #68]	@ 0x44
 8001932:	4b0d      	ldr	r3, [pc, #52]	@ (8001968 <HAL_MspInit+0x4c>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <HAL_MspInit+0x4c>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	4a08      	ldr	r2, [pc, #32]	@ (8001968 <HAL_MspInit+0x4c>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800194c:	6413      	str	r3, [r2, #64]	@ 0x40
 800194e:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_MspInit+0x4c>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800195a:	2007      	movs	r0, #7
 800195c:	f000 fb86 	bl	800206c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40023800 	.word	0x40023800

0800196c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	@ 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a27      	ldr	r2, [pc, #156]	@ (8001a28 <HAL_TIM_Base_MspInit+0xbc>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d10e      	bne.n	80019ac <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	4b26      	ldr	r3, [pc, #152]	@ (8001a2c <HAL_TIM_Base_MspInit+0xc0>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001996:	4a25      	ldr	r2, [pc, #148]	@ (8001a2c <HAL_TIM_Base_MspInit+0xc0>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6453      	str	r3, [r2, #68]	@ 0x44
 800199e:	4b23      	ldr	r3, [pc, #140]	@ (8001a2c <HAL_TIM_Base_MspInit+0xc0>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019aa:	e038      	b.n	8001a1e <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019b4:	d133      	bne.n	8001a1e <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b1c      	ldr	r3, [pc, #112]	@ (8001a2c <HAL_TIM_Base_MspInit+0xc0>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	4a1b      	ldr	r2, [pc, #108]	@ (8001a2c <HAL_TIM_Base_MspInit+0xc0>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c6:	4b19      	ldr	r3, [pc, #100]	@ (8001a2c <HAL_TIM_Base_MspInit+0xc0>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <HAL_TIM_Base_MspInit+0xc0>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	4a14      	ldr	r2, [pc, #80]	@ (8001a2c <HAL_TIM_Base_MspInit+0xc0>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e2:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <HAL_TIM_Base_MspInit+0xc0>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019ee:	2301      	movs	r3, #1
 80019f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019fe:	2301      	movs	r3, #1
 8001a00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	4809      	ldr	r0, [pc, #36]	@ (8001a30 <HAL_TIM_Base_MspInit+0xc4>)
 8001a0a:	f000 fc03 	bl	8002214 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	201c      	movs	r0, #28
 8001a14:	f000 fb35 	bl	8002082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a18:	201c      	movs	r0, #28
 8001a1a:	f000 fb4e 	bl	80020ba <HAL_NVIC_EnableIRQ>
}
 8001a1e:	bf00      	nop
 8001a20:	3728      	adds	r7, #40	@ 0x28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40010000 	.word	0x40010000
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40020000 	.word	0x40020000

08001a34 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	@ 0x28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a1d      	ldr	r2, [pc, #116]	@ (8001ac8 <HAL_TIM_Encoder_MspInit+0x94>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d133      	bne.n	8001abe <HAL_TIM_Encoder_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001acc <HAL_TIM_Encoder_MspInit+0x98>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5e:	4a1b      	ldr	r2, [pc, #108]	@ (8001acc <HAL_TIM_Encoder_MspInit+0x98>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a66:	4b19      	ldr	r3, [pc, #100]	@ (8001acc <HAL_TIM_Encoder_MspInit+0x98>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <HAL_TIM_Encoder_MspInit+0x98>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	4a14      	ldr	r2, [pc, #80]	@ (8001acc <HAL_TIM_Encoder_MspInit+0x98>)
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a82:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <HAL_TIM_Encoder_MspInit+0x98>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a8e:	23c0      	movs	r3, #192	@ 0xc0
 8001a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4809      	ldr	r0, [pc, #36]	@ (8001ad0 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001aaa:	f000 fbb3 	bl	8002214 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	201e      	movs	r0, #30
 8001ab4:	f000 fae5 	bl	8002082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ab8:	201e      	movs	r0, #30
 8001aba:	f000 fafe 	bl	80020ba <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001abe:	bf00      	nop
 8001ac0:	3728      	adds	r7, #40	@ 0x28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40000800 	.word	0x40000800
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40020400 	.word	0x40020400

08001ad4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a12      	ldr	r2, [pc, #72]	@ (8001b3c <HAL_TIM_MspPostInit+0x68>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d11e      	bne.n	8001b34 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <HAL_TIM_MspPostInit+0x6c>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	4a10      	ldr	r2, [pc, #64]	@ (8001b40 <HAL_TIM_MspPostInit+0x6c>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b06:	4b0e      	ldr	r3, [pc, #56]	@ (8001b40 <HAL_TIM_MspPostInit+0x6c>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b24:	2301      	movs	r3, #1
 8001b26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4805      	ldr	r0, [pc, #20]	@ (8001b44 <HAL_TIM_MspPostInit+0x70>)
 8001b30:	f000 fb70 	bl	8002214 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b34:	bf00      	nop
 8001b36:	3720      	adds	r7, #32
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020000 	.word	0x40020000

08001b48 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	@ 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a1d      	ldr	r2, [pc, #116]	@ (8001bdc <HAL_UART_MspInit+0x94>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d133      	bne.n	8001bd2 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001be0 <HAL_UART_MspInit+0x98>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	4a1b      	ldr	r2, [pc, #108]	@ (8001be0 <HAL_UART_MspInit+0x98>)
 8001b74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7a:	4b19      	ldr	r3, [pc, #100]	@ (8001be0 <HAL_UART_MspInit+0x98>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b15      	ldr	r3, [pc, #84]	@ (8001be0 <HAL_UART_MspInit+0x98>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	4a14      	ldr	r2, [pc, #80]	@ (8001be0 <HAL_UART_MspInit+0x98>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b96:	4b12      	ldr	r3, [pc, #72]	@ (8001be0 <HAL_UART_MspInit+0x98>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bb2:	2307      	movs	r3, #7
 8001bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4809      	ldr	r0, [pc, #36]	@ (8001be4 <HAL_UART_MspInit+0x9c>)
 8001bbe:	f000 fb29 	bl	8002214 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2026      	movs	r0, #38	@ 0x26
 8001bc8:	f000 fa5b 	bl	8002082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bcc:	2026      	movs	r0, #38	@ 0x26
 8001bce:	f000 fa74 	bl	80020ba <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	@ 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40004400 	.word	0x40004400
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40020000 	.word	0x40020000

08001be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <NMI_Handler+0x4>

08001bf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <HardFault_Handler+0x4>

08001bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <MemManage_Handler+0x4>

08001c00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <BusFault_Handler+0x4>

08001c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <UsageFault_Handler+0x4>

08001c10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c3e:	f000 f901 	bl	8001e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(encoder_button_Pin);
 8001c4a:	2004      	movs	r0, #4
 8001c4c:	f000 fc90 	bl	8002570 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(btn_parada_Pin);
 8001c58:	2008      	movs	r0, #8
 8001c5a:	f000 fc89 	bl	8002570 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(btn_rotina_teste_Pin);
 8001c66:	2010      	movs	r0, #16
 8001c68:	f000 fc82 	bl	8002570 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c74:	4802      	ldr	r0, [pc, #8]	@ (8001c80 <TIM2_IRQHandler+0x10>)
 8001c76:	f001 fea1 	bl	80039bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	200000d4 	.word	0x200000d4

08001c84 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c88:	4802      	ldr	r0, [pc, #8]	@ (8001c94 <TIM4_IRQHandler+0x10>)
 8001c8a:	f001 fe97 	bl	80039bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000011c 	.word	0x2000011c

08001c98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c9c:	4802      	ldr	r0, [pc, #8]	@ (8001ca8 <USART2_IRQHandler+0x10>)
 8001c9e:	f003 f831 	bl	8004d04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000164 	.word	0x20000164

08001cac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001cb0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001cb4:	f000 fc5c 	bl	8002570 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc4:	4a14      	ldr	r2, [pc, #80]	@ (8001d18 <_sbrk+0x5c>)
 8001cc6:	4b15      	ldr	r3, [pc, #84]	@ (8001d1c <_sbrk+0x60>)
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd0:	4b13      	ldr	r3, [pc, #76]	@ (8001d20 <_sbrk+0x64>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	@ (8001d20 <_sbrk+0x64>)
 8001cda:	4a12      	ldr	r2, [pc, #72]	@ (8001d24 <_sbrk+0x68>)
 8001cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cde:	4b10      	ldr	r3, [pc, #64]	@ (8001d20 <_sbrk+0x64>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d207      	bcs.n	8001cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cec:	f004 f83c 	bl	8005d68 <__errno>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cfa:	e009      	b.n	8001d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cfc:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <_sbrk+0x64>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d02:	4b07      	ldr	r3, [pc, #28]	@ (8001d20 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	4a05      	ldr	r2, [pc, #20]	@ (8001d20 <_sbrk+0x64>)
 8001d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20020000 	.word	0x20020000
 8001d1c:	00000400 	.word	0x00000400
 8001d20:	200002ec 	.word	0x200002ec
 8001d24:	20000440 	.word	0x20000440

08001d28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d2c:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <SystemInit+0x20>)
 8001d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d32:	4a05      	ldr	r2, [pc, #20]	@ (8001d48 <SystemInit+0x20>)
 8001d34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d50:	f7ff ffea 	bl	8001d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d54:	480c      	ldr	r0, [pc, #48]	@ (8001d88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d56:	490d      	ldr	r1, [pc, #52]	@ (8001d8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d58:	4a0d      	ldr	r2, [pc, #52]	@ (8001d90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d5c:	e002      	b.n	8001d64 <LoopCopyDataInit>

08001d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d62:	3304      	adds	r3, #4

08001d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d68:	d3f9      	bcc.n	8001d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d70:	e001      	b.n	8001d76 <LoopFillZerobss>

08001d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d74:	3204      	adds	r2, #4

08001d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d78:	d3fb      	bcc.n	8001d72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d7a:	f003 fffb 	bl	8005d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d7e:	f7ff f90f 	bl	8000fa0 <main>
  bx  lr    
 8001d82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d8c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001d90:	080067e0 	.word	0x080067e0
  ldr r2, =_sbss
 8001d94:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001d98:	2000043c 	.word	0x2000043c

08001d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d9c:	e7fe      	b.n	8001d9c <ADC_IRQHandler>
	...

08001da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001da4:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <HAL_Init+0x40>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0d      	ldr	r2, [pc, #52]	@ (8001de0 <HAL_Init+0x40>)
 8001daa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001db0:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <HAL_Init+0x40>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <HAL_Init+0x40>)
 8001db6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dbc:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <HAL_Init+0x40>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a07      	ldr	r2, [pc, #28]	@ (8001de0 <HAL_Init+0x40>)
 8001dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc8:	2003      	movs	r0, #3
 8001dca:	f000 f94f 	bl	800206c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f000 f808 	bl	8001de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd4:	f7ff fda2 	bl	800191c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40023c00 	.word	0x40023c00

08001de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dec:	4b12      	ldr	r3, [pc, #72]	@ (8001e38 <HAL_InitTick+0x54>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b12      	ldr	r3, [pc, #72]	@ (8001e3c <HAL_InitTick+0x58>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	4619      	mov	r1, r3
 8001df6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 f967 	bl	80020d6 <HAL_SYSTICK_Config>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e00e      	b.n	8001e30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b0f      	cmp	r3, #15
 8001e16:	d80a      	bhi.n	8001e2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e20:	f000 f92f 	bl	8002082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e24:	4a06      	ldr	r2, [pc, #24]	@ (8001e40 <HAL_InitTick+0x5c>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e000      	b.n	8001e30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000014 	.word	0x20000014
 8001e3c:	2000001c 	.word	0x2000001c
 8001e40:	20000018 	.word	0x20000018

08001e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e48:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <HAL_IncTick+0x20>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <HAL_IncTick+0x24>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4413      	add	r3, r2
 8001e54:	4a04      	ldr	r2, [pc, #16]	@ (8001e68 <HAL_IncTick+0x24>)
 8001e56:	6013      	str	r3, [r2, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	2000001c 	.word	0x2000001c
 8001e68:	200002f0 	.word	0x200002f0

08001e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e70:	4b03      	ldr	r3, [pc, #12]	@ (8001e80 <HAL_GetTick+0x14>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	200002f0 	.word	0x200002f0

08001e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e8c:	f7ff ffee 	bl	8001e6c <HAL_GetTick>
 8001e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e9c:	d005      	beq.n	8001eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec8 <HAL_Delay+0x44>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eaa:	bf00      	nop
 8001eac:	f7ff ffde 	bl	8001e6c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d8f7      	bhi.n	8001eac <HAL_Delay+0x28>
  {
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	2000001c 	.word	0x2000001c

08001ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001edc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efe:	4a04      	ldr	r2, [pc, #16]	@ (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	60d3      	str	r3, [r2, #12]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f18:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <__NVIC_GetPriorityGrouping+0x18>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	f003 0307 	and.w	r3, r3, #7
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	db0b      	blt.n	8001f5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	f003 021f 	and.w	r2, r3, #31
 8001f48:	4907      	ldr	r1, [pc, #28]	@ (8001f68 <__NVIC_EnableIRQ+0x38>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	2001      	movs	r0, #1
 8001f52:	fa00 f202 	lsl.w	r2, r0, r2
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000e100 	.word	0xe000e100

08001f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	db0a      	blt.n	8001f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	490c      	ldr	r1, [pc, #48]	@ (8001fb8 <__NVIC_SetPriority+0x4c>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	0112      	lsls	r2, r2, #4
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f94:	e00a      	b.n	8001fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4908      	ldr	r1, [pc, #32]	@ (8001fbc <__NVIC_SetPriority+0x50>)
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	3b04      	subs	r3, #4
 8001fa4:	0112      	lsls	r2, r2, #4
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	440b      	add	r3, r1
 8001faa:	761a      	strb	r2, [r3, #24]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000e100 	.word	0xe000e100
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	@ 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f1c3 0307 	rsb	r3, r3, #7
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	bf28      	it	cs
 8001fde:	2304      	movcs	r3, #4
 8001fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d902      	bls.n	8001ff0 <NVIC_EncodePriority+0x30>
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3b03      	subs	r3, #3
 8001fee:	e000      	b.n	8001ff2 <NVIC_EncodePriority+0x32>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	401a      	ands	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002008:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	43d9      	mvns	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	4313      	orrs	r3, r2
         );
}
 800201a:	4618      	mov	r0, r3
 800201c:	3724      	adds	r7, #36	@ 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002038:	d301      	bcc.n	800203e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800203a:	2301      	movs	r3, #1
 800203c:	e00f      	b.n	800205e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800203e:	4a0a      	ldr	r2, [pc, #40]	@ (8002068 <SysTick_Config+0x40>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3b01      	subs	r3, #1
 8002044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002046:	210f      	movs	r1, #15
 8002048:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800204c:	f7ff ff8e 	bl	8001f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002050:	4b05      	ldr	r3, [pc, #20]	@ (8002068 <SysTick_Config+0x40>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002056:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <SysTick_Config+0x40>)
 8002058:	2207      	movs	r2, #7
 800205a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	e000e010 	.word	0xe000e010

0800206c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ff29 	bl	8001ecc <__NVIC_SetPriorityGrouping>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
 800208e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002094:	f7ff ff3e 	bl	8001f14 <__NVIC_GetPriorityGrouping>
 8002098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	6978      	ldr	r0, [r7, #20]
 80020a0:	f7ff ff8e 	bl	8001fc0 <NVIC_EncodePriority>
 80020a4:	4602      	mov	r2, r0
 80020a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff5d 	bl	8001f6c <__NVIC_SetPriority>
}
 80020b2:	bf00      	nop
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	4603      	mov	r3, r0
 80020c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff31 	bl	8001f30 <__NVIC_EnableIRQ>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff ffa2 	bl	8002028 <SysTick_Config>
 80020e4:	4603      	mov	r3, r0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b084      	sub	sp, #16
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020fc:	f7ff feb6 	bl	8001e6c <HAL_GetTick>
 8002100:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d008      	beq.n	8002120 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2280      	movs	r2, #128	@ 0x80
 8002112:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e052      	b.n	80021c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0216 	bic.w	r2, r2, #22
 800212e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800213e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	2b00      	cmp	r3, #0
 8002146:	d103      	bne.n	8002150 <HAL_DMA_Abort+0x62>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800214c:	2b00      	cmp	r3, #0
 800214e:	d007      	beq.n	8002160 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0208 	bic.w	r2, r2, #8
 800215e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0201 	bic.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002170:	e013      	b.n	800219a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002172:	f7ff fe7b 	bl	8001e6c <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b05      	cmp	r3, #5
 800217e:	d90c      	bls.n	800219a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2220      	movs	r2, #32
 8002184:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2203      	movs	r2, #3
 800218a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e015      	b.n	80021c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1e4      	bne.n	8002172 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ac:	223f      	movs	r2, #63	@ 0x3f
 80021ae:	409a      	lsls	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d004      	beq.n	80021ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2280      	movs	r2, #128	@ 0x80
 80021e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e00c      	b.n	8002206 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2205      	movs	r2, #5
 80021f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0201 	bic.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	@ 0x24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002226:	2300      	movs	r3, #0
 8002228:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	e165      	b.n	80024fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002230:	2201      	movs	r2, #1
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	429a      	cmp	r2, r3
 800224a:	f040 8154 	bne.w	80024f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d005      	beq.n	8002266 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002262:	2b02      	cmp	r3, #2
 8002264:	d130      	bne.n	80022c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	2203      	movs	r2, #3
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800229c:	2201      	movs	r2, #1
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 0201 	and.w	r2, r3, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d017      	beq.n	8002304 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2203      	movs	r2, #3
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d123      	bne.n	8002358 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	08da      	lsrs	r2, r3, #3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3208      	adds	r2, #8
 8002318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	220f      	movs	r2, #15
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	08da      	lsrs	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3208      	adds	r2, #8
 8002352:	69b9      	ldr	r1, [r7, #24]
 8002354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2203      	movs	r2, #3
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0203 	and.w	r2, r3, #3
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80ae 	beq.w	80024f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	4b5d      	ldr	r3, [pc, #372]	@ (8002514 <HAL_GPIO_Init+0x300>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a2:	4a5c      	ldr	r2, [pc, #368]	@ (8002514 <HAL_GPIO_Init+0x300>)
 80023a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023aa:	4b5a      	ldr	r3, [pc, #360]	@ (8002514 <HAL_GPIO_Init+0x300>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023b6:	4a58      	ldr	r2, [pc, #352]	@ (8002518 <HAL_GPIO_Init+0x304>)
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	3302      	adds	r3, #2
 80023be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	220f      	movs	r2, #15
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a4f      	ldr	r2, [pc, #316]	@ (800251c <HAL_GPIO_Init+0x308>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d025      	beq.n	800242e <HAL_GPIO_Init+0x21a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a4e      	ldr	r2, [pc, #312]	@ (8002520 <HAL_GPIO_Init+0x30c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d01f      	beq.n	800242a <HAL_GPIO_Init+0x216>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4d      	ldr	r2, [pc, #308]	@ (8002524 <HAL_GPIO_Init+0x310>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d019      	beq.n	8002426 <HAL_GPIO_Init+0x212>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002528 <HAL_GPIO_Init+0x314>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d013      	beq.n	8002422 <HAL_GPIO_Init+0x20e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a4b      	ldr	r2, [pc, #300]	@ (800252c <HAL_GPIO_Init+0x318>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d00d      	beq.n	800241e <HAL_GPIO_Init+0x20a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a4a      	ldr	r2, [pc, #296]	@ (8002530 <HAL_GPIO_Init+0x31c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d007      	beq.n	800241a <HAL_GPIO_Init+0x206>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a49      	ldr	r2, [pc, #292]	@ (8002534 <HAL_GPIO_Init+0x320>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d101      	bne.n	8002416 <HAL_GPIO_Init+0x202>
 8002412:	2306      	movs	r3, #6
 8002414:	e00c      	b.n	8002430 <HAL_GPIO_Init+0x21c>
 8002416:	2307      	movs	r3, #7
 8002418:	e00a      	b.n	8002430 <HAL_GPIO_Init+0x21c>
 800241a:	2305      	movs	r3, #5
 800241c:	e008      	b.n	8002430 <HAL_GPIO_Init+0x21c>
 800241e:	2304      	movs	r3, #4
 8002420:	e006      	b.n	8002430 <HAL_GPIO_Init+0x21c>
 8002422:	2303      	movs	r3, #3
 8002424:	e004      	b.n	8002430 <HAL_GPIO_Init+0x21c>
 8002426:	2302      	movs	r3, #2
 8002428:	e002      	b.n	8002430 <HAL_GPIO_Init+0x21c>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <HAL_GPIO_Init+0x21c>
 800242e:	2300      	movs	r3, #0
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	f002 0203 	and.w	r2, r2, #3
 8002436:	0092      	lsls	r2, r2, #2
 8002438:	4093      	lsls	r3, r2
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002440:	4935      	ldr	r1, [pc, #212]	@ (8002518 <HAL_GPIO_Init+0x304>)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	089b      	lsrs	r3, r3, #2
 8002446:	3302      	adds	r3, #2
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800244e:	4b3a      	ldr	r3, [pc, #232]	@ (8002538 <HAL_GPIO_Init+0x324>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002472:	4a31      	ldr	r2, [pc, #196]	@ (8002538 <HAL_GPIO_Init+0x324>)
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002478:	4b2f      	ldr	r3, [pc, #188]	@ (8002538 <HAL_GPIO_Init+0x324>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800249c:	4a26      	ldr	r2, [pc, #152]	@ (8002538 <HAL_GPIO_Init+0x324>)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024a2:	4b25      	ldr	r3, [pc, #148]	@ (8002538 <HAL_GPIO_Init+0x324>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002538 <HAL_GPIO_Init+0x324>)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002538 <HAL_GPIO_Init+0x324>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024f0:	4a11      	ldr	r2, [pc, #68]	@ (8002538 <HAL_GPIO_Init+0x324>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3301      	adds	r3, #1
 80024fa:	61fb      	str	r3, [r7, #28]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	2b0f      	cmp	r3, #15
 8002500:	f67f ae96 	bls.w	8002230 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3724      	adds	r7, #36	@ 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800
 8002518:	40013800 	.word	0x40013800
 800251c:	40020000 	.word	0x40020000
 8002520:	40020400 	.word	0x40020400
 8002524:	40020800 	.word	0x40020800
 8002528:	40020c00 	.word	0x40020c00
 800252c:	40021000 	.word	0x40021000
 8002530:	40021400 	.word	0x40021400
 8002534:	40021800 	.word	0x40021800
 8002538:	40013c00 	.word	0x40013c00

0800253c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	807b      	strh	r3, [r7, #2]
 8002548:	4613      	mov	r3, r2
 800254a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800254c:	787b      	ldrb	r3, [r7, #1]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002552:	887a      	ldrh	r2, [r7, #2]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002558:	e003      	b.n	8002562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800255a:	887b      	ldrh	r3, [r7, #2]
 800255c:	041a      	lsls	r2, r3, #16
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	619a      	str	r2, [r3, #24]
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800257a:	4b08      	ldr	r3, [pc, #32]	@ (800259c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	4013      	ands	r3, r2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d006      	beq.n	8002594 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002586:	4a05      	ldr	r2, [pc, #20]	@ (800259c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002588:	88fb      	ldrh	r3, [r7, #6]
 800258a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800258c:	88fb      	ldrh	r3, [r7, #6]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff f838 	bl	8001604 <HAL_GPIO_EXTI_Callback>
  }
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40013c00 	.word	0x40013c00

080025a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0cc      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b4:	4b68      	ldr	r3, [pc, #416]	@ (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d90c      	bls.n	80025dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b65      	ldr	r3, [pc, #404]	@ (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ca:	4b63      	ldr	r3, [pc, #396]	@ (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0b8      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d020      	beq.n	800262a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f4:	4b59      	ldr	r3, [pc, #356]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	4a58      	ldr	r2, [pc, #352]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800260c:	4b53      	ldr	r3, [pc, #332]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4a52      	ldr	r2, [pc, #328]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002618:	4b50      	ldr	r3, [pc, #320]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	494d      	ldr	r1, [pc, #308]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	4313      	orrs	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d044      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d107      	bne.n	800264e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263e:	4b47      	ldr	r3, [pc, #284]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d119      	bne.n	800267e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e07f      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d003      	beq.n	800265e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800265a:	2b03      	cmp	r3, #3
 800265c:	d107      	bne.n	800266e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265e:	4b3f      	ldr	r3, [pc, #252]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d109      	bne.n	800267e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e06f      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266e:	4b3b      	ldr	r3, [pc, #236]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e067      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800267e:	4b37      	ldr	r3, [pc, #220]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f023 0203 	bic.w	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4934      	ldr	r1, [pc, #208]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	4313      	orrs	r3, r2
 800268e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002690:	f7ff fbec 	bl	8001e6c <HAL_GetTick>
 8002694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002696:	e00a      	b.n	80026ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002698:	f7ff fbe8 	bl	8001e6c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e04f      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ae:	4b2b      	ldr	r3, [pc, #172]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 020c 	and.w	r2, r3, #12
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	429a      	cmp	r2, r3
 80026be:	d1eb      	bne.n	8002698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026c0:	4b25      	ldr	r3, [pc, #148]	@ (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d20c      	bcs.n	80026e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ce:	4b22      	ldr	r3, [pc, #136]	@ (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	4b20      	ldr	r3, [pc, #128]	@ (8002758 <HAL_RCC_ClockConfig+0x1b8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e032      	b.n	800274e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f4:	4b19      	ldr	r3, [pc, #100]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4916      	ldr	r1, [pc, #88]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	4313      	orrs	r3, r2
 8002704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d009      	beq.n	8002726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002712:	4b12      	ldr	r3, [pc, #72]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	490e      	ldr	r1, [pc, #56]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	4313      	orrs	r3, r2
 8002724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002726:	f000 f855 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 800272a:	4602      	mov	r2, r0
 800272c:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	490a      	ldr	r1, [pc, #40]	@ (8002760 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	5ccb      	ldrb	r3, [r1, r3]
 800273a:	fa22 f303 	lsr.w	r3, r2, r3
 800273e:	4a09      	ldr	r2, [pc, #36]	@ (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002742:	4b09      	ldr	r3, [pc, #36]	@ (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fb4c 	bl	8001de4 <HAL_InitTick>

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40023c00 	.word	0x40023c00
 800275c:	40023800 	.word	0x40023800
 8002760:	08006684 	.word	0x08006684
 8002764:	20000014 	.word	0x20000014
 8002768:	20000018 	.word	0x20000018

0800276c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002770:	4b03      	ldr	r3, [pc, #12]	@ (8002780 <HAL_RCC_GetHCLKFreq+0x14>)
 8002772:	681b      	ldr	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20000014 	.word	0x20000014

08002784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002788:	f7ff fff0 	bl	800276c <HAL_RCC_GetHCLKFreq>
 800278c:	4602      	mov	r2, r0
 800278e:	4b05      	ldr	r3, [pc, #20]	@ (80027a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	0a9b      	lsrs	r3, r3, #10
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	4903      	ldr	r1, [pc, #12]	@ (80027a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800279a:	5ccb      	ldrb	r3, [r1, r3]
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40023800 	.word	0x40023800
 80027a8:	08006694 	.word	0x08006694

080027ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027b0:	f7ff ffdc 	bl	800276c <HAL_RCC_GetHCLKFreq>
 80027b4:	4602      	mov	r2, r0
 80027b6:	4b05      	ldr	r3, [pc, #20]	@ (80027cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	0b5b      	lsrs	r3, r3, #13
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	4903      	ldr	r1, [pc, #12]	@ (80027d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027c2:	5ccb      	ldrb	r3, [r1, r3]
 80027c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40023800 	.word	0x40023800
 80027d0:	08006694 	.word	0x08006694

080027d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027d8:	b0ae      	sub	sp, #184	@ 0xb8
 80027da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027fa:	4bcb      	ldr	r3, [pc, #812]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x354>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b0c      	cmp	r3, #12
 8002804:	f200 8206 	bhi.w	8002c14 <HAL_RCC_GetSysClockFreq+0x440>
 8002808:	a201      	add	r2, pc, #4	@ (adr r2, 8002810 <HAL_RCC_GetSysClockFreq+0x3c>)
 800280a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280e:	bf00      	nop
 8002810:	08002845 	.word	0x08002845
 8002814:	08002c15 	.word	0x08002c15
 8002818:	08002c15 	.word	0x08002c15
 800281c:	08002c15 	.word	0x08002c15
 8002820:	0800284d 	.word	0x0800284d
 8002824:	08002c15 	.word	0x08002c15
 8002828:	08002c15 	.word	0x08002c15
 800282c:	08002c15 	.word	0x08002c15
 8002830:	08002855 	.word	0x08002855
 8002834:	08002c15 	.word	0x08002c15
 8002838:	08002c15 	.word	0x08002c15
 800283c:	08002c15 	.word	0x08002c15
 8002840:	08002a45 	.word	0x08002a45
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002844:	4bb9      	ldr	r3, [pc, #740]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x358>)
 8002846:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800284a:	e1e7      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800284c:	4bb8      	ldr	r3, [pc, #736]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x35c>)
 800284e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002852:	e1e3      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002854:	4bb4      	ldr	r3, [pc, #720]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800285c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002860:	4bb1      	ldr	r3, [pc, #708]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d071      	beq.n	8002950 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800286c:	4bae      	ldr	r3, [pc, #696]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x354>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	099b      	lsrs	r3, r3, #6
 8002872:	2200      	movs	r2, #0
 8002874:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002878:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800287c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002884:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002888:	2300      	movs	r3, #0
 800288a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800288e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002892:	4622      	mov	r2, r4
 8002894:	462b      	mov	r3, r5
 8002896:	f04f 0000 	mov.w	r0, #0
 800289a:	f04f 0100 	mov.w	r1, #0
 800289e:	0159      	lsls	r1, r3, #5
 80028a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028a4:	0150      	lsls	r0, r2, #5
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4621      	mov	r1, r4
 80028ac:	1a51      	subs	r1, r2, r1
 80028ae:	6439      	str	r1, [r7, #64]	@ 0x40
 80028b0:	4629      	mov	r1, r5
 80028b2:	eb63 0301 	sbc.w	r3, r3, r1
 80028b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80028c4:	4649      	mov	r1, r9
 80028c6:	018b      	lsls	r3, r1, #6
 80028c8:	4641      	mov	r1, r8
 80028ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ce:	4641      	mov	r1, r8
 80028d0:	018a      	lsls	r2, r1, #6
 80028d2:	4641      	mov	r1, r8
 80028d4:	1a51      	subs	r1, r2, r1
 80028d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028d8:	4649      	mov	r1, r9
 80028da:	eb63 0301 	sbc.w	r3, r3, r1
 80028de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80028ec:	4649      	mov	r1, r9
 80028ee:	00cb      	lsls	r3, r1, #3
 80028f0:	4641      	mov	r1, r8
 80028f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028f6:	4641      	mov	r1, r8
 80028f8:	00ca      	lsls	r2, r1, #3
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	4603      	mov	r3, r0
 8002900:	4622      	mov	r2, r4
 8002902:	189b      	adds	r3, r3, r2
 8002904:	633b      	str	r3, [r7, #48]	@ 0x30
 8002906:	462b      	mov	r3, r5
 8002908:	460a      	mov	r2, r1
 800290a:	eb42 0303 	adc.w	r3, r2, r3
 800290e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800291c:	4629      	mov	r1, r5
 800291e:	024b      	lsls	r3, r1, #9
 8002920:	4621      	mov	r1, r4
 8002922:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002926:	4621      	mov	r1, r4
 8002928:	024a      	lsls	r2, r1, #9
 800292a:	4610      	mov	r0, r2
 800292c:	4619      	mov	r1, r3
 800292e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002932:	2200      	movs	r2, #0
 8002934:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002938:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800293c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002940:	f7fe f8f4 	bl	8000b2c <__aeabi_uldivmod>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4613      	mov	r3, r2
 800294a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800294e:	e067      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002950:	4b75      	ldr	r3, [pc, #468]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	099b      	lsrs	r3, r3, #6
 8002956:	2200      	movs	r2, #0
 8002958:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800295c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002960:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002968:	67bb      	str	r3, [r7, #120]	@ 0x78
 800296a:	2300      	movs	r3, #0
 800296c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800296e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002972:	4622      	mov	r2, r4
 8002974:	462b      	mov	r3, r5
 8002976:	f04f 0000 	mov.w	r0, #0
 800297a:	f04f 0100 	mov.w	r1, #0
 800297e:	0159      	lsls	r1, r3, #5
 8002980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002984:	0150      	lsls	r0, r2, #5
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4621      	mov	r1, r4
 800298c:	1a51      	subs	r1, r2, r1
 800298e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002990:	4629      	mov	r1, r5
 8002992:	eb63 0301 	sbc.w	r3, r3, r1
 8002996:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80029a4:	4649      	mov	r1, r9
 80029a6:	018b      	lsls	r3, r1, #6
 80029a8:	4641      	mov	r1, r8
 80029aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029ae:	4641      	mov	r1, r8
 80029b0:	018a      	lsls	r2, r1, #6
 80029b2:	4641      	mov	r1, r8
 80029b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80029b8:	4649      	mov	r1, r9
 80029ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029d2:	4692      	mov	sl, r2
 80029d4:	469b      	mov	fp, r3
 80029d6:	4623      	mov	r3, r4
 80029d8:	eb1a 0303 	adds.w	r3, sl, r3
 80029dc:	623b      	str	r3, [r7, #32]
 80029de:	462b      	mov	r3, r5
 80029e0:	eb4b 0303 	adc.w	r3, fp, r3
 80029e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80029f2:	4629      	mov	r1, r5
 80029f4:	028b      	lsls	r3, r1, #10
 80029f6:	4621      	mov	r1, r4
 80029f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029fc:	4621      	mov	r1, r4
 80029fe:	028a      	lsls	r2, r1, #10
 8002a00:	4610      	mov	r0, r2
 8002a02:	4619      	mov	r1, r3
 8002a04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a08:	2200      	movs	r2, #0
 8002a0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a0c:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002a12:	f7fe f88b 	bl	8000b2c <__aeabi_uldivmod>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a20:	4b41      	ldr	r3, [pc, #260]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	0c1b      	lsrs	r3, r3, #16
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002a32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a42:	e0eb      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a44:	4b38      	ldr	r3, [pc, #224]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a50:	4b35      	ldr	r3, [pc, #212]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d06b      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a5c:	4b32      	ldr	r3, [pc, #200]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	099b      	lsrs	r3, r3, #6
 8002a62:	2200      	movs	r2, #0
 8002a64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a70:	2300      	movs	r3, #0
 8002a72:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a74:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002a78:	4622      	mov	r2, r4
 8002a7a:	462b      	mov	r3, r5
 8002a7c:	f04f 0000 	mov.w	r0, #0
 8002a80:	f04f 0100 	mov.w	r1, #0
 8002a84:	0159      	lsls	r1, r3, #5
 8002a86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a8a:	0150      	lsls	r0, r2, #5
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4621      	mov	r1, r4
 8002a92:	1a51      	subs	r1, r2, r1
 8002a94:	61b9      	str	r1, [r7, #24]
 8002a96:	4629      	mov	r1, r5
 8002a98:	eb63 0301 	sbc.w	r3, r3, r1
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002aaa:	4659      	mov	r1, fp
 8002aac:	018b      	lsls	r3, r1, #6
 8002aae:	4651      	mov	r1, sl
 8002ab0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ab4:	4651      	mov	r1, sl
 8002ab6:	018a      	lsls	r2, r1, #6
 8002ab8:	4651      	mov	r1, sl
 8002aba:	ebb2 0801 	subs.w	r8, r2, r1
 8002abe:	4659      	mov	r1, fp
 8002ac0:	eb63 0901 	sbc.w	r9, r3, r1
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ad0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ad4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ad8:	4690      	mov	r8, r2
 8002ada:	4699      	mov	r9, r3
 8002adc:	4623      	mov	r3, r4
 8002ade:	eb18 0303 	adds.w	r3, r8, r3
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	462b      	mov	r3, r5
 8002ae6:	eb49 0303 	adc.w	r3, r9, r3
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002af8:	4629      	mov	r1, r5
 8002afa:	024b      	lsls	r3, r1, #9
 8002afc:	4621      	mov	r1, r4
 8002afe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b02:	4621      	mov	r1, r4
 8002b04:	024a      	lsls	r2, r1, #9
 8002b06:	4610      	mov	r0, r2
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b0e:	2200      	movs	r2, #0
 8002b10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b12:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b14:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b18:	f7fe f808 	bl	8000b2c <__aeabi_uldivmod>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4613      	mov	r3, r2
 8002b22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b26:	e065      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x420>
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	00f42400 	.word	0x00f42400
 8002b30:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b34:	4b3d      	ldr	r3, [pc, #244]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x458>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	099b      	lsrs	r3, r3, #6
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	4611      	mov	r1, r2
 8002b40:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b44:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b46:	2300      	movs	r3, #0
 8002b48:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b4a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002b4e:	4642      	mov	r2, r8
 8002b50:	464b      	mov	r3, r9
 8002b52:	f04f 0000 	mov.w	r0, #0
 8002b56:	f04f 0100 	mov.w	r1, #0
 8002b5a:	0159      	lsls	r1, r3, #5
 8002b5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b60:	0150      	lsls	r0, r2, #5
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4641      	mov	r1, r8
 8002b68:	1a51      	subs	r1, r2, r1
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	4649      	mov	r1, r9
 8002b6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b80:	4659      	mov	r1, fp
 8002b82:	018b      	lsls	r3, r1, #6
 8002b84:	4651      	mov	r1, sl
 8002b86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b8a:	4651      	mov	r1, sl
 8002b8c:	018a      	lsls	r2, r1, #6
 8002b8e:	4651      	mov	r1, sl
 8002b90:	1a54      	subs	r4, r2, r1
 8002b92:	4659      	mov	r1, fp
 8002b94:	eb63 0501 	sbc.w	r5, r3, r1
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	00eb      	lsls	r3, r5, #3
 8002ba2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ba6:	00e2      	lsls	r2, r4, #3
 8002ba8:	4614      	mov	r4, r2
 8002baa:	461d      	mov	r5, r3
 8002bac:	4643      	mov	r3, r8
 8002bae:	18e3      	adds	r3, r4, r3
 8002bb0:	603b      	str	r3, [r7, #0]
 8002bb2:	464b      	mov	r3, r9
 8002bb4:	eb45 0303 	adc.w	r3, r5, r3
 8002bb8:	607b      	str	r3, [r7, #4]
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bc6:	4629      	mov	r1, r5
 8002bc8:	028b      	lsls	r3, r1, #10
 8002bca:	4621      	mov	r1, r4
 8002bcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bd0:	4621      	mov	r1, r4
 8002bd2:	028a      	lsls	r2, r1, #10
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bdc:	2200      	movs	r2, #0
 8002bde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002be0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002be2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002be6:	f7fd ffa1 	bl	8000b2c <__aeabi_uldivmod>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4613      	mov	r3, r2
 8002bf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x458>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	0f1b      	lsrs	r3, r3, #28
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002c02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c12:	e003      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c14:	4b06      	ldr	r3, [pc, #24]	@ (8002c30 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002c16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	37b8      	adds	r7, #184	@ 0xb8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	00f42400 	.word	0x00f42400

08002c34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e28d      	b.n	8003162 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 8083 	beq.w	8002d5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c54:	4b94      	ldr	r3, [pc, #592]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 030c 	and.w	r3, r3, #12
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d019      	beq.n	8002c94 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c60:	4b91      	ldr	r3, [pc, #580]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d106      	bne.n	8002c7a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c6c:	4b8e      	ldr	r3, [pc, #568]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c78:	d00c      	beq.n	8002c94 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c7a:	4b8b      	ldr	r3, [pc, #556]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c82:	2b0c      	cmp	r3, #12
 8002c84:	d112      	bne.n	8002cac <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c86:	4b88      	ldr	r3, [pc, #544]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c92:	d10b      	bne.n	8002cac <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c94:	4b84      	ldr	r3, [pc, #528]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d05b      	beq.n	8002d58 <HAL_RCC_OscConfig+0x124>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d157      	bne.n	8002d58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e25a      	b.n	8003162 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cb4:	d106      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x90>
 8002cb6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a7b      	ldr	r2, [pc, #492]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e01d      	b.n	8002d00 <HAL_RCC_OscConfig+0xcc>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0xb4>
 8002cce:	4b76      	ldr	r3, [pc, #472]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a75      	ldr	r2, [pc, #468]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002cd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	4b73      	ldr	r3, [pc, #460]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a72      	ldr	r2, [pc, #456]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	e00b      	b.n	8002d00 <HAL_RCC_OscConfig+0xcc>
 8002ce8:	4b6f      	ldr	r3, [pc, #444]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a6e      	ldr	r2, [pc, #440]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cf2:	6013      	str	r3, [r2, #0]
 8002cf4:	4b6c      	ldr	r3, [pc, #432]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a6b      	ldr	r2, [pc, #428]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002cfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d013      	beq.n	8002d30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7ff f8b0 	bl	8001e6c <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d10:	f7ff f8ac 	bl	8001e6c <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b64      	cmp	r3, #100	@ 0x64
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e21f      	b.n	8003162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d22:	4b61      	ldr	r3, [pc, #388]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0xdc>
 8002d2e:	e014      	b.n	8002d5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7ff f89c 	bl	8001e6c <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d38:	f7ff f898 	bl	8001e6c <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b64      	cmp	r3, #100	@ 0x64
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e20b      	b.n	8003162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4a:	4b57      	ldr	r3, [pc, #348]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x104>
 8002d56:	e000      	b.n	8002d5a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d06f      	beq.n	8002e46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d66:	4b50      	ldr	r3, [pc, #320]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d017      	beq.n	8002da2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d72:	4b4d      	ldr	r3, [pc, #308]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 030c 	and.w	r3, r3, #12
        || \
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d105      	bne.n	8002d8a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d8a:	4b47      	ldr	r3, [pc, #284]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d92:	2b0c      	cmp	r3, #12
 8002d94:	d11c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d96:	4b44      	ldr	r3, [pc, #272]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d116      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da2:	4b41      	ldr	r3, [pc, #260]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d005      	beq.n	8002dba <HAL_RCC_OscConfig+0x186>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d001      	beq.n	8002dba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e1d3      	b.n	8003162 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dba:	4b3b      	ldr	r3, [pc, #236]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4937      	ldr	r1, [pc, #220]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dce:	e03a      	b.n	8002e46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d020      	beq.n	8002e1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd8:	4b34      	ldr	r3, [pc, #208]	@ (8002eac <HAL_RCC_OscConfig+0x278>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dde:	f7ff f845 	bl	8001e6c <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de6:	f7ff f841 	bl	8001e6c <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e1b4      	b.n	8003162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df8:	4b2b      	ldr	r3, [pc, #172]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0f0      	beq.n	8002de6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e04:	4b28      	ldr	r3, [pc, #160]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4925      	ldr	r1, [pc, #148]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	600b      	str	r3, [r1, #0]
 8002e18:	e015      	b.n	8002e46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e1a:	4b24      	ldr	r3, [pc, #144]	@ (8002eac <HAL_RCC_OscConfig+0x278>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7ff f824 	bl	8001e6c <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e28:	f7ff f820 	bl	8001e6c <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e193      	b.n	8003162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d036      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d016      	beq.n	8002e88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e5a:	4b15      	ldr	r3, [pc, #84]	@ (8002eb0 <HAL_RCC_OscConfig+0x27c>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e60:	f7ff f804 	bl	8001e6c <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e68:	f7ff f800 	bl	8001e6c <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e173      	b.n	8003162 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002e7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0x234>
 8002e86:	e01b      	b.n	8002ec0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e88:	4b09      	ldr	r3, [pc, #36]	@ (8002eb0 <HAL_RCC_OscConfig+0x27c>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8e:	f7fe ffed 	bl	8001e6c <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e94:	e00e      	b.n	8002eb4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e96:	f7fe ffe9 	bl	8001e6c <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d907      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e15c      	b.n	8003162 <HAL_RCC_OscConfig+0x52e>
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	42470000 	.word	0x42470000
 8002eb0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb4:	4b8a      	ldr	r3, [pc, #552]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 8002eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1ea      	bne.n	8002e96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 8097 	beq.w	8002ffc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ed2:	4b83      	ldr	r3, [pc, #524]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10f      	bne.n	8002efe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	4b7f      	ldr	r3, [pc, #508]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee6:	4a7e      	ldr	r2, [pc, #504]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 8002ee8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eee:	4b7c      	ldr	r3, [pc, #496]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef6:	60bb      	str	r3, [r7, #8]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efe:	4b79      	ldr	r3, [pc, #484]	@ (80030e4 <HAL_RCC_OscConfig+0x4b0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d118      	bne.n	8002f3c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f0a:	4b76      	ldr	r3, [pc, #472]	@ (80030e4 <HAL_RCC_OscConfig+0x4b0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a75      	ldr	r2, [pc, #468]	@ (80030e4 <HAL_RCC_OscConfig+0x4b0>)
 8002f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f16:	f7fe ffa9 	bl	8001e6c <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f1e:	f7fe ffa5 	bl	8001e6c <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e118      	b.n	8003162 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f30:	4b6c      	ldr	r3, [pc, #432]	@ (80030e4 <HAL_RCC_OscConfig+0x4b0>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0f0      	beq.n	8002f1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d106      	bne.n	8002f52 <HAL_RCC_OscConfig+0x31e>
 8002f44:	4b66      	ldr	r3, [pc, #408]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f48:	4a65      	ldr	r2, [pc, #404]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f50:	e01c      	b.n	8002f8c <HAL_RCC_OscConfig+0x358>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b05      	cmp	r3, #5
 8002f58:	d10c      	bne.n	8002f74 <HAL_RCC_OscConfig+0x340>
 8002f5a:	4b61      	ldr	r3, [pc, #388]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5e:	4a60      	ldr	r2, [pc, #384]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 8002f60:	f043 0304 	orr.w	r3, r3, #4
 8002f64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f66:	4b5e      	ldr	r3, [pc, #376]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 8002f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f6a:	4a5d      	ldr	r2, [pc, #372]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f72:	e00b      	b.n	8002f8c <HAL_RCC_OscConfig+0x358>
 8002f74:	4b5a      	ldr	r3, [pc, #360]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f78:	4a59      	ldr	r2, [pc, #356]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 8002f7a:	f023 0301 	bic.w	r3, r3, #1
 8002f7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f80:	4b57      	ldr	r3, [pc, #348]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f84:	4a56      	ldr	r2, [pc, #344]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 8002f86:	f023 0304 	bic.w	r3, r3, #4
 8002f8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d015      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f94:	f7fe ff6a 	bl	8001e6c <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9a:	e00a      	b.n	8002fb2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9c:	f7fe ff66 	bl	8001e6c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e0d7      	b.n	8003162 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb2:	4b4b      	ldr	r3, [pc, #300]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0ee      	beq.n	8002f9c <HAL_RCC_OscConfig+0x368>
 8002fbe:	e014      	b.n	8002fea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc0:	f7fe ff54 	bl	8001e6c <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc6:	e00a      	b.n	8002fde <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc8:	f7fe ff50 	bl	8001e6c <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e0c1      	b.n	8003162 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fde:	4b40      	ldr	r3, [pc, #256]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1ee      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fea:	7dfb      	ldrb	r3, [r7, #23]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d105      	bne.n	8002ffc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff4:	4a3a      	ldr	r2, [pc, #232]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 8002ff6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ffa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80ad 	beq.w	8003160 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003006:	4b36      	ldr	r3, [pc, #216]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b08      	cmp	r3, #8
 8003010:	d060      	beq.n	80030d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	2b02      	cmp	r3, #2
 8003018:	d145      	bne.n	80030a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301a:	4b33      	ldr	r3, [pc, #204]	@ (80030e8 <HAL_RCC_OscConfig+0x4b4>)
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7fe ff24 	bl	8001e6c <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003028:	f7fe ff20 	bl	8001e6c <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e093      	b.n	8003162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303a:	4b29      	ldr	r3, [pc, #164]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69da      	ldr	r2, [r3, #28]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003054:	019b      	lsls	r3, r3, #6
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305c:	085b      	lsrs	r3, r3, #1
 800305e:	3b01      	subs	r3, #1
 8003060:	041b      	lsls	r3, r3, #16
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003068:	061b      	lsls	r3, r3, #24
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003070:	071b      	lsls	r3, r3, #28
 8003072:	491b      	ldr	r1, [pc, #108]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 8003074:	4313      	orrs	r3, r2
 8003076:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003078:	4b1b      	ldr	r3, [pc, #108]	@ (80030e8 <HAL_RCC_OscConfig+0x4b4>)
 800307a:	2201      	movs	r2, #1
 800307c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307e:	f7fe fef5 	bl	8001e6c <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003086:	f7fe fef1 	bl	8001e6c <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e064      	b.n	8003162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003098:	4b11      	ldr	r3, [pc, #68]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCC_OscConfig+0x452>
 80030a4:	e05c      	b.n	8003160 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a6:	4b10      	ldr	r3, [pc, #64]	@ (80030e8 <HAL_RCC_OscConfig+0x4b4>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fe fede 	bl	8001e6c <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b4:	f7fe feda 	bl	8001e6c <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e04d      	b.n	8003162 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c6:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <HAL_RCC_OscConfig+0x4ac>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x480>
 80030d2:	e045      	b.n	8003160 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d107      	bne.n	80030ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e040      	b.n	8003162 <HAL_RCC_OscConfig+0x52e>
 80030e0:	40023800 	.word	0x40023800
 80030e4:	40007000 	.word	0x40007000
 80030e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030ec:	4b1f      	ldr	r3, [pc, #124]	@ (800316c <HAL_RCC_OscConfig+0x538>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d030      	beq.n	800315c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003104:	429a      	cmp	r2, r3
 8003106:	d129      	bne.n	800315c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003112:	429a      	cmp	r2, r3
 8003114:	d122      	bne.n	800315c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800311c:	4013      	ands	r3, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003122:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003124:	4293      	cmp	r3, r2
 8003126:	d119      	bne.n	800315c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003132:	085b      	lsrs	r3, r3, #1
 8003134:	3b01      	subs	r3, #1
 8003136:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003138:	429a      	cmp	r2, r3
 800313a:	d10f      	bne.n	800315c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003146:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003148:	429a      	cmp	r2, r3
 800314a:	d107      	bne.n	800315c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003158:	429a      	cmp	r2, r3
 800315a:	d001      	beq.n	8003160 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40023800 	.word	0x40023800

08003170 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e041      	b.n	8003206 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d106      	bne.n	800319c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7fe fbe8 	bl	800196c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3304      	adds	r3, #4
 80031ac:	4619      	mov	r1, r3
 80031ae:	4610      	mov	r0, r2
 80031b0:	f000 ff86 	bl	80040c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e041      	b.n	80032a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d106      	bne.n	800323a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f839 	bl	80032ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2202      	movs	r2, #2
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3304      	adds	r3, #4
 800324a:	4619      	mov	r1, r3
 800324c:	4610      	mov	r0, r2
 800324e:	f000 ff37 	bl	80040c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d109      	bne.n	80032e4 <HAL_TIM_PWM_Start+0x24>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	bf14      	ite	ne
 80032dc:	2301      	movne	r3, #1
 80032de:	2300      	moveq	r3, #0
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	e022      	b.n	800332a <HAL_TIM_PWM_Start+0x6a>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d109      	bne.n	80032fe <HAL_TIM_PWM_Start+0x3e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	bf14      	ite	ne
 80032f6:	2301      	movne	r3, #1
 80032f8:	2300      	moveq	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	e015      	b.n	800332a <HAL_TIM_PWM_Start+0x6a>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d109      	bne.n	8003318 <HAL_TIM_PWM_Start+0x58>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b01      	cmp	r3, #1
 800330e:	bf14      	ite	ne
 8003310:	2301      	movne	r3, #1
 8003312:	2300      	moveq	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	e008      	b.n	800332a <HAL_TIM_PWM_Start+0x6a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	bf14      	ite	ne
 8003324:	2301      	movne	r3, #1
 8003326:	2300      	moveq	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e07c      	b.n	800342c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d104      	bne.n	8003342 <HAL_TIM_PWM_Start+0x82>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003340:	e013      	b.n	800336a <HAL_TIM_PWM_Start+0xaa>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b04      	cmp	r3, #4
 8003346:	d104      	bne.n	8003352 <HAL_TIM_PWM_Start+0x92>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003350:	e00b      	b.n	800336a <HAL_TIM_PWM_Start+0xaa>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b08      	cmp	r3, #8
 8003356:	d104      	bne.n	8003362 <HAL_TIM_PWM_Start+0xa2>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003360:	e003      	b.n	800336a <HAL_TIM_PWM_Start+0xaa>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2202      	movs	r2, #2
 8003366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2201      	movs	r2, #1
 8003370:	6839      	ldr	r1, [r7, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f001 fabe 	bl	80048f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a2d      	ldr	r2, [pc, #180]	@ (8003434 <HAL_TIM_PWM_Start+0x174>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d004      	beq.n	800338c <HAL_TIM_PWM_Start+0xcc>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a2c      	ldr	r2, [pc, #176]	@ (8003438 <HAL_TIM_PWM_Start+0x178>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d101      	bne.n	8003390 <HAL_TIM_PWM_Start+0xd0>
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <HAL_TIM_PWM_Start+0xd2>
 8003390:	2300      	movs	r3, #0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d007      	beq.n	80033a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a22      	ldr	r2, [pc, #136]	@ (8003434 <HAL_TIM_PWM_Start+0x174>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d022      	beq.n	80033f6 <HAL_TIM_PWM_Start+0x136>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b8:	d01d      	beq.n	80033f6 <HAL_TIM_PWM_Start+0x136>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a1f      	ldr	r2, [pc, #124]	@ (800343c <HAL_TIM_PWM_Start+0x17c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d018      	beq.n	80033f6 <HAL_TIM_PWM_Start+0x136>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003440 <HAL_TIM_PWM_Start+0x180>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d013      	beq.n	80033f6 <HAL_TIM_PWM_Start+0x136>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003444 <HAL_TIM_PWM_Start+0x184>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00e      	beq.n	80033f6 <HAL_TIM_PWM_Start+0x136>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a16      	ldr	r2, [pc, #88]	@ (8003438 <HAL_TIM_PWM_Start+0x178>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d009      	beq.n	80033f6 <HAL_TIM_PWM_Start+0x136>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a18      	ldr	r2, [pc, #96]	@ (8003448 <HAL_TIM_PWM_Start+0x188>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d004      	beq.n	80033f6 <HAL_TIM_PWM_Start+0x136>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a16      	ldr	r2, [pc, #88]	@ (800344c <HAL_TIM_PWM_Start+0x18c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d111      	bne.n	800341a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b06      	cmp	r3, #6
 8003406:	d010      	beq.n	800342a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003418:	e007      	b.n	800342a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0201 	orr.w	r2, r2, #1
 8003428:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40010000 	.word	0x40010000
 8003438:	40010400 	.word	0x40010400
 800343c:	40000400 	.word	0x40000400
 8003440:	40000800 	.word	0x40000800
 8003444:	40000c00 	.word	0x40000c00
 8003448:	40014000 	.word	0x40014000
 800344c:	40001800 	.word	0x40001800

08003450 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e041      	b.n	80034e6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f839 	bl	80034ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3304      	adds	r3, #4
 800348c:	4619      	mov	r1, r3
 800348e:	4610      	mov	r0, r2
 8003490:	f000 fe16 	bl	80040c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d104      	bne.n	8003522 <HAL_TIM_IC_Start_IT+0x1e>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800351e:	b2db      	uxtb	r3, r3
 8003520:	e013      	b.n	800354a <HAL_TIM_IC_Start_IT+0x46>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b04      	cmp	r3, #4
 8003526:	d104      	bne.n	8003532 <HAL_TIM_IC_Start_IT+0x2e>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800352e:	b2db      	uxtb	r3, r3
 8003530:	e00b      	b.n	800354a <HAL_TIM_IC_Start_IT+0x46>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b08      	cmp	r3, #8
 8003536:	d104      	bne.n	8003542 <HAL_TIM_IC_Start_IT+0x3e>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800353e:	b2db      	uxtb	r3, r3
 8003540:	e003      	b.n	800354a <HAL_TIM_IC_Start_IT+0x46>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003548:	b2db      	uxtb	r3, r3
 800354a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d104      	bne.n	800355c <HAL_TIM_IC_Start_IT+0x58>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003558:	b2db      	uxtb	r3, r3
 800355a:	e013      	b.n	8003584 <HAL_TIM_IC_Start_IT+0x80>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2b04      	cmp	r3, #4
 8003560:	d104      	bne.n	800356c <HAL_TIM_IC_Start_IT+0x68>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003568:	b2db      	uxtb	r3, r3
 800356a:	e00b      	b.n	8003584 <HAL_TIM_IC_Start_IT+0x80>
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2b08      	cmp	r3, #8
 8003570:	d104      	bne.n	800357c <HAL_TIM_IC_Start_IT+0x78>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003578:	b2db      	uxtb	r3, r3
 800357a:	e003      	b.n	8003584 <HAL_TIM_IC_Start_IT+0x80>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003582:	b2db      	uxtb	r3, r3
 8003584:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003586:	7bbb      	ldrb	r3, [r7, #14]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d102      	bne.n	8003592 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800358c:	7b7b      	ldrb	r3, [r7, #13]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d001      	beq.n	8003596 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e0cc      	b.n	8003730 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d104      	bne.n	80035a6 <HAL_TIM_IC_Start_IT+0xa2>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035a4:	e013      	b.n	80035ce <HAL_TIM_IC_Start_IT+0xca>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d104      	bne.n	80035b6 <HAL_TIM_IC_Start_IT+0xb2>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035b4:	e00b      	b.n	80035ce <HAL_TIM_IC_Start_IT+0xca>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d104      	bne.n	80035c6 <HAL_TIM_IC_Start_IT+0xc2>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035c4:	e003      	b.n	80035ce <HAL_TIM_IC_Start_IT+0xca>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2202      	movs	r2, #2
 80035ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d104      	bne.n	80035de <HAL_TIM_IC_Start_IT+0xda>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035dc:	e013      	b.n	8003606 <HAL_TIM_IC_Start_IT+0x102>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d104      	bne.n	80035ee <HAL_TIM_IC_Start_IT+0xea>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035ec:	e00b      	b.n	8003606 <HAL_TIM_IC_Start_IT+0x102>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d104      	bne.n	80035fe <HAL_TIM_IC_Start_IT+0xfa>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035fc:	e003      	b.n	8003606 <HAL_TIM_IC_Start_IT+0x102>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2202      	movs	r2, #2
 8003602:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b0c      	cmp	r3, #12
 800360a:	d841      	bhi.n	8003690 <HAL_TIM_IC_Start_IT+0x18c>
 800360c:	a201      	add	r2, pc, #4	@ (adr r2, 8003614 <HAL_TIM_IC_Start_IT+0x110>)
 800360e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003612:	bf00      	nop
 8003614:	08003649 	.word	0x08003649
 8003618:	08003691 	.word	0x08003691
 800361c:	08003691 	.word	0x08003691
 8003620:	08003691 	.word	0x08003691
 8003624:	0800365b 	.word	0x0800365b
 8003628:	08003691 	.word	0x08003691
 800362c:	08003691 	.word	0x08003691
 8003630:	08003691 	.word	0x08003691
 8003634:	0800366d 	.word	0x0800366d
 8003638:	08003691 	.word	0x08003691
 800363c:	08003691 	.word	0x08003691
 8003640:	08003691 	.word	0x08003691
 8003644:	0800367f 	.word	0x0800367f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0202 	orr.w	r2, r2, #2
 8003656:	60da      	str	r2, [r3, #12]
      break;
 8003658:	e01d      	b.n	8003696 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68da      	ldr	r2, [r3, #12]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f042 0204 	orr.w	r2, r2, #4
 8003668:	60da      	str	r2, [r3, #12]
      break;
 800366a:	e014      	b.n	8003696 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0208 	orr.w	r2, r2, #8
 800367a:	60da      	str	r2, [r3, #12]
      break;
 800367c:	e00b      	b.n	8003696 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0210 	orr.w	r2, r2, #16
 800368c:	60da      	str	r2, [r3, #12]
      break;
 800368e:	e002      	b.n	8003696 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
      break;
 8003694:	bf00      	nop
  }

  if (status == HAL_OK)
 8003696:	7bfb      	ldrb	r3, [r7, #15]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d148      	bne.n	800372e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2201      	movs	r2, #1
 80036a2:	6839      	ldr	r1, [r7, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f001 f925 	bl	80048f4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a22      	ldr	r2, [pc, #136]	@ (8003738 <HAL_TIM_IC_Start_IT+0x234>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d022      	beq.n	80036fa <HAL_TIM_IC_Start_IT+0x1f6>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036bc:	d01d      	beq.n	80036fa <HAL_TIM_IC_Start_IT+0x1f6>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a1e      	ldr	r2, [pc, #120]	@ (800373c <HAL_TIM_IC_Start_IT+0x238>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d018      	beq.n	80036fa <HAL_TIM_IC_Start_IT+0x1f6>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003740 <HAL_TIM_IC_Start_IT+0x23c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d013      	beq.n	80036fa <HAL_TIM_IC_Start_IT+0x1f6>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003744 <HAL_TIM_IC_Start_IT+0x240>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00e      	beq.n	80036fa <HAL_TIM_IC_Start_IT+0x1f6>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a19      	ldr	r2, [pc, #100]	@ (8003748 <HAL_TIM_IC_Start_IT+0x244>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d009      	beq.n	80036fa <HAL_TIM_IC_Start_IT+0x1f6>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a18      	ldr	r2, [pc, #96]	@ (800374c <HAL_TIM_IC_Start_IT+0x248>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d004      	beq.n	80036fa <HAL_TIM_IC_Start_IT+0x1f6>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a16      	ldr	r2, [pc, #88]	@ (8003750 <HAL_TIM_IC_Start_IT+0x24c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d111      	bne.n	800371e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2b06      	cmp	r3, #6
 800370a:	d010      	beq.n	800372e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800371c:	e007      	b.n	800372e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0201 	orr.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800372e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40010000 	.word	0x40010000
 800373c:	40000400 	.word	0x40000400
 8003740:	40000800 	.word	0x40000800
 8003744:	40000c00 	.word	0x40000c00
 8003748:	40010400 	.word	0x40010400
 800374c:	40014000 	.word	0x40014000
 8003750:	40001800 	.word	0x40001800

08003754 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e097      	b.n	8003898 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d106      	bne.n	8003782 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7fe f959 	bl	8001a34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2202      	movs	r2, #2
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003798:	f023 0307 	bic.w	r3, r3, #7
 800379c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3304      	adds	r3, #4
 80037a6:	4619      	mov	r1, r3
 80037a8:	4610      	mov	r0, r2
 80037aa:	f000 fc89 	bl	80040c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037d6:	f023 0303 	bic.w	r3, r3, #3
 80037da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	021b      	lsls	r3, r3, #8
 80037e6:	4313      	orrs	r3, r2
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80037f4:	f023 030c 	bic.w	r3, r3, #12
 80037f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003800:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003804:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	021b      	lsls	r3, r3, #8
 8003810:	4313      	orrs	r3, r2
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4313      	orrs	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	011a      	lsls	r2, r3, #4
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	031b      	lsls	r3, r3, #12
 8003824:	4313      	orrs	r3, r2
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003832:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800383a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	4313      	orrs	r3, r2
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80038b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80038c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d110      	bne.n	80038f2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d102      	bne.n	80038dc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80038d6:	7b7b      	ldrb	r3, [r7, #13]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d001      	beq.n	80038e0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e069      	b.n	80039b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038f0:	e031      	b.n	8003956 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d110      	bne.n	800391a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038f8:	7bbb      	ldrb	r3, [r7, #14]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d102      	bne.n	8003904 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038fe:	7b3b      	ldrb	r3, [r7, #12]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d001      	beq.n	8003908 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e055      	b.n	80039b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003918:	e01d      	b.n	8003956 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800391a:	7bfb      	ldrb	r3, [r7, #15]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d108      	bne.n	8003932 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003920:	7bbb      	ldrb	r3, [r7, #14]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d105      	bne.n	8003932 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003926:	7b7b      	ldrb	r3, [r7, #13]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d102      	bne.n	8003932 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800392c:	7b3b      	ldrb	r3, [r7, #12]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d001      	beq.n	8003936 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e03e      	b.n	80039b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2202      	movs	r2, #2
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2202      	movs	r2, #2
 8003942:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2202      	movs	r2, #2
 800394a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2202      	movs	r2, #2
 8003952:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_TIM_Encoder_Start+0xc4>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2b04      	cmp	r3, #4
 8003960:	d008      	beq.n	8003974 <HAL_TIM_Encoder_Start+0xd4>
 8003962:	e00f      	b.n	8003984 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2201      	movs	r2, #1
 800396a:	2100      	movs	r1, #0
 800396c:	4618      	mov	r0, r3
 800396e:	f000 ffc1 	bl	80048f4 <TIM_CCxChannelCmd>
      break;
 8003972:	e016      	b.n	80039a2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2201      	movs	r2, #1
 800397a:	2104      	movs	r1, #4
 800397c:	4618      	mov	r0, r3
 800397e:	f000 ffb9 	bl	80048f4 <TIM_CCxChannelCmd>
      break;
 8003982:	e00e      	b.n	80039a2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2201      	movs	r2, #1
 800398a:	2100      	movs	r1, #0
 800398c:	4618      	mov	r0, r3
 800398e:	f000 ffb1 	bl	80048f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2201      	movs	r2, #1
 8003998:	2104      	movs	r1, #4
 800399a:	4618      	mov	r0, r3
 800399c:	f000 ffaa 	bl	80048f4 <TIM_CCxChannelCmd>
      break;
 80039a0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f042 0201 	orr.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d020      	beq.n	8003a20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01b      	beq.n	8003a20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0202 	mvn.w	r2, #2
 80039f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fd fede 	bl	80017c8 <HAL_TIM_IC_CaptureCallback>
 8003a0c:	e005      	b.n	8003a1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fb38 	bl	8004084 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fb3f 	bl	8004098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d020      	beq.n	8003a6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d01b      	beq.n	8003a6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0204 	mvn.w	r2, #4
 8003a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2202      	movs	r2, #2
 8003a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fd feb8 	bl	80017c8 <HAL_TIM_IC_CaptureCallback>
 8003a58:	e005      	b.n	8003a66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fb12 	bl	8004084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 fb19 	bl	8004098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d020      	beq.n	8003ab8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d01b      	beq.n	8003ab8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0208 	mvn.w	r2, #8
 8003a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fd fe92 	bl	80017c8 <HAL_TIM_IC_CaptureCallback>
 8003aa4:	e005      	b.n	8003ab2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 faec 	bl	8004084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 faf3 	bl	8004098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f003 0310 	and.w	r3, r3, #16
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d020      	beq.n	8003b04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d01b      	beq.n	8003b04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0210 	mvn.w	r2, #16
 8003ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2208      	movs	r2, #8
 8003ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fd fe6c 	bl	80017c8 <HAL_TIM_IC_CaptureCallback>
 8003af0:	e005      	b.n	8003afe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fac6 	bl	8004084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 facd 	bl	8004098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00c      	beq.n	8003b28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d007      	beq.n	8003b28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f06f 0201 	mvn.w	r2, #1
 8003b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 faa4 	bl	8004070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00c      	beq.n	8003b4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d007      	beq.n	8003b4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 ffd2 	bl	8004af0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00c      	beq.n	8003b70 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d007      	beq.n	8003b70 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fa9e 	bl	80040ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00c      	beq.n	8003b94 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f003 0320 	and.w	r3, r3, #32
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d007      	beq.n	8003b94 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0220 	mvn.w	r2, #32
 8003b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 ffa4 	bl	8004adc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b94:	bf00      	nop
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_TIM_IC_ConfigChannel+0x1e>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e088      	b.n	8003ccc <HAL_TIM_IC_ConfigChannel+0x130>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d11b      	bne.n	8003c00 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003bd8:	f000 fcc8 	bl	800456c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 020c 	bic.w	r2, r2, #12
 8003bea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6999      	ldr	r1, [r3, #24]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	619a      	str	r2, [r3, #24]
 8003bfe:	e060      	b.n	8003cc2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d11c      	bne.n	8003c40 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003c16:	f000 fd4c 	bl	80046b2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	699a      	ldr	r2, [r3, #24]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003c28:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6999      	ldr	r1, [r3, #24]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	021a      	lsls	r2, r3, #8
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	619a      	str	r2, [r3, #24]
 8003c3e:	e040      	b.n	8003cc2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d11b      	bne.n	8003c7e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003c56:	f000 fd99 	bl	800478c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69da      	ldr	r2, [r3, #28]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 020c 	bic.w	r2, r2, #12
 8003c68:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	69d9      	ldr	r1, [r3, #28]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	61da      	str	r2, [r3, #28]
 8003c7c:	e021      	b.n	8003cc2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b0c      	cmp	r3, #12
 8003c82:	d11c      	bne.n	8003cbe <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003c94:	f000 fdb6 	bl	8004804 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69da      	ldr	r2, [r3, #28]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003ca6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	69d9      	ldr	r1, [r3, #28]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	021a      	lsls	r2, r3, #8
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	61da      	str	r2, [r3, #28]
 8003cbc:	e001      	b.n	8003cc2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3718      	adds	r7, #24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d101      	bne.n	8003cf2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e0ae      	b.n	8003e50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b0c      	cmp	r3, #12
 8003cfe:	f200 809f 	bhi.w	8003e40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d02:	a201      	add	r2, pc, #4	@ (adr r2, 8003d08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d08:	08003d3d 	.word	0x08003d3d
 8003d0c:	08003e41 	.word	0x08003e41
 8003d10:	08003e41 	.word	0x08003e41
 8003d14:	08003e41 	.word	0x08003e41
 8003d18:	08003d7d 	.word	0x08003d7d
 8003d1c:	08003e41 	.word	0x08003e41
 8003d20:	08003e41 	.word	0x08003e41
 8003d24:	08003e41 	.word	0x08003e41
 8003d28:	08003dbf 	.word	0x08003dbf
 8003d2c:	08003e41 	.word	0x08003e41
 8003d30:	08003e41 	.word	0x08003e41
 8003d34:	08003e41 	.word	0x08003e41
 8003d38:	08003dff 	.word	0x08003dff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68b9      	ldr	r1, [r7, #8]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fa62 	bl	800420c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0208 	orr.w	r2, r2, #8
 8003d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0204 	bic.w	r2, r2, #4
 8003d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6999      	ldr	r1, [r3, #24]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	691a      	ldr	r2, [r3, #16]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	619a      	str	r2, [r3, #24]
      break;
 8003d7a:	e064      	b.n	8003e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68b9      	ldr	r1, [r7, #8]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fab2 	bl	80042ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6999      	ldr	r1, [r3, #24]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	021a      	lsls	r2, r3, #8
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	619a      	str	r2, [r3, #24]
      break;
 8003dbc:	e043      	b.n	8003e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68b9      	ldr	r1, [r7, #8]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fb07 	bl	80043d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69da      	ldr	r2, [r3, #28]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f042 0208 	orr.w	r2, r2, #8
 8003dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69da      	ldr	r2, [r3, #28]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0204 	bic.w	r2, r2, #4
 8003de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69d9      	ldr	r1, [r3, #28]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	61da      	str	r2, [r3, #28]
      break;
 8003dfc:	e023      	b.n	8003e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fb5b 	bl	80044c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69da      	ldr	r2, [r3, #28]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69da      	ldr	r2, [r3, #28]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69d9      	ldr	r1, [r3, #28]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	021a      	lsls	r2, r3, #8
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	61da      	str	r2, [r3, #28]
      break;
 8003e3e:	e002      	b.n	8003e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	75fb      	strb	r3, [r7, #23]
      break;
 8003e44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_TIM_ConfigClockSource+0x1c>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e0b4      	b.n	8003fde <HAL_TIM_ConfigClockSource+0x186>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eac:	d03e      	beq.n	8003f2c <HAL_TIM_ConfigClockSource+0xd4>
 8003eae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eb2:	f200 8087 	bhi.w	8003fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eba:	f000 8086 	beq.w	8003fca <HAL_TIM_ConfigClockSource+0x172>
 8003ebe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ec2:	d87f      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec4:	2b70      	cmp	r3, #112	@ 0x70
 8003ec6:	d01a      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0xa6>
 8003ec8:	2b70      	cmp	r3, #112	@ 0x70
 8003eca:	d87b      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ecc:	2b60      	cmp	r3, #96	@ 0x60
 8003ece:	d050      	beq.n	8003f72 <HAL_TIM_ConfigClockSource+0x11a>
 8003ed0:	2b60      	cmp	r3, #96	@ 0x60
 8003ed2:	d877      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed4:	2b50      	cmp	r3, #80	@ 0x50
 8003ed6:	d03c      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0xfa>
 8003ed8:	2b50      	cmp	r3, #80	@ 0x50
 8003eda:	d873      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003edc:	2b40      	cmp	r3, #64	@ 0x40
 8003ede:	d058      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x13a>
 8003ee0:	2b40      	cmp	r3, #64	@ 0x40
 8003ee2:	d86f      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee4:	2b30      	cmp	r3, #48	@ 0x30
 8003ee6:	d064      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003ee8:	2b30      	cmp	r3, #48	@ 0x30
 8003eea:	d86b      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d060      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	d867      	bhi.n	8003fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d05c      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003ef8:	2b10      	cmp	r3, #16
 8003efa:	d05a      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003efc:	e062      	b.n	8003fc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f0e:	f000 fcd1 	bl	80048b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	609a      	str	r2, [r3, #8]
      break;
 8003f2a:	e04f      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f3c:	f000 fcba 	bl	80048b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f4e:	609a      	str	r2, [r3, #8]
      break;
 8003f50:	e03c      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f000 fb78 	bl	8004654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2150      	movs	r1, #80	@ 0x50
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fc87 	bl	800487e <TIM_ITRx_SetConfig>
      break;
 8003f70:	e02c      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f000 fbd4 	bl	800472c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2160      	movs	r1, #96	@ 0x60
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fc77 	bl	800487e <TIM_ITRx_SetConfig>
      break;
 8003f90:	e01c      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f000 fb58 	bl	8004654 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2140      	movs	r1, #64	@ 0x40
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fc67 	bl	800487e <TIM_ITRx_SetConfig>
      break;
 8003fb0:	e00c      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	f000 fc5e 	bl	800487e <TIM_ITRx_SetConfig>
      break;
 8003fc2:	e003      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fc8:	e000      	b.n	8003fcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b0c      	cmp	r3, #12
 8003ffa:	d831      	bhi.n	8004060 <HAL_TIM_ReadCapturedValue+0x78>
 8003ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8004004 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	08004039 	.word	0x08004039
 8004008:	08004061 	.word	0x08004061
 800400c:	08004061 	.word	0x08004061
 8004010:	08004061 	.word	0x08004061
 8004014:	08004043 	.word	0x08004043
 8004018:	08004061 	.word	0x08004061
 800401c:	08004061 	.word	0x08004061
 8004020:	08004061 	.word	0x08004061
 8004024:	0800404d 	.word	0x0800404d
 8004028:	08004061 	.word	0x08004061
 800402c:	08004061 	.word	0x08004061
 8004030:	08004061 	.word	0x08004061
 8004034:	08004057 	.word	0x08004057
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800403e:	60fb      	str	r3, [r7, #12]

      break;
 8004040:	e00f      	b.n	8004062 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004048:	60fb      	str	r3, [r7, #12]

      break;
 800404a:	e00a      	b.n	8004062 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004052:	60fb      	str	r3, [r7, #12]

      break;
 8004054:	e005      	b.n	8004062 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405c:	60fb      	str	r3, [r7, #12]

      break;
 800405e:	e000      	b.n	8004062 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004060:	bf00      	nop
  }

  return tmpreg;
 8004062:	68fb      	ldr	r3, [r7, #12]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a43      	ldr	r2, [pc, #268]	@ (80041e0 <TIM_Base_SetConfig+0x120>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d013      	beq.n	8004100 <TIM_Base_SetConfig+0x40>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040de:	d00f      	beq.n	8004100 <TIM_Base_SetConfig+0x40>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a40      	ldr	r2, [pc, #256]	@ (80041e4 <TIM_Base_SetConfig+0x124>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d00b      	beq.n	8004100 <TIM_Base_SetConfig+0x40>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a3f      	ldr	r2, [pc, #252]	@ (80041e8 <TIM_Base_SetConfig+0x128>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d007      	beq.n	8004100 <TIM_Base_SetConfig+0x40>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a3e      	ldr	r2, [pc, #248]	@ (80041ec <TIM_Base_SetConfig+0x12c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d003      	beq.n	8004100 <TIM_Base_SetConfig+0x40>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a3d      	ldr	r2, [pc, #244]	@ (80041f0 <TIM_Base_SetConfig+0x130>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d108      	bne.n	8004112 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a32      	ldr	r2, [pc, #200]	@ (80041e0 <TIM_Base_SetConfig+0x120>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d02b      	beq.n	8004172 <TIM_Base_SetConfig+0xb2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004120:	d027      	beq.n	8004172 <TIM_Base_SetConfig+0xb2>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a2f      	ldr	r2, [pc, #188]	@ (80041e4 <TIM_Base_SetConfig+0x124>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d023      	beq.n	8004172 <TIM_Base_SetConfig+0xb2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a2e      	ldr	r2, [pc, #184]	@ (80041e8 <TIM_Base_SetConfig+0x128>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d01f      	beq.n	8004172 <TIM_Base_SetConfig+0xb2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a2d      	ldr	r2, [pc, #180]	@ (80041ec <TIM_Base_SetConfig+0x12c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d01b      	beq.n	8004172 <TIM_Base_SetConfig+0xb2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a2c      	ldr	r2, [pc, #176]	@ (80041f0 <TIM_Base_SetConfig+0x130>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d017      	beq.n	8004172 <TIM_Base_SetConfig+0xb2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a2b      	ldr	r2, [pc, #172]	@ (80041f4 <TIM_Base_SetConfig+0x134>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d013      	beq.n	8004172 <TIM_Base_SetConfig+0xb2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a2a      	ldr	r2, [pc, #168]	@ (80041f8 <TIM_Base_SetConfig+0x138>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d00f      	beq.n	8004172 <TIM_Base_SetConfig+0xb2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a29      	ldr	r2, [pc, #164]	@ (80041fc <TIM_Base_SetConfig+0x13c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00b      	beq.n	8004172 <TIM_Base_SetConfig+0xb2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a28      	ldr	r2, [pc, #160]	@ (8004200 <TIM_Base_SetConfig+0x140>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d007      	beq.n	8004172 <TIM_Base_SetConfig+0xb2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a27      	ldr	r2, [pc, #156]	@ (8004204 <TIM_Base_SetConfig+0x144>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d003      	beq.n	8004172 <TIM_Base_SetConfig+0xb2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a26      	ldr	r2, [pc, #152]	@ (8004208 <TIM_Base_SetConfig+0x148>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d108      	bne.n	8004184 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4313      	orrs	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a0e      	ldr	r2, [pc, #56]	@ (80041e0 <TIM_Base_SetConfig+0x120>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d003      	beq.n	80041b2 <TIM_Base_SetConfig+0xf2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a10      	ldr	r2, [pc, #64]	@ (80041f0 <TIM_Base_SetConfig+0x130>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d103      	bne.n	80041ba <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f043 0204 	orr.w	r2, r3, #4
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	601a      	str	r2, [r3, #0]
}
 80041d2:	bf00      	nop
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40010000 	.word	0x40010000
 80041e4:	40000400 	.word	0x40000400
 80041e8:	40000800 	.word	0x40000800
 80041ec:	40000c00 	.word	0x40000c00
 80041f0:	40010400 	.word	0x40010400
 80041f4:	40014000 	.word	0x40014000
 80041f8:	40014400 	.word	0x40014400
 80041fc:	40014800 	.word	0x40014800
 8004200:	40001800 	.word	0x40001800
 8004204:	40001c00 	.word	0x40001c00
 8004208:	40002000 	.word	0x40002000

0800420c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	f023 0201 	bic.w	r2, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800423a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 0303 	bic.w	r3, r3, #3
 8004242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f023 0302 	bic.w	r3, r3, #2
 8004254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	4313      	orrs	r3, r2
 800425e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a20      	ldr	r2, [pc, #128]	@ (80042e4 <TIM_OC1_SetConfig+0xd8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d003      	beq.n	8004270 <TIM_OC1_SetConfig+0x64>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a1f      	ldr	r2, [pc, #124]	@ (80042e8 <TIM_OC1_SetConfig+0xdc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d10c      	bne.n	800428a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f023 0308 	bic.w	r3, r3, #8
 8004276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	4313      	orrs	r3, r2
 8004280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f023 0304 	bic.w	r3, r3, #4
 8004288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a15      	ldr	r2, [pc, #84]	@ (80042e4 <TIM_OC1_SetConfig+0xd8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d003      	beq.n	800429a <TIM_OC1_SetConfig+0x8e>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a14      	ldr	r2, [pc, #80]	@ (80042e8 <TIM_OC1_SetConfig+0xdc>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d111      	bne.n	80042be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	621a      	str	r2, [r3, #32]
}
 80042d8:	bf00      	nop
 80042da:	371c      	adds	r7, #28
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	40010000 	.word	0x40010000
 80042e8:	40010400 	.word	0x40010400

080042ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	f023 0210 	bic.w	r2, r3, #16
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800431a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4313      	orrs	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f023 0320 	bic.w	r3, r3, #32
 8004336:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	4313      	orrs	r3, r2
 8004342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a22      	ldr	r2, [pc, #136]	@ (80043d0 <TIM_OC2_SetConfig+0xe4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d003      	beq.n	8004354 <TIM_OC2_SetConfig+0x68>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a21      	ldr	r2, [pc, #132]	@ (80043d4 <TIM_OC2_SetConfig+0xe8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d10d      	bne.n	8004370 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800435a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800436e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a17      	ldr	r2, [pc, #92]	@ (80043d0 <TIM_OC2_SetConfig+0xe4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d003      	beq.n	8004380 <TIM_OC2_SetConfig+0x94>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a16      	ldr	r2, [pc, #88]	@ (80043d4 <TIM_OC2_SetConfig+0xe8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d113      	bne.n	80043a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800438e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	4313      	orrs	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	621a      	str	r2, [r3, #32]
}
 80043c2:	bf00      	nop
 80043c4:	371c      	adds	r7, #28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40010000 	.word	0x40010000
 80043d4:	40010400 	.word	0x40010400

080043d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043d8:	b480      	push	{r7}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0303 	bic.w	r3, r3, #3
 800440e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	021b      	lsls	r3, r3, #8
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a21      	ldr	r2, [pc, #132]	@ (80044b8 <TIM_OC3_SetConfig+0xe0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d003      	beq.n	800443e <TIM_OC3_SetConfig+0x66>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a20      	ldr	r2, [pc, #128]	@ (80044bc <TIM_OC3_SetConfig+0xe4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d10d      	bne.n	800445a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004444:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a16      	ldr	r2, [pc, #88]	@ (80044b8 <TIM_OC3_SetConfig+0xe0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d003      	beq.n	800446a <TIM_OC3_SetConfig+0x92>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a15      	ldr	r2, [pc, #84]	@ (80044bc <TIM_OC3_SetConfig+0xe4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d113      	bne.n	8004492 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	621a      	str	r2, [r3, #32]
}
 80044ac:	bf00      	nop
 80044ae:	371c      	adds	r7, #28
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	40010000 	.word	0x40010000
 80044bc:	40010400 	.word	0x40010400

080044c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	021b      	lsls	r3, r3, #8
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4313      	orrs	r3, r2
 8004502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800450a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	031b      	lsls	r3, r3, #12
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a12      	ldr	r2, [pc, #72]	@ (8004564 <TIM_OC4_SetConfig+0xa4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d003      	beq.n	8004528 <TIM_OC4_SetConfig+0x68>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a11      	ldr	r2, [pc, #68]	@ (8004568 <TIM_OC4_SetConfig+0xa8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d109      	bne.n	800453c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800452e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	019b      	lsls	r3, r3, #6
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	621a      	str	r2, [r3, #32]
}
 8004556:	bf00      	nop
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	40010000 	.word	0x40010000
 8004568:	40010400 	.word	0x40010400

0800456c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	f023 0201 	bic.w	r2, r3, #1
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4a28      	ldr	r2, [pc, #160]	@ (8004638 <TIM_TI1_SetConfig+0xcc>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d01b      	beq.n	80045d2 <TIM_TI1_SetConfig+0x66>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a0:	d017      	beq.n	80045d2 <TIM_TI1_SetConfig+0x66>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4a25      	ldr	r2, [pc, #148]	@ (800463c <TIM_TI1_SetConfig+0xd0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d013      	beq.n	80045d2 <TIM_TI1_SetConfig+0x66>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4a24      	ldr	r2, [pc, #144]	@ (8004640 <TIM_TI1_SetConfig+0xd4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00f      	beq.n	80045d2 <TIM_TI1_SetConfig+0x66>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4a23      	ldr	r2, [pc, #140]	@ (8004644 <TIM_TI1_SetConfig+0xd8>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00b      	beq.n	80045d2 <TIM_TI1_SetConfig+0x66>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4a22      	ldr	r2, [pc, #136]	@ (8004648 <TIM_TI1_SetConfig+0xdc>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d007      	beq.n	80045d2 <TIM_TI1_SetConfig+0x66>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4a21      	ldr	r2, [pc, #132]	@ (800464c <TIM_TI1_SetConfig+0xe0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d003      	beq.n	80045d2 <TIM_TI1_SetConfig+0x66>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4a20      	ldr	r2, [pc, #128]	@ (8004650 <TIM_TI1_SetConfig+0xe4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d101      	bne.n	80045d6 <TIM_TI1_SetConfig+0x6a>
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <TIM_TI1_SetConfig+0x6c>
 80045d6:	2300      	movs	r3, #0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d008      	beq.n	80045ee <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f023 0303 	bic.w	r3, r3, #3
 80045e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	e003      	b.n	80045f6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f043 0301 	orr.w	r3, r3, #1
 80045f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	b2db      	uxtb	r3, r3
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	4313      	orrs	r3, r2
 8004608:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f023 030a 	bic.w	r3, r3, #10
 8004610:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f003 030a 	and.w	r3, r3, #10
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	621a      	str	r2, [r3, #32]
}
 800462a:	bf00      	nop
 800462c:	371c      	adds	r7, #28
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	40010000 	.word	0x40010000
 800463c:	40000400 	.word	0x40000400
 8004640:	40000800 	.word	0x40000800
 8004644:	40000c00 	.word	0x40000c00
 8004648:	40010400 	.word	0x40010400
 800464c:	40014000 	.word	0x40014000
 8004650:	40001800 	.word	0x40001800

08004654 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004654:	b480      	push	{r7}
 8004656:	b087      	sub	sp, #28
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	f023 0201 	bic.w	r2, r3, #1
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800467e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4313      	orrs	r3, r2
 8004688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f023 030a 	bic.w	r3, r3, #10
 8004690:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	621a      	str	r2, [r3, #32]
}
 80046a6:	bf00      	nop
 80046a8:	371c      	adds	r7, #28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b087      	sub	sp, #28
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	607a      	str	r2, [r7, #4]
 80046be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	f023 0210 	bic.w	r2, r3, #16
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	021b      	lsls	r3, r3, #8
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	031b      	lsls	r3, r3, #12
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004704:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	011b      	lsls	r3, r3, #4
 800470a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	621a      	str	r2, [r3, #32]
}
 8004720:	bf00      	nop
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	f023 0210 	bic.w	r2, r3, #16
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	031b      	lsls	r3, r3, #12
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004768:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	621a      	str	r2, [r3, #32]
}
 8004780:	bf00      	nop
 8004782:	371c      	adds	r7, #28
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f023 0303 	bic.w	r3, r3, #3
 80047b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80047dc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	021b      	lsls	r3, r3, #8
 80047e2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	621a      	str	r2, [r3, #32]
}
 80047f8:	bf00      	nop
 80047fa:	371c      	adds	r7, #28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
 8004810:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004830:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	021b      	lsls	r3, r3, #8
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004842:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	031b      	lsls	r3, r3, #12
 8004848:	b29b      	uxth	r3, r3
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004856:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	031b      	lsls	r3, r3, #12
 800485c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	4313      	orrs	r3, r2
 8004864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	621a      	str	r2, [r3, #32]
}
 8004872:	bf00      	nop
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800487e:	b480      	push	{r7}
 8004880:	b085      	sub	sp, #20
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	f043 0307 	orr.w	r3, r3, #7
 80048a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	609a      	str	r2, [r3, #8]
}
 80048a8:	bf00      	nop
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b087      	sub	sp, #28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	021a      	lsls	r2, r3, #8
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	431a      	orrs	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4313      	orrs	r3, r2
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	4313      	orrs	r3, r2
 80048e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	609a      	str	r2, [r3, #8]
}
 80048e8:	bf00      	nop
 80048ea:	371c      	adds	r7, #28
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f003 031f 	and.w	r3, r3, #31
 8004906:	2201      	movs	r2, #1
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a1a      	ldr	r2, [r3, #32]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	43db      	mvns	r3, r3
 8004916:	401a      	ands	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a1a      	ldr	r2, [r3, #32]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f003 031f 	and.w	r3, r3, #31
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	fa01 f303 	lsl.w	r3, r1, r3
 800492c:	431a      	orrs	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
	...

08004940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004950:	2b01      	cmp	r3, #1
 8004952:	d101      	bne.n	8004958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004954:	2302      	movs	r3, #2
 8004956:	e05a      	b.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800497e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a21      	ldr	r2, [pc, #132]	@ (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d022      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049a4:	d01d      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d018      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d013      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a1a      	ldr	r2, [pc, #104]	@ (8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00e      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a18      	ldr	r2, [pc, #96]	@ (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d009      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a17      	ldr	r2, [pc, #92]	@ (8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d004      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a15      	ldr	r2, [pc, #84]	@ (8004a34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d10c      	bne.n	80049fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40010000 	.word	0x40010000
 8004a20:	40000400 	.word	0x40000400
 8004a24:	40000800 	.word	0x40000800
 8004a28:	40000c00 	.word	0x40000c00
 8004a2c:	40010400 	.word	0x40010400
 8004a30:	40014000 	.word	0x40014000
 8004a34:	40001800 	.word	0x40001800

08004a38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e03d      	b.n	8004ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e042      	b.n	8004b9c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fd f80c 	bl	8001b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2224      	movs	r2, #36	@ 0x24
 8004b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 fdd3 	bl	80056f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695a      	ldr	r2, [r3, #20]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3708      	adds	r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08a      	sub	sp, #40	@ 0x28
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	d175      	bne.n	8004cb0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <HAL_UART_Transmit+0x2c>
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e06e      	b.n	8004cb2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2221      	movs	r2, #33	@ 0x21
 8004bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004be2:	f7fd f943 	bl	8001e6c <HAL_GetTick>
 8004be6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	88fa      	ldrh	r2, [r7, #6]
 8004bec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	88fa      	ldrh	r2, [r7, #6]
 8004bf2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bfc:	d108      	bne.n	8004c10 <HAL_UART_Transmit+0x6c>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d104      	bne.n	8004c10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	61bb      	str	r3, [r7, #24]
 8004c0e:	e003      	b.n	8004c18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c18:	e02e      	b.n	8004c78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2200      	movs	r2, #0
 8004c22:	2180      	movs	r1, #128	@ 0x80
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 fb37 	bl	8005298 <UART_WaitOnFlagUntilTimeout>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e03a      	b.n	8004cb2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10b      	bne.n	8004c5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	881b      	ldrh	r3, [r3, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	3302      	adds	r3, #2
 8004c56:	61bb      	str	r3, [r7, #24]
 8004c58:	e007      	b.n	8004c6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	781a      	ldrb	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	3301      	adds	r3, #1
 8004c68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1cb      	bne.n	8004c1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2140      	movs	r1, #64	@ 0x40
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 fb03 	bl	8005298 <UART_WaitOnFlagUntilTimeout>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e006      	b.n	8004cb2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	e000      	b.n	8004cb2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004cb0:	2302      	movs	r3, #2
  }
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3720      	adds	r7, #32
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	60f8      	str	r0, [r7, #12]
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b20      	cmp	r3, #32
 8004cd2:	d112      	bne.n	8004cfa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <HAL_UART_Receive_IT+0x26>
 8004cda:	88fb      	ldrh	r3, [r7, #6]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e00b      	b.n	8004cfc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004cea:	88fb      	ldrh	r3, [r7, #6]
 8004cec:	461a      	mov	r2, r3
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 fb2a 	bl	800534a <UART_Start_Receive_IT>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	e000      	b.n	8004cfc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004cfa:	2302      	movs	r3, #2
  }
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b0ba      	sub	sp, #232	@ 0xe8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004d42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10f      	bne.n	8004d6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d009      	beq.n	8004d6a <HAL_UART_IRQHandler+0x66>
 8004d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d5a:	f003 0320 	and.w	r3, r3, #32
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fc07 	bl	8005576 <UART_Receive_IT>
      return;
 8004d68:	e273      	b.n	8005252 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 80de 	beq.w	8004f30 <HAL_UART_IRQHandler+0x22c>
 8004d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d106      	bne.n	8004d8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d84:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 80d1 	beq.w	8004f30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00b      	beq.n	8004db2 <HAL_UART_IRQHandler+0xae>
 8004d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004daa:	f043 0201 	orr.w	r2, r3, #1
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004db6:	f003 0304 	and.w	r3, r3, #4
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00b      	beq.n	8004dd6 <HAL_UART_IRQHandler+0xd2>
 8004dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d005      	beq.n	8004dd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dce:	f043 0202 	orr.w	r2, r3, #2
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00b      	beq.n	8004dfa <HAL_UART_IRQHandler+0xf6>
 8004de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d005      	beq.n	8004dfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df2:	f043 0204 	orr.w	r2, r3, #4
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d011      	beq.n	8004e2a <HAL_UART_IRQHandler+0x126>
 8004e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e0a:	f003 0320 	and.w	r3, r3, #32
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d105      	bne.n	8004e1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e22:	f043 0208 	orr.w	r2, r3, #8
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 820a 	beq.w	8005248 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e38:	f003 0320 	and.w	r3, r3, #32
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d008      	beq.n	8004e52 <HAL_UART_IRQHandler+0x14e>
 8004e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e44:	f003 0320 	and.w	r3, r3, #32
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 fb92 	bl	8005576 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e5c:	2b40      	cmp	r3, #64	@ 0x40
 8004e5e:	bf0c      	ite	eq
 8004e60:	2301      	moveq	r3, #1
 8004e62:	2300      	movne	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d103      	bne.n	8004e7e <HAL_UART_IRQHandler+0x17a>
 8004e76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d04f      	beq.n	8004f1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 fa9d 	bl	80053be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e8e:	2b40      	cmp	r3, #64	@ 0x40
 8004e90:	d141      	bne.n	8004f16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3314      	adds	r3, #20
 8004e98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ea0:	e853 3f00 	ldrex	r3, [r3]
 8004ea4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004ea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004eac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3314      	adds	r3, #20
 8004eba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004ebe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004eca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004ed6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1d9      	bne.n	8004e92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d013      	beq.n	8004f0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eea:	4a8a      	ldr	r2, [pc, #552]	@ (8005114 <HAL_UART_IRQHandler+0x410>)
 8004eec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fd f96b 	bl	80021ce <HAL_DMA_Abort_IT>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d016      	beq.n	8004f2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f08:	4610      	mov	r0, r2
 8004f0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f0c:	e00e      	b.n	8004f2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f9ac 	bl	800526c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f14:	e00a      	b.n	8004f2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f9a8 	bl	800526c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f1c:	e006      	b.n	8004f2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f9a4 	bl	800526c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004f2a:	e18d      	b.n	8005248 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f2c:	bf00      	nop
    return;
 8004f2e:	e18b      	b.n	8005248 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	f040 8167 	bne.w	8005208 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f3e:	f003 0310 	and.w	r3, r3, #16
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 8160 	beq.w	8005208 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f4c:	f003 0310 	and.w	r3, r3, #16
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 8159 	beq.w	8005208 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f56:	2300      	movs	r3, #0
 8004f58:	60bb      	str	r3, [r7, #8]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60bb      	str	r3, [r7, #8]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	60bb      	str	r3, [r7, #8]
 8004f6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f76:	2b40      	cmp	r3, #64	@ 0x40
 8004f78:	f040 80ce 	bne.w	8005118 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 80a9 	beq.w	80050e4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	f080 80a2 	bcs.w	80050e4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fa6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fb2:	f000 8088 	beq.w	80050c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	330c      	adds	r3, #12
 8004fbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004fc4:	e853 3f00 	ldrex	r3, [r3]
 8004fc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004fd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	330c      	adds	r3, #12
 8004fde:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004fe2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fe6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004fee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ff2:	e841 2300 	strex	r3, r2, [r1]
 8004ff6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1d9      	bne.n	8004fb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3314      	adds	r3, #20
 8005008:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800500c:	e853 3f00 	ldrex	r3, [r3]
 8005010:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005012:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005014:	f023 0301 	bic.w	r3, r3, #1
 8005018:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3314      	adds	r3, #20
 8005022:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005026:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800502a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800502e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005038:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1e1      	bne.n	8005002 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3314      	adds	r3, #20
 8005044:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005046:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005048:	e853 3f00 	ldrex	r3, [r3]
 800504c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800504e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005050:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005054:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3314      	adds	r3, #20
 800505e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005062:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005064:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005068:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005070:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1e3      	bne.n	800503e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	330c      	adds	r3, #12
 800508a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800508e:	e853 3f00 	ldrex	r3, [r3]
 8005092:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005094:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005096:	f023 0310 	bic.w	r3, r3, #16
 800509a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	330c      	adds	r3, #12
 80050a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80050a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80050aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050b0:	e841 2300 	strex	r3, r2, [r1]
 80050b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80050b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1e3      	bne.n	8005084 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fd f814 	bl	80020ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2202      	movs	r2, #2
 80050ca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	b29b      	uxth	r3, r3
 80050da:	4619      	mov	r1, r3
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f8cf 	bl	8005280 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80050e2:	e0b3      	b.n	800524c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80050e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050ec:	429a      	cmp	r2, r3
 80050ee:	f040 80ad 	bne.w	800524c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050fc:	f040 80a6 	bne.w	800524c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800510a:	4619      	mov	r1, r3
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f8b7 	bl	8005280 <HAL_UARTEx_RxEventCallback>
      return;
 8005112:	e09b      	b.n	800524c <HAL_UART_IRQHandler+0x548>
 8005114:	08005485 	.word	0x08005485
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005120:	b29b      	uxth	r3, r3
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800512c:	b29b      	uxth	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	f000 808e 	beq.w	8005250 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005134:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 8089 	beq.w	8005250 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	330c      	adds	r3, #12
 8005144:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800514e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005150:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005154:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	330c      	adds	r3, #12
 800515e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005162:	647a      	str	r2, [r7, #68]	@ 0x44
 8005164:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005166:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005168:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e3      	bne.n	800513e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3314      	adds	r3, #20
 800517c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005180:	e853 3f00 	ldrex	r3, [r3]
 8005184:	623b      	str	r3, [r7, #32]
   return(result);
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	f023 0301 	bic.w	r3, r3, #1
 800518c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3314      	adds	r3, #20
 8005196:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800519a:	633a      	str	r2, [r7, #48]	@ 0x30
 800519c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e3      	bne.n	8005176 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	330c      	adds	r3, #12
 80051c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	e853 3f00 	ldrex	r3, [r3]
 80051ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0310 	bic.w	r3, r3, #16
 80051d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	330c      	adds	r3, #12
 80051dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80051e0:	61fa      	str	r2, [r7, #28]
 80051e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e4:	69b9      	ldr	r1, [r7, #24]
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	e841 2300 	strex	r3, r2, [r1]
 80051ec:	617b      	str	r3, [r7, #20]
   return(result);
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1e3      	bne.n	80051bc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051fe:	4619      	mov	r1, r3
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f83d 	bl	8005280 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005206:	e023      	b.n	8005250 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800520c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005210:	2b00      	cmp	r3, #0
 8005212:	d009      	beq.n	8005228 <HAL_UART_IRQHandler+0x524>
 8005214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f940 	bl	80054a6 <UART_Transmit_IT>
    return;
 8005226:	e014      	b.n	8005252 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800522c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00e      	beq.n	8005252 <HAL_UART_IRQHandler+0x54e>
 8005234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800523c:	2b00      	cmp	r3, #0
 800523e:	d008      	beq.n	8005252 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f980 	bl	8005546 <UART_EndTransmit_IT>
    return;
 8005246:	e004      	b.n	8005252 <HAL_UART_IRQHandler+0x54e>
    return;
 8005248:	bf00      	nop
 800524a:	e002      	b.n	8005252 <HAL_UART_IRQHandler+0x54e>
      return;
 800524c:	bf00      	nop
 800524e:	e000      	b.n	8005252 <HAL_UART_IRQHandler+0x54e>
      return;
 8005250:	bf00      	nop
  }
}
 8005252:	37e8      	adds	r7, #232	@ 0xe8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	603b      	str	r3, [r7, #0]
 80052a4:	4613      	mov	r3, r2
 80052a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a8:	e03b      	b.n	8005322 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052b0:	d037      	beq.n	8005322 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b2:	f7fc fddb 	bl	8001e6c <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	6a3a      	ldr	r2, [r7, #32]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d302      	bcc.n	80052c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e03a      	b.n	8005342 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d023      	beq.n	8005322 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2b80      	cmp	r3, #128	@ 0x80
 80052de:	d020      	beq.n	8005322 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b40      	cmp	r3, #64	@ 0x40
 80052e4:	d01d      	beq.n	8005322 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0308 	and.w	r3, r3, #8
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d116      	bne.n	8005322 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80052f4:	2300      	movs	r3, #0
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 f857 	bl	80053be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2208      	movs	r2, #8
 8005314:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e00f      	b.n	8005342 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4013      	ands	r3, r2
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	429a      	cmp	r2, r3
 8005330:	bf0c      	ite	eq
 8005332:	2301      	moveq	r3, #1
 8005334:	2300      	movne	r3, #0
 8005336:	b2db      	uxtb	r3, r3
 8005338:	461a      	mov	r2, r3
 800533a:	79fb      	ldrb	r3, [r7, #7]
 800533c:	429a      	cmp	r2, r3
 800533e:	d0b4      	beq.n	80052aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3718      	adds	r7, #24
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800534a:	b480      	push	{r7}
 800534c:	b085      	sub	sp, #20
 800534e:	af00      	add	r7, sp, #0
 8005350:	60f8      	str	r0, [r7, #12]
 8005352:	60b9      	str	r1, [r7, #8]
 8005354:	4613      	mov	r3, r2
 8005356:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	88fa      	ldrh	r2, [r7, #6]
 8005362:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	88fa      	ldrh	r2, [r7, #6]
 8005368:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2222      	movs	r2, #34	@ 0x22
 8005374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d007      	beq.n	8005390 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800538e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695a      	ldr	r2, [r3, #20]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0201 	orr.w	r2, r2, #1
 800539e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0220 	orr.w	r2, r2, #32
 80053ae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053be:	b480      	push	{r7}
 80053c0:	b095      	sub	sp, #84	@ 0x54
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	330c      	adds	r3, #12
 80053cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d0:	e853 3f00 	ldrex	r3, [r3]
 80053d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	330c      	adds	r3, #12
 80053e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80053e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053ee:	e841 2300 	strex	r3, r2, [r1]
 80053f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1e5      	bne.n	80053c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3314      	adds	r3, #20
 8005400:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	e853 3f00 	ldrex	r3, [r3]
 8005408:	61fb      	str	r3, [r7, #28]
   return(result);
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	f023 0301 	bic.w	r3, r3, #1
 8005410:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3314      	adds	r3, #20
 8005418:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800541a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800541c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005420:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005422:	e841 2300 	strex	r3, r2, [r1]
 8005426:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1e5      	bne.n	80053fa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005432:	2b01      	cmp	r3, #1
 8005434:	d119      	bne.n	800546a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	330c      	adds	r3, #12
 800543c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	e853 3f00 	ldrex	r3, [r3]
 8005444:	60bb      	str	r3, [r7, #8]
   return(result);
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f023 0310 	bic.w	r3, r3, #16
 800544c:	647b      	str	r3, [r7, #68]	@ 0x44
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	330c      	adds	r3, #12
 8005454:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005456:	61ba      	str	r2, [r7, #24]
 8005458:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545a:	6979      	ldr	r1, [r7, #20]
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	e841 2300 	strex	r3, r2, [r1]
 8005462:	613b      	str	r3, [r7, #16]
   return(result);
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1e5      	bne.n	8005436 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2220      	movs	r2, #32
 800546e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005478:	bf00      	nop
 800547a:	3754      	adds	r7, #84	@ 0x54
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005490:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f7ff fee7 	bl	800526c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800549e:	bf00      	nop
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b085      	sub	sp, #20
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b21      	cmp	r3, #33	@ 0x21
 80054b8:	d13e      	bne.n	8005538 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054c2:	d114      	bne.n	80054ee <UART_Transmit_IT+0x48>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d110      	bne.n	80054ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	1c9a      	adds	r2, r3, #2
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	621a      	str	r2, [r3, #32]
 80054ec:	e008      	b.n	8005500 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	1c59      	adds	r1, r3, #1
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6211      	str	r1, [r2, #32]
 80054f8:	781a      	ldrb	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005504:	b29b      	uxth	r3, r3
 8005506:	3b01      	subs	r3, #1
 8005508:	b29b      	uxth	r3, r3
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	4619      	mov	r1, r3
 800550e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10f      	bne.n	8005534 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005522:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005532:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005534:	2300      	movs	r3, #0
 8005536:	e000      	b.n	800553a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005538:	2302      	movs	r3, #2
  }
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b082      	sub	sp, #8
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800555c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2220      	movs	r2, #32
 8005562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7ff fe76 	bl	8005258 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b08c      	sub	sp, #48	@ 0x30
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800557e:	2300      	movs	r3, #0
 8005580:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005582:	2300      	movs	r3, #0
 8005584:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b22      	cmp	r3, #34	@ 0x22
 8005590:	f040 80aa 	bne.w	80056e8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800559c:	d115      	bne.n	80055ca <UART_Receive_IT+0x54>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d111      	bne.n	80055ca <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c2:	1c9a      	adds	r2, r3, #2
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80055c8:	e024      	b.n	8005614 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055d8:	d007      	beq.n	80055ea <UART_Receive_IT+0x74>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10a      	bne.n	80055f8 <UART_Receive_IT+0x82>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d106      	bne.n	80055f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f4:	701a      	strb	r2, [r3, #0]
 80055f6:	e008      	b.n	800560a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005604:	b2da      	uxtb	r2, r3
 8005606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005608:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005618:	b29b      	uxth	r3, r3
 800561a:	3b01      	subs	r3, #1
 800561c:	b29b      	uxth	r3, r3
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	4619      	mov	r1, r3
 8005622:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005624:	2b00      	cmp	r3, #0
 8005626:	d15d      	bne.n	80056e4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0220 	bic.w	r2, r2, #32
 8005636:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005646:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695a      	ldr	r2, [r3, #20]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0201 	bic.w	r2, r2, #1
 8005656:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2220      	movs	r2, #32
 800565c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566a:	2b01      	cmp	r3, #1
 800566c:	d135      	bne.n	80056da <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	330c      	adds	r3, #12
 800567a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	e853 3f00 	ldrex	r3, [r3]
 8005682:	613b      	str	r3, [r7, #16]
   return(result);
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	f023 0310 	bic.w	r3, r3, #16
 800568a:	627b      	str	r3, [r7, #36]	@ 0x24
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	330c      	adds	r3, #12
 8005692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005694:	623a      	str	r2, [r7, #32]
 8005696:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005698:	69f9      	ldr	r1, [r7, #28]
 800569a:	6a3a      	ldr	r2, [r7, #32]
 800569c:	e841 2300 	strex	r3, r2, [r1]
 80056a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1e5      	bne.n	8005674 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0310 	and.w	r3, r3, #16
 80056b2:	2b10      	cmp	r3, #16
 80056b4:	d10a      	bne.n	80056cc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056b6:	2300      	movs	r3, #0
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056d0:	4619      	mov	r1, r3
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7ff fdd4 	bl	8005280 <HAL_UARTEx_RxEventCallback>
 80056d8:	e002      	b.n	80056e0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7fb ffea 	bl	80016b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	e002      	b.n	80056ea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	e000      	b.n	80056ea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80056e8:	2302      	movs	r3, #2
  }
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3730      	adds	r7, #48	@ 0x30
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056f8:	b0c0      	sub	sp, #256	@ 0x100
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800570c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005710:	68d9      	ldr	r1, [r3, #12]
 8005712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	ea40 0301 	orr.w	r3, r0, r1
 800571c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800571e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	431a      	orrs	r2, r3
 800572c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	431a      	orrs	r2, r3
 8005734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	4313      	orrs	r3, r2
 800573c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800574c:	f021 010c 	bic.w	r1, r1, #12
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800575a:	430b      	orrs	r3, r1
 800575c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800575e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800576a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800576e:	6999      	ldr	r1, [r3, #24]
 8005770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	ea40 0301 	orr.w	r3, r0, r1
 800577a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800577c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	4b8f      	ldr	r3, [pc, #572]	@ (80059c0 <UART_SetConfig+0x2cc>)
 8005784:	429a      	cmp	r2, r3
 8005786:	d005      	beq.n	8005794 <UART_SetConfig+0xa0>
 8005788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	4b8d      	ldr	r3, [pc, #564]	@ (80059c4 <UART_SetConfig+0x2d0>)
 8005790:	429a      	cmp	r2, r3
 8005792:	d104      	bne.n	800579e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005794:	f7fd f80a 	bl	80027ac <HAL_RCC_GetPCLK2Freq>
 8005798:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800579c:	e003      	b.n	80057a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800579e:	f7fc fff1 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 80057a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057b0:	f040 810c 	bne.w	80059cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057b8:	2200      	movs	r2, #0
 80057ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80057c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80057c6:	4622      	mov	r2, r4
 80057c8:	462b      	mov	r3, r5
 80057ca:	1891      	adds	r1, r2, r2
 80057cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80057ce:	415b      	adcs	r3, r3
 80057d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80057d6:	4621      	mov	r1, r4
 80057d8:	eb12 0801 	adds.w	r8, r2, r1
 80057dc:	4629      	mov	r1, r5
 80057de:	eb43 0901 	adc.w	r9, r3, r1
 80057e2:	f04f 0200 	mov.w	r2, #0
 80057e6:	f04f 0300 	mov.w	r3, #0
 80057ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057f6:	4690      	mov	r8, r2
 80057f8:	4699      	mov	r9, r3
 80057fa:	4623      	mov	r3, r4
 80057fc:	eb18 0303 	adds.w	r3, r8, r3
 8005800:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005804:	462b      	mov	r3, r5
 8005806:	eb49 0303 	adc.w	r3, r9, r3
 800580a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800580e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800581a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800581e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005822:	460b      	mov	r3, r1
 8005824:	18db      	adds	r3, r3, r3
 8005826:	653b      	str	r3, [r7, #80]	@ 0x50
 8005828:	4613      	mov	r3, r2
 800582a:	eb42 0303 	adc.w	r3, r2, r3
 800582e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005830:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005834:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005838:	f7fb f978 	bl	8000b2c <__aeabi_uldivmod>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4b61      	ldr	r3, [pc, #388]	@ (80059c8 <UART_SetConfig+0x2d4>)
 8005842:	fba3 2302 	umull	r2, r3, r3, r2
 8005846:	095b      	lsrs	r3, r3, #5
 8005848:	011c      	lsls	r4, r3, #4
 800584a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800584e:	2200      	movs	r2, #0
 8005850:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005854:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005858:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800585c:	4642      	mov	r2, r8
 800585e:	464b      	mov	r3, r9
 8005860:	1891      	adds	r1, r2, r2
 8005862:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005864:	415b      	adcs	r3, r3
 8005866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005868:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800586c:	4641      	mov	r1, r8
 800586e:	eb12 0a01 	adds.w	sl, r2, r1
 8005872:	4649      	mov	r1, r9
 8005874:	eb43 0b01 	adc.w	fp, r3, r1
 8005878:	f04f 0200 	mov.w	r2, #0
 800587c:	f04f 0300 	mov.w	r3, #0
 8005880:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005884:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005888:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800588c:	4692      	mov	sl, r2
 800588e:	469b      	mov	fp, r3
 8005890:	4643      	mov	r3, r8
 8005892:	eb1a 0303 	adds.w	r3, sl, r3
 8005896:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800589a:	464b      	mov	r3, r9
 800589c:	eb4b 0303 	adc.w	r3, fp, r3
 80058a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80058b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058b8:	460b      	mov	r3, r1
 80058ba:	18db      	adds	r3, r3, r3
 80058bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80058be:	4613      	mov	r3, r2
 80058c0:	eb42 0303 	adc.w	r3, r2, r3
 80058c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80058c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80058ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80058ce:	f7fb f92d 	bl	8000b2c <__aeabi_uldivmod>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4611      	mov	r1, r2
 80058d8:	4b3b      	ldr	r3, [pc, #236]	@ (80059c8 <UART_SetConfig+0x2d4>)
 80058da:	fba3 2301 	umull	r2, r3, r3, r1
 80058de:	095b      	lsrs	r3, r3, #5
 80058e0:	2264      	movs	r2, #100	@ 0x64
 80058e2:	fb02 f303 	mul.w	r3, r2, r3
 80058e6:	1acb      	subs	r3, r1, r3
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80058ee:	4b36      	ldr	r3, [pc, #216]	@ (80059c8 <UART_SetConfig+0x2d4>)
 80058f0:	fba3 2302 	umull	r2, r3, r3, r2
 80058f4:	095b      	lsrs	r3, r3, #5
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80058fc:	441c      	add	r4, r3
 80058fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005902:	2200      	movs	r2, #0
 8005904:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005908:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800590c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005910:	4642      	mov	r2, r8
 8005912:	464b      	mov	r3, r9
 8005914:	1891      	adds	r1, r2, r2
 8005916:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005918:	415b      	adcs	r3, r3
 800591a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800591c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005920:	4641      	mov	r1, r8
 8005922:	1851      	adds	r1, r2, r1
 8005924:	6339      	str	r1, [r7, #48]	@ 0x30
 8005926:	4649      	mov	r1, r9
 8005928:	414b      	adcs	r3, r1
 800592a:	637b      	str	r3, [r7, #52]	@ 0x34
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	f04f 0300 	mov.w	r3, #0
 8005934:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005938:	4659      	mov	r1, fp
 800593a:	00cb      	lsls	r3, r1, #3
 800593c:	4651      	mov	r1, sl
 800593e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005942:	4651      	mov	r1, sl
 8005944:	00ca      	lsls	r2, r1, #3
 8005946:	4610      	mov	r0, r2
 8005948:	4619      	mov	r1, r3
 800594a:	4603      	mov	r3, r0
 800594c:	4642      	mov	r2, r8
 800594e:	189b      	adds	r3, r3, r2
 8005950:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005954:	464b      	mov	r3, r9
 8005956:	460a      	mov	r2, r1
 8005958:	eb42 0303 	adc.w	r3, r2, r3
 800595c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800596c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005970:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005974:	460b      	mov	r3, r1
 8005976:	18db      	adds	r3, r3, r3
 8005978:	62bb      	str	r3, [r7, #40]	@ 0x28
 800597a:	4613      	mov	r3, r2
 800597c:	eb42 0303 	adc.w	r3, r2, r3
 8005980:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005982:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005986:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800598a:	f7fb f8cf 	bl	8000b2c <__aeabi_uldivmod>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	4b0d      	ldr	r3, [pc, #52]	@ (80059c8 <UART_SetConfig+0x2d4>)
 8005994:	fba3 1302 	umull	r1, r3, r3, r2
 8005998:	095b      	lsrs	r3, r3, #5
 800599a:	2164      	movs	r1, #100	@ 0x64
 800599c:	fb01 f303 	mul.w	r3, r1, r3
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	3332      	adds	r3, #50	@ 0x32
 80059a6:	4a08      	ldr	r2, [pc, #32]	@ (80059c8 <UART_SetConfig+0x2d4>)
 80059a8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ac:	095b      	lsrs	r3, r3, #5
 80059ae:	f003 0207 	and.w	r2, r3, #7
 80059b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4422      	add	r2, r4
 80059ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059bc:	e106      	b.n	8005bcc <UART_SetConfig+0x4d8>
 80059be:	bf00      	nop
 80059c0:	40011000 	.word	0x40011000
 80059c4:	40011400 	.word	0x40011400
 80059c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059d0:	2200      	movs	r2, #0
 80059d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80059d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80059da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80059de:	4642      	mov	r2, r8
 80059e0:	464b      	mov	r3, r9
 80059e2:	1891      	adds	r1, r2, r2
 80059e4:	6239      	str	r1, [r7, #32]
 80059e6:	415b      	adcs	r3, r3
 80059e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80059ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059ee:	4641      	mov	r1, r8
 80059f0:	1854      	adds	r4, r2, r1
 80059f2:	4649      	mov	r1, r9
 80059f4:	eb43 0501 	adc.w	r5, r3, r1
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	00eb      	lsls	r3, r5, #3
 8005a02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a06:	00e2      	lsls	r2, r4, #3
 8005a08:	4614      	mov	r4, r2
 8005a0a:	461d      	mov	r5, r3
 8005a0c:	4643      	mov	r3, r8
 8005a0e:	18e3      	adds	r3, r4, r3
 8005a10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a14:	464b      	mov	r3, r9
 8005a16:	eb45 0303 	adc.w	r3, r5, r3
 8005a1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a2e:	f04f 0200 	mov.w	r2, #0
 8005a32:	f04f 0300 	mov.w	r3, #0
 8005a36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	008b      	lsls	r3, r1, #2
 8005a3e:	4621      	mov	r1, r4
 8005a40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a44:	4621      	mov	r1, r4
 8005a46:	008a      	lsls	r2, r1, #2
 8005a48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a4c:	f7fb f86e 	bl	8000b2c <__aeabi_uldivmod>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	4b60      	ldr	r3, [pc, #384]	@ (8005bd8 <UART_SetConfig+0x4e4>)
 8005a56:	fba3 2302 	umull	r2, r3, r3, r2
 8005a5a:	095b      	lsrs	r3, r3, #5
 8005a5c:	011c      	lsls	r4, r3, #4
 8005a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a70:	4642      	mov	r2, r8
 8005a72:	464b      	mov	r3, r9
 8005a74:	1891      	adds	r1, r2, r2
 8005a76:	61b9      	str	r1, [r7, #24]
 8005a78:	415b      	adcs	r3, r3
 8005a7a:	61fb      	str	r3, [r7, #28]
 8005a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a80:	4641      	mov	r1, r8
 8005a82:	1851      	adds	r1, r2, r1
 8005a84:	6139      	str	r1, [r7, #16]
 8005a86:	4649      	mov	r1, r9
 8005a88:	414b      	adcs	r3, r1
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	f04f 0300 	mov.w	r3, #0
 8005a94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a98:	4659      	mov	r1, fp
 8005a9a:	00cb      	lsls	r3, r1, #3
 8005a9c:	4651      	mov	r1, sl
 8005a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aa2:	4651      	mov	r1, sl
 8005aa4:	00ca      	lsls	r2, r1, #3
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4642      	mov	r2, r8
 8005aae:	189b      	adds	r3, r3, r2
 8005ab0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ab4:	464b      	mov	r3, r9
 8005ab6:	460a      	mov	r2, r1
 8005ab8:	eb42 0303 	adc.w	r3, r2, r3
 8005abc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005aca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005acc:	f04f 0200 	mov.w	r2, #0
 8005ad0:	f04f 0300 	mov.w	r3, #0
 8005ad4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ad8:	4649      	mov	r1, r9
 8005ada:	008b      	lsls	r3, r1, #2
 8005adc:	4641      	mov	r1, r8
 8005ade:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ae2:	4641      	mov	r1, r8
 8005ae4:	008a      	lsls	r2, r1, #2
 8005ae6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005aea:	f7fb f81f 	bl	8000b2c <__aeabi_uldivmod>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4611      	mov	r1, r2
 8005af4:	4b38      	ldr	r3, [pc, #224]	@ (8005bd8 <UART_SetConfig+0x4e4>)
 8005af6:	fba3 2301 	umull	r2, r3, r3, r1
 8005afa:	095b      	lsrs	r3, r3, #5
 8005afc:	2264      	movs	r2, #100	@ 0x64
 8005afe:	fb02 f303 	mul.w	r3, r2, r3
 8005b02:	1acb      	subs	r3, r1, r3
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	3332      	adds	r3, #50	@ 0x32
 8005b08:	4a33      	ldr	r2, [pc, #204]	@ (8005bd8 <UART_SetConfig+0x4e4>)
 8005b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0e:	095b      	lsrs	r3, r3, #5
 8005b10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b14:	441c      	add	r4, r3
 8005b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b24:	4642      	mov	r2, r8
 8005b26:	464b      	mov	r3, r9
 8005b28:	1891      	adds	r1, r2, r2
 8005b2a:	60b9      	str	r1, [r7, #8]
 8005b2c:	415b      	adcs	r3, r3
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b34:	4641      	mov	r1, r8
 8005b36:	1851      	adds	r1, r2, r1
 8005b38:	6039      	str	r1, [r7, #0]
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	414b      	adcs	r3, r1
 8005b3e:	607b      	str	r3, [r7, #4]
 8005b40:	f04f 0200 	mov.w	r2, #0
 8005b44:	f04f 0300 	mov.w	r3, #0
 8005b48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b4c:	4659      	mov	r1, fp
 8005b4e:	00cb      	lsls	r3, r1, #3
 8005b50:	4651      	mov	r1, sl
 8005b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b56:	4651      	mov	r1, sl
 8005b58:	00ca      	lsls	r2, r1, #3
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4603      	mov	r3, r0
 8005b60:	4642      	mov	r2, r8
 8005b62:	189b      	adds	r3, r3, r2
 8005b64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b66:	464b      	mov	r3, r9
 8005b68:	460a      	mov	r2, r1
 8005b6a:	eb42 0303 	adc.w	r3, r2, r3
 8005b6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b7c:	f04f 0200 	mov.w	r2, #0
 8005b80:	f04f 0300 	mov.w	r3, #0
 8005b84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b88:	4649      	mov	r1, r9
 8005b8a:	008b      	lsls	r3, r1, #2
 8005b8c:	4641      	mov	r1, r8
 8005b8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b92:	4641      	mov	r1, r8
 8005b94:	008a      	lsls	r2, r1, #2
 8005b96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b9a:	f7fa ffc7 	bl	8000b2c <__aeabi_uldivmod>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd8 <UART_SetConfig+0x4e4>)
 8005ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ba8:	095b      	lsrs	r3, r3, #5
 8005baa:	2164      	movs	r1, #100	@ 0x64
 8005bac:	fb01 f303 	mul.w	r3, r1, r3
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	3332      	adds	r3, #50	@ 0x32
 8005bb6:	4a08      	ldr	r2, [pc, #32]	@ (8005bd8 <UART_SetConfig+0x4e4>)
 8005bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbc:	095b      	lsrs	r3, r3, #5
 8005bbe:	f003 020f 	and.w	r2, r3, #15
 8005bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4422      	add	r2, r4
 8005bca:	609a      	str	r2, [r3, #8]
}
 8005bcc:	bf00      	nop
 8005bce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bd8:	51eb851f 	.word	0x51eb851f

08005bdc <atoi>:
 8005bdc:	220a      	movs	r2, #10
 8005bde:	2100      	movs	r1, #0
 8005be0:	f000 b87a 	b.w	8005cd8 <strtol>

08005be4 <_strtol_l.isra.0>:
 8005be4:	2b24      	cmp	r3, #36	@ 0x24
 8005be6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bea:	4686      	mov	lr, r0
 8005bec:	4690      	mov	r8, r2
 8005bee:	d801      	bhi.n	8005bf4 <_strtol_l.isra.0+0x10>
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d106      	bne.n	8005c02 <_strtol_l.isra.0+0x1e>
 8005bf4:	f000 f8b8 	bl	8005d68 <__errno>
 8005bf8:	2316      	movs	r3, #22
 8005bfa:	6003      	str	r3, [r0, #0]
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c02:	4834      	ldr	r0, [pc, #208]	@ (8005cd4 <_strtol_l.isra.0+0xf0>)
 8005c04:	460d      	mov	r5, r1
 8005c06:	462a      	mov	r2, r5
 8005c08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c0c:	5d06      	ldrb	r6, [r0, r4]
 8005c0e:	f016 0608 	ands.w	r6, r6, #8
 8005c12:	d1f8      	bne.n	8005c06 <_strtol_l.isra.0+0x22>
 8005c14:	2c2d      	cmp	r4, #45	@ 0x2d
 8005c16:	d110      	bne.n	8005c3a <_strtol_l.isra.0+0x56>
 8005c18:	782c      	ldrb	r4, [r5, #0]
 8005c1a:	2601      	movs	r6, #1
 8005c1c:	1c95      	adds	r5, r2, #2
 8005c1e:	f033 0210 	bics.w	r2, r3, #16
 8005c22:	d115      	bne.n	8005c50 <_strtol_l.isra.0+0x6c>
 8005c24:	2c30      	cmp	r4, #48	@ 0x30
 8005c26:	d10d      	bne.n	8005c44 <_strtol_l.isra.0+0x60>
 8005c28:	782a      	ldrb	r2, [r5, #0]
 8005c2a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005c2e:	2a58      	cmp	r2, #88	@ 0x58
 8005c30:	d108      	bne.n	8005c44 <_strtol_l.isra.0+0x60>
 8005c32:	786c      	ldrb	r4, [r5, #1]
 8005c34:	3502      	adds	r5, #2
 8005c36:	2310      	movs	r3, #16
 8005c38:	e00a      	b.n	8005c50 <_strtol_l.isra.0+0x6c>
 8005c3a:	2c2b      	cmp	r4, #43	@ 0x2b
 8005c3c:	bf04      	itt	eq
 8005c3e:	782c      	ldrbeq	r4, [r5, #0]
 8005c40:	1c95      	addeq	r5, r2, #2
 8005c42:	e7ec      	b.n	8005c1e <_strtol_l.isra.0+0x3a>
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1f6      	bne.n	8005c36 <_strtol_l.isra.0+0x52>
 8005c48:	2c30      	cmp	r4, #48	@ 0x30
 8005c4a:	bf14      	ite	ne
 8005c4c:	230a      	movne	r3, #10
 8005c4e:	2308      	moveq	r3, #8
 8005c50:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005c54:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8005c58:	2200      	movs	r2, #0
 8005c5a:	fbbc f9f3 	udiv	r9, ip, r3
 8005c5e:	4610      	mov	r0, r2
 8005c60:	fb03 ca19 	mls	sl, r3, r9, ip
 8005c64:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005c68:	2f09      	cmp	r7, #9
 8005c6a:	d80f      	bhi.n	8005c8c <_strtol_l.isra.0+0xa8>
 8005c6c:	463c      	mov	r4, r7
 8005c6e:	42a3      	cmp	r3, r4
 8005c70:	dd1b      	ble.n	8005caa <_strtol_l.isra.0+0xc6>
 8005c72:	1c57      	adds	r7, r2, #1
 8005c74:	d007      	beq.n	8005c86 <_strtol_l.isra.0+0xa2>
 8005c76:	4581      	cmp	r9, r0
 8005c78:	d314      	bcc.n	8005ca4 <_strtol_l.isra.0+0xc0>
 8005c7a:	d101      	bne.n	8005c80 <_strtol_l.isra.0+0x9c>
 8005c7c:	45a2      	cmp	sl, r4
 8005c7e:	db11      	blt.n	8005ca4 <_strtol_l.isra.0+0xc0>
 8005c80:	fb00 4003 	mla	r0, r0, r3, r4
 8005c84:	2201      	movs	r2, #1
 8005c86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c8a:	e7eb      	b.n	8005c64 <_strtol_l.isra.0+0x80>
 8005c8c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005c90:	2f19      	cmp	r7, #25
 8005c92:	d801      	bhi.n	8005c98 <_strtol_l.isra.0+0xb4>
 8005c94:	3c37      	subs	r4, #55	@ 0x37
 8005c96:	e7ea      	b.n	8005c6e <_strtol_l.isra.0+0x8a>
 8005c98:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005c9c:	2f19      	cmp	r7, #25
 8005c9e:	d804      	bhi.n	8005caa <_strtol_l.isra.0+0xc6>
 8005ca0:	3c57      	subs	r4, #87	@ 0x57
 8005ca2:	e7e4      	b.n	8005c6e <_strtol_l.isra.0+0x8a>
 8005ca4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ca8:	e7ed      	b.n	8005c86 <_strtol_l.isra.0+0xa2>
 8005caa:	1c53      	adds	r3, r2, #1
 8005cac:	d108      	bne.n	8005cc0 <_strtol_l.isra.0+0xdc>
 8005cae:	2322      	movs	r3, #34	@ 0x22
 8005cb0:	f8ce 3000 	str.w	r3, [lr]
 8005cb4:	4660      	mov	r0, ip
 8005cb6:	f1b8 0f00 	cmp.w	r8, #0
 8005cba:	d0a0      	beq.n	8005bfe <_strtol_l.isra.0+0x1a>
 8005cbc:	1e69      	subs	r1, r5, #1
 8005cbe:	e006      	b.n	8005cce <_strtol_l.isra.0+0xea>
 8005cc0:	b106      	cbz	r6, 8005cc4 <_strtol_l.isra.0+0xe0>
 8005cc2:	4240      	negs	r0, r0
 8005cc4:	f1b8 0f00 	cmp.w	r8, #0
 8005cc8:	d099      	beq.n	8005bfe <_strtol_l.isra.0+0x1a>
 8005cca:	2a00      	cmp	r2, #0
 8005ccc:	d1f6      	bne.n	8005cbc <_strtol_l.isra.0+0xd8>
 8005cce:	f8c8 1000 	str.w	r1, [r8]
 8005cd2:	e794      	b.n	8005bfe <_strtol_l.isra.0+0x1a>
 8005cd4:	0800669d 	.word	0x0800669d

08005cd8 <strtol>:
 8005cd8:	4613      	mov	r3, r2
 8005cda:	460a      	mov	r2, r1
 8005cdc:	4601      	mov	r1, r0
 8005cde:	4802      	ldr	r0, [pc, #8]	@ (8005ce8 <strtol+0x10>)
 8005ce0:	6800      	ldr	r0, [r0, #0]
 8005ce2:	f7ff bf7f 	b.w	8005be4 <_strtol_l.isra.0>
 8005ce6:	bf00      	nop
 8005ce8:	20000020 	.word	0x20000020

08005cec <sniprintf>:
 8005cec:	b40c      	push	{r2, r3}
 8005cee:	b530      	push	{r4, r5, lr}
 8005cf0:	4b18      	ldr	r3, [pc, #96]	@ (8005d54 <sniprintf+0x68>)
 8005cf2:	1e0c      	subs	r4, r1, #0
 8005cf4:	681d      	ldr	r5, [r3, #0]
 8005cf6:	b09d      	sub	sp, #116	@ 0x74
 8005cf8:	da08      	bge.n	8005d0c <sniprintf+0x20>
 8005cfa:	238b      	movs	r3, #139	@ 0x8b
 8005cfc:	602b      	str	r3, [r5, #0]
 8005cfe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d02:	b01d      	add	sp, #116	@ 0x74
 8005d04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d08:	b002      	add	sp, #8
 8005d0a:	4770      	bx	lr
 8005d0c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005d10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005d14:	f04f 0300 	mov.w	r3, #0
 8005d18:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005d1a:	bf14      	ite	ne
 8005d1c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8005d20:	4623      	moveq	r3, r4
 8005d22:	9304      	str	r3, [sp, #16]
 8005d24:	9307      	str	r3, [sp, #28]
 8005d26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005d2a:	9002      	str	r0, [sp, #8]
 8005d2c:	9006      	str	r0, [sp, #24]
 8005d2e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005d32:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005d34:	ab21      	add	r3, sp, #132	@ 0x84
 8005d36:	a902      	add	r1, sp, #8
 8005d38:	4628      	mov	r0, r5
 8005d3a:	9301      	str	r3, [sp, #4]
 8005d3c:	f000 f994 	bl	8006068 <_svfiprintf_r>
 8005d40:	1c43      	adds	r3, r0, #1
 8005d42:	bfbc      	itt	lt
 8005d44:	238b      	movlt	r3, #139	@ 0x8b
 8005d46:	602b      	strlt	r3, [r5, #0]
 8005d48:	2c00      	cmp	r4, #0
 8005d4a:	d0da      	beq.n	8005d02 <sniprintf+0x16>
 8005d4c:	9b02      	ldr	r3, [sp, #8]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	e7d6      	b.n	8005d02 <sniprintf+0x16>
 8005d54:	20000020 	.word	0x20000020

08005d58 <memset>:
 8005d58:	4402      	add	r2, r0
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d100      	bne.n	8005d62 <memset+0xa>
 8005d60:	4770      	bx	lr
 8005d62:	f803 1b01 	strb.w	r1, [r3], #1
 8005d66:	e7f9      	b.n	8005d5c <memset+0x4>

08005d68 <__errno>:
 8005d68:	4b01      	ldr	r3, [pc, #4]	@ (8005d70 <__errno+0x8>)
 8005d6a:	6818      	ldr	r0, [r3, #0]
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	20000020 	.word	0x20000020

08005d74 <__libc_init_array>:
 8005d74:	b570      	push	{r4, r5, r6, lr}
 8005d76:	4d0d      	ldr	r5, [pc, #52]	@ (8005dac <__libc_init_array+0x38>)
 8005d78:	4c0d      	ldr	r4, [pc, #52]	@ (8005db0 <__libc_init_array+0x3c>)
 8005d7a:	1b64      	subs	r4, r4, r5
 8005d7c:	10a4      	asrs	r4, r4, #2
 8005d7e:	2600      	movs	r6, #0
 8005d80:	42a6      	cmp	r6, r4
 8005d82:	d109      	bne.n	8005d98 <__libc_init_array+0x24>
 8005d84:	4d0b      	ldr	r5, [pc, #44]	@ (8005db4 <__libc_init_array+0x40>)
 8005d86:	4c0c      	ldr	r4, [pc, #48]	@ (8005db8 <__libc_init_array+0x44>)
 8005d88:	f000 fc64 	bl	8006654 <_init>
 8005d8c:	1b64      	subs	r4, r4, r5
 8005d8e:	10a4      	asrs	r4, r4, #2
 8005d90:	2600      	movs	r6, #0
 8005d92:	42a6      	cmp	r6, r4
 8005d94:	d105      	bne.n	8005da2 <__libc_init_array+0x2e>
 8005d96:	bd70      	pop	{r4, r5, r6, pc}
 8005d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d9c:	4798      	blx	r3
 8005d9e:	3601      	adds	r6, #1
 8005da0:	e7ee      	b.n	8005d80 <__libc_init_array+0xc>
 8005da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da6:	4798      	blx	r3
 8005da8:	3601      	adds	r6, #1
 8005daa:	e7f2      	b.n	8005d92 <__libc_init_array+0x1e>
 8005dac:	080067d8 	.word	0x080067d8
 8005db0:	080067d8 	.word	0x080067d8
 8005db4:	080067d8 	.word	0x080067d8
 8005db8:	080067dc 	.word	0x080067dc

08005dbc <__retarget_lock_acquire_recursive>:
 8005dbc:	4770      	bx	lr

08005dbe <__retarget_lock_release_recursive>:
 8005dbe:	4770      	bx	lr

08005dc0 <_free_r>:
 8005dc0:	b538      	push	{r3, r4, r5, lr}
 8005dc2:	4605      	mov	r5, r0
 8005dc4:	2900      	cmp	r1, #0
 8005dc6:	d041      	beq.n	8005e4c <_free_r+0x8c>
 8005dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dcc:	1f0c      	subs	r4, r1, #4
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	bfb8      	it	lt
 8005dd2:	18e4      	addlt	r4, r4, r3
 8005dd4:	f000 f8e0 	bl	8005f98 <__malloc_lock>
 8005dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8005e50 <_free_r+0x90>)
 8005dda:	6813      	ldr	r3, [r2, #0]
 8005ddc:	b933      	cbnz	r3, 8005dec <_free_r+0x2c>
 8005dde:	6063      	str	r3, [r4, #4]
 8005de0:	6014      	str	r4, [r2, #0]
 8005de2:	4628      	mov	r0, r5
 8005de4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005de8:	f000 b8dc 	b.w	8005fa4 <__malloc_unlock>
 8005dec:	42a3      	cmp	r3, r4
 8005dee:	d908      	bls.n	8005e02 <_free_r+0x42>
 8005df0:	6820      	ldr	r0, [r4, #0]
 8005df2:	1821      	adds	r1, r4, r0
 8005df4:	428b      	cmp	r3, r1
 8005df6:	bf01      	itttt	eq
 8005df8:	6819      	ldreq	r1, [r3, #0]
 8005dfa:	685b      	ldreq	r3, [r3, #4]
 8005dfc:	1809      	addeq	r1, r1, r0
 8005dfe:	6021      	streq	r1, [r4, #0]
 8005e00:	e7ed      	b.n	8005dde <_free_r+0x1e>
 8005e02:	461a      	mov	r2, r3
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	b10b      	cbz	r3, 8005e0c <_free_r+0x4c>
 8005e08:	42a3      	cmp	r3, r4
 8005e0a:	d9fa      	bls.n	8005e02 <_free_r+0x42>
 8005e0c:	6811      	ldr	r1, [r2, #0]
 8005e0e:	1850      	adds	r0, r2, r1
 8005e10:	42a0      	cmp	r0, r4
 8005e12:	d10b      	bne.n	8005e2c <_free_r+0x6c>
 8005e14:	6820      	ldr	r0, [r4, #0]
 8005e16:	4401      	add	r1, r0
 8005e18:	1850      	adds	r0, r2, r1
 8005e1a:	4283      	cmp	r3, r0
 8005e1c:	6011      	str	r1, [r2, #0]
 8005e1e:	d1e0      	bne.n	8005de2 <_free_r+0x22>
 8005e20:	6818      	ldr	r0, [r3, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	6053      	str	r3, [r2, #4]
 8005e26:	4408      	add	r0, r1
 8005e28:	6010      	str	r0, [r2, #0]
 8005e2a:	e7da      	b.n	8005de2 <_free_r+0x22>
 8005e2c:	d902      	bls.n	8005e34 <_free_r+0x74>
 8005e2e:	230c      	movs	r3, #12
 8005e30:	602b      	str	r3, [r5, #0]
 8005e32:	e7d6      	b.n	8005de2 <_free_r+0x22>
 8005e34:	6820      	ldr	r0, [r4, #0]
 8005e36:	1821      	adds	r1, r4, r0
 8005e38:	428b      	cmp	r3, r1
 8005e3a:	bf04      	itt	eq
 8005e3c:	6819      	ldreq	r1, [r3, #0]
 8005e3e:	685b      	ldreq	r3, [r3, #4]
 8005e40:	6063      	str	r3, [r4, #4]
 8005e42:	bf04      	itt	eq
 8005e44:	1809      	addeq	r1, r1, r0
 8005e46:	6021      	streq	r1, [r4, #0]
 8005e48:	6054      	str	r4, [r2, #4]
 8005e4a:	e7ca      	b.n	8005de2 <_free_r+0x22>
 8005e4c:	bd38      	pop	{r3, r4, r5, pc}
 8005e4e:	bf00      	nop
 8005e50:	20000438 	.word	0x20000438

08005e54 <sbrk_aligned>:
 8005e54:	b570      	push	{r4, r5, r6, lr}
 8005e56:	4e0f      	ldr	r6, [pc, #60]	@ (8005e94 <sbrk_aligned+0x40>)
 8005e58:	460c      	mov	r4, r1
 8005e5a:	6831      	ldr	r1, [r6, #0]
 8005e5c:	4605      	mov	r5, r0
 8005e5e:	b911      	cbnz	r1, 8005e66 <sbrk_aligned+0x12>
 8005e60:	f000 fba4 	bl	80065ac <_sbrk_r>
 8005e64:	6030      	str	r0, [r6, #0]
 8005e66:	4621      	mov	r1, r4
 8005e68:	4628      	mov	r0, r5
 8005e6a:	f000 fb9f 	bl	80065ac <_sbrk_r>
 8005e6e:	1c43      	adds	r3, r0, #1
 8005e70:	d103      	bne.n	8005e7a <sbrk_aligned+0x26>
 8005e72:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005e76:	4620      	mov	r0, r4
 8005e78:	bd70      	pop	{r4, r5, r6, pc}
 8005e7a:	1cc4      	adds	r4, r0, #3
 8005e7c:	f024 0403 	bic.w	r4, r4, #3
 8005e80:	42a0      	cmp	r0, r4
 8005e82:	d0f8      	beq.n	8005e76 <sbrk_aligned+0x22>
 8005e84:	1a21      	subs	r1, r4, r0
 8005e86:	4628      	mov	r0, r5
 8005e88:	f000 fb90 	bl	80065ac <_sbrk_r>
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	d1f2      	bne.n	8005e76 <sbrk_aligned+0x22>
 8005e90:	e7ef      	b.n	8005e72 <sbrk_aligned+0x1e>
 8005e92:	bf00      	nop
 8005e94:	20000434 	.word	0x20000434

08005e98 <_malloc_r>:
 8005e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e9c:	1ccd      	adds	r5, r1, #3
 8005e9e:	f025 0503 	bic.w	r5, r5, #3
 8005ea2:	3508      	adds	r5, #8
 8005ea4:	2d0c      	cmp	r5, #12
 8005ea6:	bf38      	it	cc
 8005ea8:	250c      	movcc	r5, #12
 8005eaa:	2d00      	cmp	r5, #0
 8005eac:	4606      	mov	r6, r0
 8005eae:	db01      	blt.n	8005eb4 <_malloc_r+0x1c>
 8005eb0:	42a9      	cmp	r1, r5
 8005eb2:	d904      	bls.n	8005ebe <_malloc_r+0x26>
 8005eb4:	230c      	movs	r3, #12
 8005eb6:	6033      	str	r3, [r6, #0]
 8005eb8:	2000      	movs	r0, #0
 8005eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ebe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f94 <_malloc_r+0xfc>
 8005ec2:	f000 f869 	bl	8005f98 <__malloc_lock>
 8005ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8005eca:	461c      	mov	r4, r3
 8005ecc:	bb44      	cbnz	r4, 8005f20 <_malloc_r+0x88>
 8005ece:	4629      	mov	r1, r5
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	f7ff ffbf 	bl	8005e54 <sbrk_aligned>
 8005ed6:	1c43      	adds	r3, r0, #1
 8005ed8:	4604      	mov	r4, r0
 8005eda:	d158      	bne.n	8005f8e <_malloc_r+0xf6>
 8005edc:	f8d8 4000 	ldr.w	r4, [r8]
 8005ee0:	4627      	mov	r7, r4
 8005ee2:	2f00      	cmp	r7, #0
 8005ee4:	d143      	bne.n	8005f6e <_malloc_r+0xd6>
 8005ee6:	2c00      	cmp	r4, #0
 8005ee8:	d04b      	beq.n	8005f82 <_malloc_r+0xea>
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	4639      	mov	r1, r7
 8005eee:	4630      	mov	r0, r6
 8005ef0:	eb04 0903 	add.w	r9, r4, r3
 8005ef4:	f000 fb5a 	bl	80065ac <_sbrk_r>
 8005ef8:	4581      	cmp	r9, r0
 8005efa:	d142      	bne.n	8005f82 <_malloc_r+0xea>
 8005efc:	6821      	ldr	r1, [r4, #0]
 8005efe:	1a6d      	subs	r5, r5, r1
 8005f00:	4629      	mov	r1, r5
 8005f02:	4630      	mov	r0, r6
 8005f04:	f7ff ffa6 	bl	8005e54 <sbrk_aligned>
 8005f08:	3001      	adds	r0, #1
 8005f0a:	d03a      	beq.n	8005f82 <_malloc_r+0xea>
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	442b      	add	r3, r5
 8005f10:	6023      	str	r3, [r4, #0]
 8005f12:	f8d8 3000 	ldr.w	r3, [r8]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	bb62      	cbnz	r2, 8005f74 <_malloc_r+0xdc>
 8005f1a:	f8c8 7000 	str.w	r7, [r8]
 8005f1e:	e00f      	b.n	8005f40 <_malloc_r+0xa8>
 8005f20:	6822      	ldr	r2, [r4, #0]
 8005f22:	1b52      	subs	r2, r2, r5
 8005f24:	d420      	bmi.n	8005f68 <_malloc_r+0xd0>
 8005f26:	2a0b      	cmp	r2, #11
 8005f28:	d917      	bls.n	8005f5a <_malloc_r+0xc2>
 8005f2a:	1961      	adds	r1, r4, r5
 8005f2c:	42a3      	cmp	r3, r4
 8005f2e:	6025      	str	r5, [r4, #0]
 8005f30:	bf18      	it	ne
 8005f32:	6059      	strne	r1, [r3, #4]
 8005f34:	6863      	ldr	r3, [r4, #4]
 8005f36:	bf08      	it	eq
 8005f38:	f8c8 1000 	streq.w	r1, [r8]
 8005f3c:	5162      	str	r2, [r4, r5]
 8005f3e:	604b      	str	r3, [r1, #4]
 8005f40:	4630      	mov	r0, r6
 8005f42:	f000 f82f 	bl	8005fa4 <__malloc_unlock>
 8005f46:	f104 000b 	add.w	r0, r4, #11
 8005f4a:	1d23      	adds	r3, r4, #4
 8005f4c:	f020 0007 	bic.w	r0, r0, #7
 8005f50:	1ac2      	subs	r2, r0, r3
 8005f52:	bf1c      	itt	ne
 8005f54:	1a1b      	subne	r3, r3, r0
 8005f56:	50a3      	strne	r3, [r4, r2]
 8005f58:	e7af      	b.n	8005eba <_malloc_r+0x22>
 8005f5a:	6862      	ldr	r2, [r4, #4]
 8005f5c:	42a3      	cmp	r3, r4
 8005f5e:	bf0c      	ite	eq
 8005f60:	f8c8 2000 	streq.w	r2, [r8]
 8005f64:	605a      	strne	r2, [r3, #4]
 8005f66:	e7eb      	b.n	8005f40 <_malloc_r+0xa8>
 8005f68:	4623      	mov	r3, r4
 8005f6a:	6864      	ldr	r4, [r4, #4]
 8005f6c:	e7ae      	b.n	8005ecc <_malloc_r+0x34>
 8005f6e:	463c      	mov	r4, r7
 8005f70:	687f      	ldr	r7, [r7, #4]
 8005f72:	e7b6      	b.n	8005ee2 <_malloc_r+0x4a>
 8005f74:	461a      	mov	r2, r3
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	42a3      	cmp	r3, r4
 8005f7a:	d1fb      	bne.n	8005f74 <_malloc_r+0xdc>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	6053      	str	r3, [r2, #4]
 8005f80:	e7de      	b.n	8005f40 <_malloc_r+0xa8>
 8005f82:	230c      	movs	r3, #12
 8005f84:	6033      	str	r3, [r6, #0]
 8005f86:	4630      	mov	r0, r6
 8005f88:	f000 f80c 	bl	8005fa4 <__malloc_unlock>
 8005f8c:	e794      	b.n	8005eb8 <_malloc_r+0x20>
 8005f8e:	6005      	str	r5, [r0, #0]
 8005f90:	e7d6      	b.n	8005f40 <_malloc_r+0xa8>
 8005f92:	bf00      	nop
 8005f94:	20000438 	.word	0x20000438

08005f98 <__malloc_lock>:
 8005f98:	4801      	ldr	r0, [pc, #4]	@ (8005fa0 <__malloc_lock+0x8>)
 8005f9a:	f7ff bf0f 	b.w	8005dbc <__retarget_lock_acquire_recursive>
 8005f9e:	bf00      	nop
 8005fa0:	20000430 	.word	0x20000430

08005fa4 <__malloc_unlock>:
 8005fa4:	4801      	ldr	r0, [pc, #4]	@ (8005fac <__malloc_unlock+0x8>)
 8005fa6:	f7ff bf0a 	b.w	8005dbe <__retarget_lock_release_recursive>
 8005faa:	bf00      	nop
 8005fac:	20000430 	.word	0x20000430

08005fb0 <__ssputs_r>:
 8005fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb4:	688e      	ldr	r6, [r1, #8]
 8005fb6:	461f      	mov	r7, r3
 8005fb8:	42be      	cmp	r6, r7
 8005fba:	680b      	ldr	r3, [r1, #0]
 8005fbc:	4682      	mov	sl, r0
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	4690      	mov	r8, r2
 8005fc2:	d82d      	bhi.n	8006020 <__ssputs_r+0x70>
 8005fc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005fc8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005fcc:	d026      	beq.n	800601c <__ssputs_r+0x6c>
 8005fce:	6965      	ldr	r5, [r4, #20]
 8005fd0:	6909      	ldr	r1, [r1, #16]
 8005fd2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fd6:	eba3 0901 	sub.w	r9, r3, r1
 8005fda:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fde:	1c7b      	adds	r3, r7, #1
 8005fe0:	444b      	add	r3, r9
 8005fe2:	106d      	asrs	r5, r5, #1
 8005fe4:	429d      	cmp	r5, r3
 8005fe6:	bf38      	it	cc
 8005fe8:	461d      	movcc	r5, r3
 8005fea:	0553      	lsls	r3, r2, #21
 8005fec:	d527      	bpl.n	800603e <__ssputs_r+0x8e>
 8005fee:	4629      	mov	r1, r5
 8005ff0:	f7ff ff52 	bl	8005e98 <_malloc_r>
 8005ff4:	4606      	mov	r6, r0
 8005ff6:	b360      	cbz	r0, 8006052 <__ssputs_r+0xa2>
 8005ff8:	6921      	ldr	r1, [r4, #16]
 8005ffa:	464a      	mov	r2, r9
 8005ffc:	f000 fae6 	bl	80065cc <memcpy>
 8006000:	89a3      	ldrh	r3, [r4, #12]
 8006002:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800600a:	81a3      	strh	r3, [r4, #12]
 800600c:	6126      	str	r6, [r4, #16]
 800600e:	6165      	str	r5, [r4, #20]
 8006010:	444e      	add	r6, r9
 8006012:	eba5 0509 	sub.w	r5, r5, r9
 8006016:	6026      	str	r6, [r4, #0]
 8006018:	60a5      	str	r5, [r4, #8]
 800601a:	463e      	mov	r6, r7
 800601c:	42be      	cmp	r6, r7
 800601e:	d900      	bls.n	8006022 <__ssputs_r+0x72>
 8006020:	463e      	mov	r6, r7
 8006022:	6820      	ldr	r0, [r4, #0]
 8006024:	4632      	mov	r2, r6
 8006026:	4641      	mov	r1, r8
 8006028:	f000 faa6 	bl	8006578 <memmove>
 800602c:	68a3      	ldr	r3, [r4, #8]
 800602e:	1b9b      	subs	r3, r3, r6
 8006030:	60a3      	str	r3, [r4, #8]
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	4433      	add	r3, r6
 8006036:	6023      	str	r3, [r4, #0]
 8006038:	2000      	movs	r0, #0
 800603a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800603e:	462a      	mov	r2, r5
 8006040:	f000 fad2 	bl	80065e8 <_realloc_r>
 8006044:	4606      	mov	r6, r0
 8006046:	2800      	cmp	r0, #0
 8006048:	d1e0      	bne.n	800600c <__ssputs_r+0x5c>
 800604a:	6921      	ldr	r1, [r4, #16]
 800604c:	4650      	mov	r0, sl
 800604e:	f7ff feb7 	bl	8005dc0 <_free_r>
 8006052:	230c      	movs	r3, #12
 8006054:	f8ca 3000 	str.w	r3, [sl]
 8006058:	89a3      	ldrh	r3, [r4, #12]
 800605a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800605e:	81a3      	strh	r3, [r4, #12]
 8006060:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006064:	e7e9      	b.n	800603a <__ssputs_r+0x8a>
	...

08006068 <_svfiprintf_r>:
 8006068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606c:	4698      	mov	r8, r3
 800606e:	898b      	ldrh	r3, [r1, #12]
 8006070:	061b      	lsls	r3, r3, #24
 8006072:	b09d      	sub	sp, #116	@ 0x74
 8006074:	4607      	mov	r7, r0
 8006076:	460d      	mov	r5, r1
 8006078:	4614      	mov	r4, r2
 800607a:	d510      	bpl.n	800609e <_svfiprintf_r+0x36>
 800607c:	690b      	ldr	r3, [r1, #16]
 800607e:	b973      	cbnz	r3, 800609e <_svfiprintf_r+0x36>
 8006080:	2140      	movs	r1, #64	@ 0x40
 8006082:	f7ff ff09 	bl	8005e98 <_malloc_r>
 8006086:	6028      	str	r0, [r5, #0]
 8006088:	6128      	str	r0, [r5, #16]
 800608a:	b930      	cbnz	r0, 800609a <_svfiprintf_r+0x32>
 800608c:	230c      	movs	r3, #12
 800608e:	603b      	str	r3, [r7, #0]
 8006090:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006094:	b01d      	add	sp, #116	@ 0x74
 8006096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800609a:	2340      	movs	r3, #64	@ 0x40
 800609c:	616b      	str	r3, [r5, #20]
 800609e:	2300      	movs	r3, #0
 80060a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80060a2:	2320      	movs	r3, #32
 80060a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80060ac:	2330      	movs	r3, #48	@ 0x30
 80060ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800624c <_svfiprintf_r+0x1e4>
 80060b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060b6:	f04f 0901 	mov.w	r9, #1
 80060ba:	4623      	mov	r3, r4
 80060bc:	469a      	mov	sl, r3
 80060be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060c2:	b10a      	cbz	r2, 80060c8 <_svfiprintf_r+0x60>
 80060c4:	2a25      	cmp	r2, #37	@ 0x25
 80060c6:	d1f9      	bne.n	80060bc <_svfiprintf_r+0x54>
 80060c8:	ebba 0b04 	subs.w	fp, sl, r4
 80060cc:	d00b      	beq.n	80060e6 <_svfiprintf_r+0x7e>
 80060ce:	465b      	mov	r3, fp
 80060d0:	4622      	mov	r2, r4
 80060d2:	4629      	mov	r1, r5
 80060d4:	4638      	mov	r0, r7
 80060d6:	f7ff ff6b 	bl	8005fb0 <__ssputs_r>
 80060da:	3001      	adds	r0, #1
 80060dc:	f000 80a7 	beq.w	800622e <_svfiprintf_r+0x1c6>
 80060e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060e2:	445a      	add	r2, fp
 80060e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80060e6:	f89a 3000 	ldrb.w	r3, [sl]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 809f 	beq.w	800622e <_svfiprintf_r+0x1c6>
 80060f0:	2300      	movs	r3, #0
 80060f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80060f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060fa:	f10a 0a01 	add.w	sl, sl, #1
 80060fe:	9304      	str	r3, [sp, #16]
 8006100:	9307      	str	r3, [sp, #28]
 8006102:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006106:	931a      	str	r3, [sp, #104]	@ 0x68
 8006108:	4654      	mov	r4, sl
 800610a:	2205      	movs	r2, #5
 800610c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006110:	484e      	ldr	r0, [pc, #312]	@ (800624c <_svfiprintf_r+0x1e4>)
 8006112:	f7fa f87d 	bl	8000210 <memchr>
 8006116:	9a04      	ldr	r2, [sp, #16]
 8006118:	b9d8      	cbnz	r0, 8006152 <_svfiprintf_r+0xea>
 800611a:	06d0      	lsls	r0, r2, #27
 800611c:	bf44      	itt	mi
 800611e:	2320      	movmi	r3, #32
 8006120:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006124:	0711      	lsls	r1, r2, #28
 8006126:	bf44      	itt	mi
 8006128:	232b      	movmi	r3, #43	@ 0x2b
 800612a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800612e:	f89a 3000 	ldrb.w	r3, [sl]
 8006132:	2b2a      	cmp	r3, #42	@ 0x2a
 8006134:	d015      	beq.n	8006162 <_svfiprintf_r+0xfa>
 8006136:	9a07      	ldr	r2, [sp, #28]
 8006138:	4654      	mov	r4, sl
 800613a:	2000      	movs	r0, #0
 800613c:	f04f 0c0a 	mov.w	ip, #10
 8006140:	4621      	mov	r1, r4
 8006142:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006146:	3b30      	subs	r3, #48	@ 0x30
 8006148:	2b09      	cmp	r3, #9
 800614a:	d94b      	bls.n	80061e4 <_svfiprintf_r+0x17c>
 800614c:	b1b0      	cbz	r0, 800617c <_svfiprintf_r+0x114>
 800614e:	9207      	str	r2, [sp, #28]
 8006150:	e014      	b.n	800617c <_svfiprintf_r+0x114>
 8006152:	eba0 0308 	sub.w	r3, r0, r8
 8006156:	fa09 f303 	lsl.w	r3, r9, r3
 800615a:	4313      	orrs	r3, r2
 800615c:	9304      	str	r3, [sp, #16]
 800615e:	46a2      	mov	sl, r4
 8006160:	e7d2      	b.n	8006108 <_svfiprintf_r+0xa0>
 8006162:	9b03      	ldr	r3, [sp, #12]
 8006164:	1d19      	adds	r1, r3, #4
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	9103      	str	r1, [sp, #12]
 800616a:	2b00      	cmp	r3, #0
 800616c:	bfbb      	ittet	lt
 800616e:	425b      	neglt	r3, r3
 8006170:	f042 0202 	orrlt.w	r2, r2, #2
 8006174:	9307      	strge	r3, [sp, #28]
 8006176:	9307      	strlt	r3, [sp, #28]
 8006178:	bfb8      	it	lt
 800617a:	9204      	strlt	r2, [sp, #16]
 800617c:	7823      	ldrb	r3, [r4, #0]
 800617e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006180:	d10a      	bne.n	8006198 <_svfiprintf_r+0x130>
 8006182:	7863      	ldrb	r3, [r4, #1]
 8006184:	2b2a      	cmp	r3, #42	@ 0x2a
 8006186:	d132      	bne.n	80061ee <_svfiprintf_r+0x186>
 8006188:	9b03      	ldr	r3, [sp, #12]
 800618a:	1d1a      	adds	r2, r3, #4
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	9203      	str	r2, [sp, #12]
 8006190:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006194:	3402      	adds	r4, #2
 8006196:	9305      	str	r3, [sp, #20]
 8006198:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800625c <_svfiprintf_r+0x1f4>
 800619c:	7821      	ldrb	r1, [r4, #0]
 800619e:	2203      	movs	r2, #3
 80061a0:	4650      	mov	r0, sl
 80061a2:	f7fa f835 	bl	8000210 <memchr>
 80061a6:	b138      	cbz	r0, 80061b8 <_svfiprintf_r+0x150>
 80061a8:	9b04      	ldr	r3, [sp, #16]
 80061aa:	eba0 000a 	sub.w	r0, r0, sl
 80061ae:	2240      	movs	r2, #64	@ 0x40
 80061b0:	4082      	lsls	r2, r0
 80061b2:	4313      	orrs	r3, r2
 80061b4:	3401      	adds	r4, #1
 80061b6:	9304      	str	r3, [sp, #16]
 80061b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061bc:	4824      	ldr	r0, [pc, #144]	@ (8006250 <_svfiprintf_r+0x1e8>)
 80061be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061c2:	2206      	movs	r2, #6
 80061c4:	f7fa f824 	bl	8000210 <memchr>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	d036      	beq.n	800623a <_svfiprintf_r+0x1d2>
 80061cc:	4b21      	ldr	r3, [pc, #132]	@ (8006254 <_svfiprintf_r+0x1ec>)
 80061ce:	bb1b      	cbnz	r3, 8006218 <_svfiprintf_r+0x1b0>
 80061d0:	9b03      	ldr	r3, [sp, #12]
 80061d2:	3307      	adds	r3, #7
 80061d4:	f023 0307 	bic.w	r3, r3, #7
 80061d8:	3308      	adds	r3, #8
 80061da:	9303      	str	r3, [sp, #12]
 80061dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061de:	4433      	add	r3, r6
 80061e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80061e2:	e76a      	b.n	80060ba <_svfiprintf_r+0x52>
 80061e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80061e8:	460c      	mov	r4, r1
 80061ea:	2001      	movs	r0, #1
 80061ec:	e7a8      	b.n	8006140 <_svfiprintf_r+0xd8>
 80061ee:	2300      	movs	r3, #0
 80061f0:	3401      	adds	r4, #1
 80061f2:	9305      	str	r3, [sp, #20]
 80061f4:	4619      	mov	r1, r3
 80061f6:	f04f 0c0a 	mov.w	ip, #10
 80061fa:	4620      	mov	r0, r4
 80061fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006200:	3a30      	subs	r2, #48	@ 0x30
 8006202:	2a09      	cmp	r2, #9
 8006204:	d903      	bls.n	800620e <_svfiprintf_r+0x1a6>
 8006206:	2b00      	cmp	r3, #0
 8006208:	d0c6      	beq.n	8006198 <_svfiprintf_r+0x130>
 800620a:	9105      	str	r1, [sp, #20]
 800620c:	e7c4      	b.n	8006198 <_svfiprintf_r+0x130>
 800620e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006212:	4604      	mov	r4, r0
 8006214:	2301      	movs	r3, #1
 8006216:	e7f0      	b.n	80061fa <_svfiprintf_r+0x192>
 8006218:	ab03      	add	r3, sp, #12
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	462a      	mov	r2, r5
 800621e:	4b0e      	ldr	r3, [pc, #56]	@ (8006258 <_svfiprintf_r+0x1f0>)
 8006220:	a904      	add	r1, sp, #16
 8006222:	4638      	mov	r0, r7
 8006224:	f3af 8000 	nop.w
 8006228:	1c42      	adds	r2, r0, #1
 800622a:	4606      	mov	r6, r0
 800622c:	d1d6      	bne.n	80061dc <_svfiprintf_r+0x174>
 800622e:	89ab      	ldrh	r3, [r5, #12]
 8006230:	065b      	lsls	r3, r3, #25
 8006232:	f53f af2d 	bmi.w	8006090 <_svfiprintf_r+0x28>
 8006236:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006238:	e72c      	b.n	8006094 <_svfiprintf_r+0x2c>
 800623a:	ab03      	add	r3, sp, #12
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	462a      	mov	r2, r5
 8006240:	4b05      	ldr	r3, [pc, #20]	@ (8006258 <_svfiprintf_r+0x1f0>)
 8006242:	a904      	add	r1, sp, #16
 8006244:	4638      	mov	r0, r7
 8006246:	f000 f879 	bl	800633c <_printf_i>
 800624a:	e7ed      	b.n	8006228 <_svfiprintf_r+0x1c0>
 800624c:	0800679d 	.word	0x0800679d
 8006250:	080067a7 	.word	0x080067a7
 8006254:	00000000 	.word	0x00000000
 8006258:	08005fb1 	.word	0x08005fb1
 800625c:	080067a3 	.word	0x080067a3

08006260 <_printf_common>:
 8006260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006264:	4616      	mov	r6, r2
 8006266:	4698      	mov	r8, r3
 8006268:	688a      	ldr	r2, [r1, #8]
 800626a:	690b      	ldr	r3, [r1, #16]
 800626c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006270:	4293      	cmp	r3, r2
 8006272:	bfb8      	it	lt
 8006274:	4613      	movlt	r3, r2
 8006276:	6033      	str	r3, [r6, #0]
 8006278:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800627c:	4607      	mov	r7, r0
 800627e:	460c      	mov	r4, r1
 8006280:	b10a      	cbz	r2, 8006286 <_printf_common+0x26>
 8006282:	3301      	adds	r3, #1
 8006284:	6033      	str	r3, [r6, #0]
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	0699      	lsls	r1, r3, #26
 800628a:	bf42      	ittt	mi
 800628c:	6833      	ldrmi	r3, [r6, #0]
 800628e:	3302      	addmi	r3, #2
 8006290:	6033      	strmi	r3, [r6, #0]
 8006292:	6825      	ldr	r5, [r4, #0]
 8006294:	f015 0506 	ands.w	r5, r5, #6
 8006298:	d106      	bne.n	80062a8 <_printf_common+0x48>
 800629a:	f104 0a19 	add.w	sl, r4, #25
 800629e:	68e3      	ldr	r3, [r4, #12]
 80062a0:	6832      	ldr	r2, [r6, #0]
 80062a2:	1a9b      	subs	r3, r3, r2
 80062a4:	42ab      	cmp	r3, r5
 80062a6:	dc26      	bgt.n	80062f6 <_printf_common+0x96>
 80062a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80062ac:	6822      	ldr	r2, [r4, #0]
 80062ae:	3b00      	subs	r3, #0
 80062b0:	bf18      	it	ne
 80062b2:	2301      	movne	r3, #1
 80062b4:	0692      	lsls	r2, r2, #26
 80062b6:	d42b      	bmi.n	8006310 <_printf_common+0xb0>
 80062b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80062bc:	4641      	mov	r1, r8
 80062be:	4638      	mov	r0, r7
 80062c0:	47c8      	blx	r9
 80062c2:	3001      	adds	r0, #1
 80062c4:	d01e      	beq.n	8006304 <_printf_common+0xa4>
 80062c6:	6823      	ldr	r3, [r4, #0]
 80062c8:	6922      	ldr	r2, [r4, #16]
 80062ca:	f003 0306 	and.w	r3, r3, #6
 80062ce:	2b04      	cmp	r3, #4
 80062d0:	bf02      	ittt	eq
 80062d2:	68e5      	ldreq	r5, [r4, #12]
 80062d4:	6833      	ldreq	r3, [r6, #0]
 80062d6:	1aed      	subeq	r5, r5, r3
 80062d8:	68a3      	ldr	r3, [r4, #8]
 80062da:	bf0c      	ite	eq
 80062dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062e0:	2500      	movne	r5, #0
 80062e2:	4293      	cmp	r3, r2
 80062e4:	bfc4      	itt	gt
 80062e6:	1a9b      	subgt	r3, r3, r2
 80062e8:	18ed      	addgt	r5, r5, r3
 80062ea:	2600      	movs	r6, #0
 80062ec:	341a      	adds	r4, #26
 80062ee:	42b5      	cmp	r5, r6
 80062f0:	d11a      	bne.n	8006328 <_printf_common+0xc8>
 80062f2:	2000      	movs	r0, #0
 80062f4:	e008      	b.n	8006308 <_printf_common+0xa8>
 80062f6:	2301      	movs	r3, #1
 80062f8:	4652      	mov	r2, sl
 80062fa:	4641      	mov	r1, r8
 80062fc:	4638      	mov	r0, r7
 80062fe:	47c8      	blx	r9
 8006300:	3001      	adds	r0, #1
 8006302:	d103      	bne.n	800630c <_printf_common+0xac>
 8006304:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800630c:	3501      	adds	r5, #1
 800630e:	e7c6      	b.n	800629e <_printf_common+0x3e>
 8006310:	18e1      	adds	r1, r4, r3
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	2030      	movs	r0, #48	@ 0x30
 8006316:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800631a:	4422      	add	r2, r4
 800631c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006320:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006324:	3302      	adds	r3, #2
 8006326:	e7c7      	b.n	80062b8 <_printf_common+0x58>
 8006328:	2301      	movs	r3, #1
 800632a:	4622      	mov	r2, r4
 800632c:	4641      	mov	r1, r8
 800632e:	4638      	mov	r0, r7
 8006330:	47c8      	blx	r9
 8006332:	3001      	adds	r0, #1
 8006334:	d0e6      	beq.n	8006304 <_printf_common+0xa4>
 8006336:	3601      	adds	r6, #1
 8006338:	e7d9      	b.n	80062ee <_printf_common+0x8e>
	...

0800633c <_printf_i>:
 800633c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006340:	7e0f      	ldrb	r7, [r1, #24]
 8006342:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006344:	2f78      	cmp	r7, #120	@ 0x78
 8006346:	4691      	mov	r9, r2
 8006348:	4680      	mov	r8, r0
 800634a:	460c      	mov	r4, r1
 800634c:	469a      	mov	sl, r3
 800634e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006352:	d807      	bhi.n	8006364 <_printf_i+0x28>
 8006354:	2f62      	cmp	r7, #98	@ 0x62
 8006356:	d80a      	bhi.n	800636e <_printf_i+0x32>
 8006358:	2f00      	cmp	r7, #0
 800635a:	f000 80d1 	beq.w	8006500 <_printf_i+0x1c4>
 800635e:	2f58      	cmp	r7, #88	@ 0x58
 8006360:	f000 80b8 	beq.w	80064d4 <_printf_i+0x198>
 8006364:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006368:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800636c:	e03a      	b.n	80063e4 <_printf_i+0xa8>
 800636e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006372:	2b15      	cmp	r3, #21
 8006374:	d8f6      	bhi.n	8006364 <_printf_i+0x28>
 8006376:	a101      	add	r1, pc, #4	@ (adr r1, 800637c <_printf_i+0x40>)
 8006378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800637c:	080063d5 	.word	0x080063d5
 8006380:	080063e9 	.word	0x080063e9
 8006384:	08006365 	.word	0x08006365
 8006388:	08006365 	.word	0x08006365
 800638c:	08006365 	.word	0x08006365
 8006390:	08006365 	.word	0x08006365
 8006394:	080063e9 	.word	0x080063e9
 8006398:	08006365 	.word	0x08006365
 800639c:	08006365 	.word	0x08006365
 80063a0:	08006365 	.word	0x08006365
 80063a4:	08006365 	.word	0x08006365
 80063a8:	080064e7 	.word	0x080064e7
 80063ac:	08006413 	.word	0x08006413
 80063b0:	080064a1 	.word	0x080064a1
 80063b4:	08006365 	.word	0x08006365
 80063b8:	08006365 	.word	0x08006365
 80063bc:	08006509 	.word	0x08006509
 80063c0:	08006365 	.word	0x08006365
 80063c4:	08006413 	.word	0x08006413
 80063c8:	08006365 	.word	0x08006365
 80063cc:	08006365 	.word	0x08006365
 80063d0:	080064a9 	.word	0x080064a9
 80063d4:	6833      	ldr	r3, [r6, #0]
 80063d6:	1d1a      	adds	r2, r3, #4
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6032      	str	r2, [r6, #0]
 80063dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80063e4:	2301      	movs	r3, #1
 80063e6:	e09c      	b.n	8006522 <_printf_i+0x1e6>
 80063e8:	6833      	ldr	r3, [r6, #0]
 80063ea:	6820      	ldr	r0, [r4, #0]
 80063ec:	1d19      	adds	r1, r3, #4
 80063ee:	6031      	str	r1, [r6, #0]
 80063f0:	0606      	lsls	r6, r0, #24
 80063f2:	d501      	bpl.n	80063f8 <_printf_i+0xbc>
 80063f4:	681d      	ldr	r5, [r3, #0]
 80063f6:	e003      	b.n	8006400 <_printf_i+0xc4>
 80063f8:	0645      	lsls	r5, r0, #25
 80063fa:	d5fb      	bpl.n	80063f4 <_printf_i+0xb8>
 80063fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006400:	2d00      	cmp	r5, #0
 8006402:	da03      	bge.n	800640c <_printf_i+0xd0>
 8006404:	232d      	movs	r3, #45	@ 0x2d
 8006406:	426d      	negs	r5, r5
 8006408:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800640c:	4858      	ldr	r0, [pc, #352]	@ (8006570 <_printf_i+0x234>)
 800640e:	230a      	movs	r3, #10
 8006410:	e011      	b.n	8006436 <_printf_i+0xfa>
 8006412:	6821      	ldr	r1, [r4, #0]
 8006414:	6833      	ldr	r3, [r6, #0]
 8006416:	0608      	lsls	r0, r1, #24
 8006418:	f853 5b04 	ldr.w	r5, [r3], #4
 800641c:	d402      	bmi.n	8006424 <_printf_i+0xe8>
 800641e:	0649      	lsls	r1, r1, #25
 8006420:	bf48      	it	mi
 8006422:	b2ad      	uxthmi	r5, r5
 8006424:	2f6f      	cmp	r7, #111	@ 0x6f
 8006426:	4852      	ldr	r0, [pc, #328]	@ (8006570 <_printf_i+0x234>)
 8006428:	6033      	str	r3, [r6, #0]
 800642a:	bf14      	ite	ne
 800642c:	230a      	movne	r3, #10
 800642e:	2308      	moveq	r3, #8
 8006430:	2100      	movs	r1, #0
 8006432:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006436:	6866      	ldr	r6, [r4, #4]
 8006438:	60a6      	str	r6, [r4, #8]
 800643a:	2e00      	cmp	r6, #0
 800643c:	db05      	blt.n	800644a <_printf_i+0x10e>
 800643e:	6821      	ldr	r1, [r4, #0]
 8006440:	432e      	orrs	r6, r5
 8006442:	f021 0104 	bic.w	r1, r1, #4
 8006446:	6021      	str	r1, [r4, #0]
 8006448:	d04b      	beq.n	80064e2 <_printf_i+0x1a6>
 800644a:	4616      	mov	r6, r2
 800644c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006450:	fb03 5711 	mls	r7, r3, r1, r5
 8006454:	5dc7      	ldrb	r7, [r0, r7]
 8006456:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800645a:	462f      	mov	r7, r5
 800645c:	42bb      	cmp	r3, r7
 800645e:	460d      	mov	r5, r1
 8006460:	d9f4      	bls.n	800644c <_printf_i+0x110>
 8006462:	2b08      	cmp	r3, #8
 8006464:	d10b      	bne.n	800647e <_printf_i+0x142>
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	07df      	lsls	r7, r3, #31
 800646a:	d508      	bpl.n	800647e <_printf_i+0x142>
 800646c:	6923      	ldr	r3, [r4, #16]
 800646e:	6861      	ldr	r1, [r4, #4]
 8006470:	4299      	cmp	r1, r3
 8006472:	bfde      	ittt	le
 8006474:	2330      	movle	r3, #48	@ 0x30
 8006476:	f806 3c01 	strble.w	r3, [r6, #-1]
 800647a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800647e:	1b92      	subs	r2, r2, r6
 8006480:	6122      	str	r2, [r4, #16]
 8006482:	f8cd a000 	str.w	sl, [sp]
 8006486:	464b      	mov	r3, r9
 8006488:	aa03      	add	r2, sp, #12
 800648a:	4621      	mov	r1, r4
 800648c:	4640      	mov	r0, r8
 800648e:	f7ff fee7 	bl	8006260 <_printf_common>
 8006492:	3001      	adds	r0, #1
 8006494:	d14a      	bne.n	800652c <_printf_i+0x1f0>
 8006496:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800649a:	b004      	add	sp, #16
 800649c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	f043 0320 	orr.w	r3, r3, #32
 80064a6:	6023      	str	r3, [r4, #0]
 80064a8:	4832      	ldr	r0, [pc, #200]	@ (8006574 <_printf_i+0x238>)
 80064aa:	2778      	movs	r7, #120	@ 0x78
 80064ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	6831      	ldr	r1, [r6, #0]
 80064b4:	061f      	lsls	r7, r3, #24
 80064b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80064ba:	d402      	bmi.n	80064c2 <_printf_i+0x186>
 80064bc:	065f      	lsls	r7, r3, #25
 80064be:	bf48      	it	mi
 80064c0:	b2ad      	uxthmi	r5, r5
 80064c2:	6031      	str	r1, [r6, #0]
 80064c4:	07d9      	lsls	r1, r3, #31
 80064c6:	bf44      	itt	mi
 80064c8:	f043 0320 	orrmi.w	r3, r3, #32
 80064cc:	6023      	strmi	r3, [r4, #0]
 80064ce:	b11d      	cbz	r5, 80064d8 <_printf_i+0x19c>
 80064d0:	2310      	movs	r3, #16
 80064d2:	e7ad      	b.n	8006430 <_printf_i+0xf4>
 80064d4:	4826      	ldr	r0, [pc, #152]	@ (8006570 <_printf_i+0x234>)
 80064d6:	e7e9      	b.n	80064ac <_printf_i+0x170>
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	f023 0320 	bic.w	r3, r3, #32
 80064de:	6023      	str	r3, [r4, #0]
 80064e0:	e7f6      	b.n	80064d0 <_printf_i+0x194>
 80064e2:	4616      	mov	r6, r2
 80064e4:	e7bd      	b.n	8006462 <_printf_i+0x126>
 80064e6:	6833      	ldr	r3, [r6, #0]
 80064e8:	6825      	ldr	r5, [r4, #0]
 80064ea:	6961      	ldr	r1, [r4, #20]
 80064ec:	1d18      	adds	r0, r3, #4
 80064ee:	6030      	str	r0, [r6, #0]
 80064f0:	062e      	lsls	r6, r5, #24
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	d501      	bpl.n	80064fa <_printf_i+0x1be>
 80064f6:	6019      	str	r1, [r3, #0]
 80064f8:	e002      	b.n	8006500 <_printf_i+0x1c4>
 80064fa:	0668      	lsls	r0, r5, #25
 80064fc:	d5fb      	bpl.n	80064f6 <_printf_i+0x1ba>
 80064fe:	8019      	strh	r1, [r3, #0]
 8006500:	2300      	movs	r3, #0
 8006502:	6123      	str	r3, [r4, #16]
 8006504:	4616      	mov	r6, r2
 8006506:	e7bc      	b.n	8006482 <_printf_i+0x146>
 8006508:	6833      	ldr	r3, [r6, #0]
 800650a:	1d1a      	adds	r2, r3, #4
 800650c:	6032      	str	r2, [r6, #0]
 800650e:	681e      	ldr	r6, [r3, #0]
 8006510:	6862      	ldr	r2, [r4, #4]
 8006512:	2100      	movs	r1, #0
 8006514:	4630      	mov	r0, r6
 8006516:	f7f9 fe7b 	bl	8000210 <memchr>
 800651a:	b108      	cbz	r0, 8006520 <_printf_i+0x1e4>
 800651c:	1b80      	subs	r0, r0, r6
 800651e:	6060      	str	r0, [r4, #4]
 8006520:	6863      	ldr	r3, [r4, #4]
 8006522:	6123      	str	r3, [r4, #16]
 8006524:	2300      	movs	r3, #0
 8006526:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800652a:	e7aa      	b.n	8006482 <_printf_i+0x146>
 800652c:	6923      	ldr	r3, [r4, #16]
 800652e:	4632      	mov	r2, r6
 8006530:	4649      	mov	r1, r9
 8006532:	4640      	mov	r0, r8
 8006534:	47d0      	blx	sl
 8006536:	3001      	adds	r0, #1
 8006538:	d0ad      	beq.n	8006496 <_printf_i+0x15a>
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	079b      	lsls	r3, r3, #30
 800653e:	d413      	bmi.n	8006568 <_printf_i+0x22c>
 8006540:	68e0      	ldr	r0, [r4, #12]
 8006542:	9b03      	ldr	r3, [sp, #12]
 8006544:	4298      	cmp	r0, r3
 8006546:	bfb8      	it	lt
 8006548:	4618      	movlt	r0, r3
 800654a:	e7a6      	b.n	800649a <_printf_i+0x15e>
 800654c:	2301      	movs	r3, #1
 800654e:	4632      	mov	r2, r6
 8006550:	4649      	mov	r1, r9
 8006552:	4640      	mov	r0, r8
 8006554:	47d0      	blx	sl
 8006556:	3001      	adds	r0, #1
 8006558:	d09d      	beq.n	8006496 <_printf_i+0x15a>
 800655a:	3501      	adds	r5, #1
 800655c:	68e3      	ldr	r3, [r4, #12]
 800655e:	9903      	ldr	r1, [sp, #12]
 8006560:	1a5b      	subs	r3, r3, r1
 8006562:	42ab      	cmp	r3, r5
 8006564:	dcf2      	bgt.n	800654c <_printf_i+0x210>
 8006566:	e7eb      	b.n	8006540 <_printf_i+0x204>
 8006568:	2500      	movs	r5, #0
 800656a:	f104 0619 	add.w	r6, r4, #25
 800656e:	e7f5      	b.n	800655c <_printf_i+0x220>
 8006570:	080067ae 	.word	0x080067ae
 8006574:	080067bf 	.word	0x080067bf

08006578 <memmove>:
 8006578:	4288      	cmp	r0, r1
 800657a:	b510      	push	{r4, lr}
 800657c:	eb01 0402 	add.w	r4, r1, r2
 8006580:	d902      	bls.n	8006588 <memmove+0x10>
 8006582:	4284      	cmp	r4, r0
 8006584:	4623      	mov	r3, r4
 8006586:	d807      	bhi.n	8006598 <memmove+0x20>
 8006588:	1e43      	subs	r3, r0, #1
 800658a:	42a1      	cmp	r1, r4
 800658c:	d008      	beq.n	80065a0 <memmove+0x28>
 800658e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006592:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006596:	e7f8      	b.n	800658a <memmove+0x12>
 8006598:	4402      	add	r2, r0
 800659a:	4601      	mov	r1, r0
 800659c:	428a      	cmp	r2, r1
 800659e:	d100      	bne.n	80065a2 <memmove+0x2a>
 80065a0:	bd10      	pop	{r4, pc}
 80065a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065aa:	e7f7      	b.n	800659c <memmove+0x24>

080065ac <_sbrk_r>:
 80065ac:	b538      	push	{r3, r4, r5, lr}
 80065ae:	4d06      	ldr	r5, [pc, #24]	@ (80065c8 <_sbrk_r+0x1c>)
 80065b0:	2300      	movs	r3, #0
 80065b2:	4604      	mov	r4, r0
 80065b4:	4608      	mov	r0, r1
 80065b6:	602b      	str	r3, [r5, #0]
 80065b8:	f7fb fb80 	bl	8001cbc <_sbrk>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <_sbrk_r+0x1a>
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	b103      	cbz	r3, 80065c6 <_sbrk_r+0x1a>
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	2000042c 	.word	0x2000042c

080065cc <memcpy>:
 80065cc:	440a      	add	r2, r1
 80065ce:	4291      	cmp	r1, r2
 80065d0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80065d4:	d100      	bne.n	80065d8 <memcpy+0xc>
 80065d6:	4770      	bx	lr
 80065d8:	b510      	push	{r4, lr}
 80065da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065e2:	4291      	cmp	r1, r2
 80065e4:	d1f9      	bne.n	80065da <memcpy+0xe>
 80065e6:	bd10      	pop	{r4, pc}

080065e8 <_realloc_r>:
 80065e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ec:	4607      	mov	r7, r0
 80065ee:	4614      	mov	r4, r2
 80065f0:	460d      	mov	r5, r1
 80065f2:	b921      	cbnz	r1, 80065fe <_realloc_r+0x16>
 80065f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065f8:	4611      	mov	r1, r2
 80065fa:	f7ff bc4d 	b.w	8005e98 <_malloc_r>
 80065fe:	b92a      	cbnz	r2, 800660c <_realloc_r+0x24>
 8006600:	f7ff fbde 	bl	8005dc0 <_free_r>
 8006604:	4625      	mov	r5, r4
 8006606:	4628      	mov	r0, r5
 8006608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800660c:	f000 f81a 	bl	8006644 <_malloc_usable_size_r>
 8006610:	4284      	cmp	r4, r0
 8006612:	4606      	mov	r6, r0
 8006614:	d802      	bhi.n	800661c <_realloc_r+0x34>
 8006616:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800661a:	d8f4      	bhi.n	8006606 <_realloc_r+0x1e>
 800661c:	4621      	mov	r1, r4
 800661e:	4638      	mov	r0, r7
 8006620:	f7ff fc3a 	bl	8005e98 <_malloc_r>
 8006624:	4680      	mov	r8, r0
 8006626:	b908      	cbnz	r0, 800662c <_realloc_r+0x44>
 8006628:	4645      	mov	r5, r8
 800662a:	e7ec      	b.n	8006606 <_realloc_r+0x1e>
 800662c:	42b4      	cmp	r4, r6
 800662e:	4622      	mov	r2, r4
 8006630:	4629      	mov	r1, r5
 8006632:	bf28      	it	cs
 8006634:	4632      	movcs	r2, r6
 8006636:	f7ff ffc9 	bl	80065cc <memcpy>
 800663a:	4629      	mov	r1, r5
 800663c:	4638      	mov	r0, r7
 800663e:	f7ff fbbf 	bl	8005dc0 <_free_r>
 8006642:	e7f1      	b.n	8006628 <_realloc_r+0x40>

08006644 <_malloc_usable_size_r>:
 8006644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006648:	1f18      	subs	r0, r3, #4
 800664a:	2b00      	cmp	r3, #0
 800664c:	bfbc      	itt	lt
 800664e:	580b      	ldrlt	r3, [r1, r0]
 8006650:	18c0      	addlt	r0, r0, r3
 8006652:	4770      	bx	lr

08006654 <_init>:
 8006654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006656:	bf00      	nop
 8006658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800665a:	bc08      	pop	{r3}
 800665c:	469e      	mov	lr, r3
 800665e:	4770      	bx	lr

08006660 <_fini>:
 8006660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006662:	bf00      	nop
 8006664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006666:	bc08      	pop	{r3}
 8006668:	469e      	mov	lr, r3
 800666a:	4770      	bx	lr
