
motor_controller_pid_rpm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005014  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080051e4  080051e4  000061e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005348  08005348  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005348  08005348  00006348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005350  08005350  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005350  08005350  00006350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005354  08005354  00006354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005358  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  2000005c  080053b4  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  080053b4  0000738c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e04d  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f40  00000000  00000000  000150d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00017020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a33  00000000  00000000  00017d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e9c  00000000  00000000  00018753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec9c  00000000  00000000  0003a5ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0eea  00000000  00000000  0004928b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a175  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c70  00000000  00000000  0011a1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0011de28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080051cc 	.word	0x080051cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080051cc 	.word	0x080051cc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fd40 	bl	8001064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f860 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f9f6 	bl	80009d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 f9ca 	bl	8000984 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80005f0:	f000 f974 	bl	80008dc <MX_TIM4_Init>
  MX_TIM1_Init();
 80005f4:	f000 f8c6 	bl	8000784 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80005f8:	213c      	movs	r1, #60	@ 0x3c
 80005fa:	4820      	ldr	r0, [pc, #128]	@ (800067c <main+0xa0>)
 80005fc:	f002 f90c 	bl	8002818 <HAL_TIM_Encoder_Start>
  HAL_UART_Receive_IT(&huart2, &rx_uart, 1);
 8000600:	2201      	movs	r2, #1
 8000602:	491f      	ldr	r1, [pc, #124]	@ (8000680 <main+0xa4>)
 8000604:	481f      	ldr	r0, [pc, #124]	@ (8000684 <main+0xa8>)
 8000606:	f003 f914 	bl	8003832 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800060a:	2100      	movs	r1, #0
 800060c:	481e      	ldr	r0, [pc, #120]	@ (8000688 <main+0xac>)
 800060e:	f001 ff95 	bl	800253c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000612:	2104      	movs	r1, #4
 8000614:	481c      	ldr	r0, [pc, #112]	@ (8000688 <main+0xac>)
 8000616:	f001 ff91 	bl	800253c <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 encoder_position = __HAL_TIM_GET_COUNTER(&htim4);
 800061a:	4b18      	ldr	r3, [pc, #96]	@ (800067c <main+0xa0>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000620:	4a1a      	ldr	r2, [pc, #104]	@ (800068c <main+0xb0>)
 8000622:	6013      	str	r3, [r2, #0]
	 rpm = encoder_position/2;
 8000624:	4b19      	ldr	r3, [pc, #100]	@ (800068c <main+0xb0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	085b      	lsrs	r3, r3, #1
 800062a:	4a19      	ldr	r2, [pc, #100]	@ (8000690 <main+0xb4>)
 800062c:	6013      	str	r3, [r2, #0]
	 pwm = (rpm_select*100)/11500;
 800062e:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <main+0xb8>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2264      	movs	r2, #100	@ 0x64
 8000634:	fb02 f303 	mul.w	r3, r2, r3
 8000638:	4a17      	ldr	r2, [pc, #92]	@ (8000698 <main+0xbc>)
 800063a:	fba2 2303 	umull	r2, r3, r2, r3
 800063e:	0b5b      	lsrs	r3, r3, #13
 8000640:	4a16      	ldr	r2, [pc, #88]	@ (800069c <main+0xc0>)
 8000642:	6013      	str	r3, [r2, #0]

	 if(sentido_horario) {
 8000644:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <main+0xc4>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d009      	beq.n	8000660 <main+0x84>
	 	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm);
 800064c:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <main+0xac>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a12      	ldr	r2, [pc, #72]	@ (800069c <main+0xc0>)
 8000652:	6812      	ldr	r2, [r2, #0]
 8000654:	635a      	str	r2, [r3, #52]	@ 0x34
	 	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000656:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <main+0xac>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2200      	movs	r2, #0
 800065c:	639a      	str	r2, [r3, #56]	@ 0x38
 800065e:	e7dc      	b.n	800061a <main+0x3e>
	 } else if(sentido_antihorario) {
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <main+0xc8>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d0d8      	beq.n	800061a <main+0x3e>
	 	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm);
 8000668:	4b07      	ldr	r3, [pc, #28]	@ (8000688 <main+0xac>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a0b      	ldr	r2, [pc, #44]	@ (800069c <main+0xc0>)
 800066e:	6812      	ldr	r2, [r2, #0]
 8000670:	639a      	str	r2, [r3, #56]	@ 0x38
	 	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000672:	4b05      	ldr	r3, [pc, #20]	@ (8000688 <main+0xac>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2200      	movs	r2, #0
 8000678:	635a      	str	r2, [r3, #52]	@ 0x34
	 encoder_position = __HAL_TIM_GET_COUNTER(&htim4);
 800067a:	e7ce      	b.n	800061a <main+0x3e>
 800067c:	200000c0 	.word	0x200000c0
 8000680:	20000162 	.word	0x20000162
 8000684:	20000108 	.word	0x20000108
 8000688:	20000078 	.word	0x20000078
 800068c:	20000150 	.word	0x20000150
 8000690:	20000154 	.word	0x20000154
 8000694:	20000158 	.word	0x20000158
 8000698:	b65c6d59 	.word	0xb65c6d59
 800069c:	2000015c 	.word	0x2000015c
 80006a0:	20000160 	.word	0x20000160
 80006a4:	20000161 	.word	0x20000161

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b094      	sub	sp, #80	@ 0x50
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	2234      	movs	r2, #52	@ 0x34
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 f90a 	bl	80048d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b2a      	ldr	r3, [pc, #168]	@ (800077c <SystemClock_Config+0xd4>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	4a29      	ldr	r2, [pc, #164]	@ (800077c <SystemClock_Config+0xd4>)
 80006d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006da:	6413      	str	r3, [r2, #64]	@ 0x40
 80006dc:	4b27      	ldr	r3, [pc, #156]	@ (800077c <SystemClock_Config+0xd4>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006e8:	2300      	movs	r3, #0
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	4b24      	ldr	r3, [pc, #144]	@ (8000780 <SystemClock_Config+0xd8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006f4:	4a22      	ldr	r2, [pc, #136]	@ (8000780 <SystemClock_Config+0xd8>)
 80006f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <SystemClock_Config+0xd8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000708:	2302      	movs	r3, #2
 800070a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800070c:	2301      	movs	r3, #1
 800070e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000710:	2310      	movs	r3, #16
 8000712:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000714:	2302      	movs	r3, #2
 8000716:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000718:	2300      	movs	r3, #0
 800071a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800071c:	2310      	movs	r3, #16
 800071e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000720:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000724:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000726:	2304      	movs	r3, #4
 8000728:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800072a:	2302      	movs	r3, #2
 800072c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800072e:	2302      	movs	r3, #2
 8000730:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	4618      	mov	r0, r3
 8000738:	f001 fbba 	bl	8001eb0 <HAL_RCC_OscConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000742:	f000 fa93 	bl	8000c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000746:	230f      	movs	r3, #15
 8000748:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074a:	2302      	movs	r3, #2
 800074c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000752:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800075c:	f107 0308 	add.w	r3, r7, #8
 8000760:	2102      	movs	r1, #2
 8000762:	4618      	mov	r0, r3
 8000764:	f001 f85a 	bl	800181c <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800076e:	f000 fa7d 	bl	8000c6c <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3750      	adds	r7, #80	@ 0x50
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800
 8000780:	40007000 	.word	0x40007000

08000784 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b096      	sub	sp, #88	@ 0x58
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000798:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]
 80007b2:	615a      	str	r2, [r3, #20]
 80007b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2220      	movs	r2, #32
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f004 f887 	bl	80048d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007c2:	4b44      	ldr	r3, [pc, #272]	@ (80008d4 <MX_TIM1_Init+0x150>)
 80007c4:	4a44      	ldr	r2, [pc, #272]	@ (80008d8 <MX_TIM1_Init+0x154>)
 80007c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80007c8:	4b42      	ldr	r3, [pc, #264]	@ (80008d4 <MX_TIM1_Init+0x150>)
 80007ca:	2253      	movs	r2, #83	@ 0x53
 80007cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ce:	4b41      	ldr	r3, [pc, #260]	@ (80008d4 <MX_TIM1_Init+0x150>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80007d4:	4b3f      	ldr	r3, [pc, #252]	@ (80008d4 <MX_TIM1_Init+0x150>)
 80007d6:	2263      	movs	r2, #99	@ 0x63
 80007d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007da:	4b3e      	ldr	r3, [pc, #248]	@ (80008d4 <MX_TIM1_Init+0x150>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007e0:	4b3c      	ldr	r3, [pc, #240]	@ (80008d4 <MX_TIM1_Init+0x150>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e6:	4b3b      	ldr	r3, [pc, #236]	@ (80008d4 <MX_TIM1_Init+0x150>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007ec:	4839      	ldr	r0, [pc, #228]	@ (80008d4 <MX_TIM1_Init+0x150>)
 80007ee:	f001 fdfd 	bl	80023ec <HAL_TIM_Base_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80007f8:	f000 fa38 	bl	8000c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000800:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000802:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000806:	4619      	mov	r1, r3
 8000808:	4832      	ldr	r0, [pc, #200]	@ (80008d4 <MX_TIM1_Init+0x150>)
 800080a:	f002 fa45 	bl	8002c98 <HAL_TIM_ConfigClockSource>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000814:	f000 fa2a 	bl	8000c6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000818:	482e      	ldr	r0, [pc, #184]	@ (80008d4 <MX_TIM1_Init+0x150>)
 800081a:	f001 fe36 	bl	800248a <HAL_TIM_PWM_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000824:	f000 fa22 	bl	8000c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082c:	2300      	movs	r3, #0
 800082e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000830:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000834:	4619      	mov	r1, r3
 8000836:	4827      	ldr	r0, [pc, #156]	@ (80008d4 <MX_TIM1_Init+0x150>)
 8000838:	f002 fe3e 	bl	80034b8 <HAL_TIMEx_MasterConfigSynchronization>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000842:	f000 fa13 	bl	8000c6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000846:	2360      	movs	r3, #96	@ 0x60
 8000848:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800084e:	2300      	movs	r3, #0
 8000850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000852:	2300      	movs	r3, #0
 8000854:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800085a:	2300      	movs	r3, #0
 800085c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800085e:	2300      	movs	r3, #0
 8000860:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000866:	2200      	movs	r2, #0
 8000868:	4619      	mov	r1, r3
 800086a:	481a      	ldr	r0, [pc, #104]	@ (80008d4 <MX_TIM1_Init+0x150>)
 800086c:	f002 f952 	bl	8002b14 <HAL_TIM_PWM_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000876:	f000 f9f9 	bl	8000c6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800087a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087e:	2204      	movs	r2, #4
 8000880:	4619      	mov	r1, r3
 8000882:	4814      	ldr	r0, [pc, #80]	@ (80008d4 <MX_TIM1_Init+0x150>)
 8000884:	f002 f946 	bl	8002b14 <HAL_TIM_PWM_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800088e:	f000 f9ed 	bl	8000c6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	4619      	mov	r1, r3
 80008b4:	4807      	ldr	r0, [pc, #28]	@ (80008d4 <MX_TIM1_Init+0x150>)
 80008b6:	f002 fe7b 	bl	80035b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80008c0:	f000 f9d4 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008c4:	4803      	ldr	r0, [pc, #12]	@ (80008d4 <MX_TIM1_Init+0x150>)
 80008c6:	f000 fa71 	bl	8000dac <HAL_TIM_MspPostInit>

}
 80008ca:	bf00      	nop
 80008cc:	3758      	adds	r7, #88	@ 0x58
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000078 	.word	0x20000078
 80008d8:	40010000 	.word	0x40010000

080008dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	@ 0x30
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	2224      	movs	r2, #36	@ 0x24
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f003 fff0 	bl	80048d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008f8:	4b20      	ldr	r3, [pc, #128]	@ (800097c <MX_TIM4_Init+0xa0>)
 80008fa:	4a21      	ldr	r2, [pc, #132]	@ (8000980 <MX_TIM4_Init+0xa4>)
 80008fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008fe:	4b1f      	ldr	r3, [pc, #124]	@ (800097c <MX_TIM4_Init+0xa0>)
 8000900:	2200      	movs	r2, #0
 8000902:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000904:	4b1d      	ldr	r3, [pc, #116]	@ (800097c <MX_TIM4_Init+0xa0>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800090a:	4b1c      	ldr	r3, [pc, #112]	@ (800097c <MX_TIM4_Init+0xa0>)
 800090c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000910:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000912:	4b1a      	ldr	r3, [pc, #104]	@ (800097c <MX_TIM4_Init+0xa0>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000918:	4b18      	ldr	r3, [pc, #96]	@ (800097c <MX_TIM4_Init+0xa0>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800091e:	2303      	movs	r3, #3
 8000920:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000926:	2301      	movs	r3, #1
 8000928:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800092e:	230a      	movs	r3, #10
 8000930:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000936:	2301      	movs	r3, #1
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 800093e:	230a      	movs	r3, #10
 8000940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	4619      	mov	r1, r3
 8000948:	480c      	ldr	r0, [pc, #48]	@ (800097c <MX_TIM4_Init+0xa0>)
 800094a:	f001 febf 	bl	80026cc <HAL_TIM_Encoder_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000954:	f000 f98a 	bl	8000c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	4619      	mov	r1, r3
 8000964:	4805      	ldr	r0, [pc, #20]	@ (800097c <MX_TIM4_Init+0xa0>)
 8000966:	f002 fda7 	bl	80034b8 <HAL_TIMEx_MasterConfigSynchronization>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000970:	f000 f97c 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	3730      	adds	r7, #48	@ 0x30
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	200000c0 	.word	0x200000c0
 8000980:	40000800 	.word	0x40000800

08000984 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 800098a:	4a12      	ldr	r2, [pc, #72]	@ (80009d4 <MX_USART2_UART_Init+0x50>)
 800098c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800098e:	4b10      	ldr	r3, [pc, #64]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <MX_USART2_UART_Init+0x4c>)
 80009bc:	f002 fe5e 	bl	800367c <HAL_UART_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009c6:	f000 f951 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000108 	.word	0x20000108
 80009d4:	40004400 	.word	0x40004400

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	@ 0x28
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	4b44      	ldr	r3, [pc, #272]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a43      	ldr	r2, [pc, #268]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b41      	ldr	r3, [pc, #260]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a3c      	ldr	r2, [pc, #240]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 8000a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b3a      	ldr	r3, [pc, #232]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	4b36      	ldr	r3, [pc, #216]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a35      	ldr	r2, [pc, #212]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b33      	ldr	r3, [pc, #204]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b2f      	ldr	r3, [pc, #188]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a2e      	ldr	r2, [pc, #184]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b2c      	ldr	r3, [pc, #176]	@ (8000b04 <MX_GPIO_Init+0x12c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2120      	movs	r1, #32
 8000a62:	4829      	ldr	r0, [pc, #164]	@ (8000b08 <MX_GPIO_Init+0x130>)
 8000a64:	f000 fea8 	bl	80017b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin encoder_button_Pin */
  GPIO_InitStruct.Pin = B1_Pin|encoder_button_Pin;
 8000a68:	f242 0304 	movw	r3, #8196	@ 0x2004
 8000a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a6e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4823      	ldr	r0, [pc, #140]	@ (8000b0c <MX_GPIO_Init+0x134>)
 8000a80:	f000 fd06 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_sentido_horario_Pin btn_sentido_antihorario_Pin */
  GPIO_InitStruct.Pin = btn_sentido_horario_Pin|btn_sentido_antihorario_Pin;
 8000a84:	2303      	movs	r3, #3
 8000a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a88:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	481c      	ldr	r0, [pc, #112]	@ (8000b0c <MX_GPIO_Init+0x134>)
 8000a9a:	f000 fcf9 	bl	8001490 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a9e:	2320      	movs	r3, #32
 8000aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4814      	ldr	r0, [pc, #80]	@ (8000b08 <MX_GPIO_Init+0x130>)
 8000ab6:	f000 fceb 	bl	8001490 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2100      	movs	r1, #0
 8000abe:	2006      	movs	r0, #6
 8000ac0:	f000 fc1d 	bl	80012fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ac4:	2006      	movs	r0, #6
 8000ac6:	f000 fc36 	bl	8001336 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	2007      	movs	r0, #7
 8000ad0:	f000 fc15 	bl	80012fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ad4:	2007      	movs	r0, #7
 8000ad6:	f000 fc2e 	bl	8001336 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	2008      	movs	r0, #8
 8000ae0:	f000 fc0d 	bl	80012fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000ae4:	2008      	movs	r0, #8
 8000ae6:	f000 fc26 	bl	8001336 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	2028      	movs	r0, #40	@ 0x28
 8000af0:	f000 fc05 	bl	80012fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000af4:	2028      	movs	r0, #40	@ 0x28
 8000af6:	f000 fc1e 	bl	8001336 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000afa:	bf00      	nop
 8000afc:	3728      	adds	r7, #40	@ 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40020800 	.word	0x40020800

08000b10 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	80fb      	strh	r3, [r7, #6]
	uint32_t tempo_atual = HAL_GetTick();
 8000b1a:	f000 fb09 	bl	8001130 <HAL_GetTick>
 8000b1e:	60f8      	str	r0, [r7, #12]
	static uint32_t tempo_anterior = 0;
	static uint32_t tempo_anterior_horario = 0;
	static uint32_t tempo_anterior_antihorario = 0;
	switch(GPIO_Pin) {
 8000b20:	88fb      	ldrh	r3, [r7, #6]
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	d006      	beq.n	8000b34 <HAL_GPIO_EXTI_Callback+0x24>
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	dc32      	bgt.n	8000b90 <HAL_GPIO_EXTI_Callback+0x80>
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d010      	beq.n	8000b50 <HAL_GPIO_EXTI_Callback+0x40>
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d01e      	beq.n	8000b70 <HAL_GPIO_EXTI_Callback+0x60>
			sentido_antihorario = true;
			tempo_anterior_antihorario = tempo_atual;
		}
		break;
	default:
		break;
 8000b32:	e02d      	b.n	8000b90 <HAL_GPIO_EXTI_Callback+0x80>
		if((tempo_atual - tempo_anterior) > 50) {
 8000b34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0x98>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	2b32      	cmp	r3, #50	@ 0x32
 8000b3e:	d929      	bls.n	8000b94 <HAL_GPIO_EXTI_Callback+0x84>
			rpm_select = rpm;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	@ (8000bac <HAL_GPIO_EXTI_Callback+0x9c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a1a      	ldr	r2, [pc, #104]	@ (8000bb0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000b46:	6013      	str	r3, [r2, #0]
			tempo_anterior = tempo_atual;
 8000b48:	4a17      	ldr	r2, [pc, #92]	@ (8000ba8 <HAL_GPIO_EXTI_Callback+0x98>)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	6013      	str	r3, [r2, #0]
		break;
 8000b4e:	e021      	b.n	8000b94 <HAL_GPIO_EXTI_Callback+0x84>
		if((tempo_atual - tempo_anterior_horario) > 50) {
 8000b50:	4b18      	ldr	r3, [pc, #96]	@ (8000bb4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	2b32      	cmp	r3, #50	@ 0x32
 8000b5a:	d91d      	bls.n	8000b98 <HAL_GPIO_EXTI_Callback+0x88>
			sentido_antihorario = false;
 8000b5c:	4b16      	ldr	r3, [pc, #88]	@ (8000bb8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
			sentido_horario = true;
 8000b62:	4b16      	ldr	r3, [pc, #88]	@ (8000bbc <HAL_GPIO_EXTI_Callback+0xac>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
			tempo_anterior_horario = tempo_atual;
 8000b68:	4a12      	ldr	r2, [pc, #72]	@ (8000bb4 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	6013      	str	r3, [r2, #0]
		break;
 8000b6e:	e013      	b.n	8000b98 <HAL_GPIO_EXTI_Callback+0x88>
		if((tempo_atual - tempo_anterior_antihorario) > 50) {
 8000b70:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	2b32      	cmp	r3, #50	@ 0x32
 8000b7a:	d90f      	bls.n	8000b9c <HAL_GPIO_EXTI_Callback+0x8c>
			sentido_horario = false;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <HAL_GPIO_EXTI_Callback+0xac>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
			sentido_antihorario = true;
 8000b82:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
			tempo_anterior_antihorario = tempo_atual;
 8000b88:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	6013      	str	r3, [r2, #0]
		break;
 8000b8e:	e005      	b.n	8000b9c <HAL_GPIO_EXTI_Callback+0x8c>
		break;
 8000b90:	bf00      	nop
 8000b92:	e004      	b.n	8000b9e <HAL_GPIO_EXTI_Callback+0x8e>
		break;
 8000b94:	bf00      	nop
 8000b96:	e002      	b.n	8000b9e <HAL_GPIO_EXTI_Callback+0x8e>
		break;
 8000b98:	bf00      	nop
 8000b9a:	e000      	b.n	8000b9e <HAL_GPIO_EXTI_Callback+0x8e>
		break;
 8000b9c:	bf00      	nop
	}
}
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000230 	.word	0x20000230
 8000bac:	20000154 	.word	0x20000154
 8000bb0:	20000158 	.word	0x20000158
 8000bb4:	20000234 	.word	0x20000234
 8000bb8:	20000161 	.word	0x20000161
 8000bbc:	20000160 	.word	0x20000160
 8000bc0:	20000238 	.word	0x20000238

08000bc4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	if(rx_uart != '\r' && rx_index < RX_BUFFER_SIZE - 1) {
 8000bcc:	4b20      	ldr	r3, [pc, #128]	@ (8000c50 <HAL_UART_RxCpltCallback+0x8c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b0d      	cmp	r3, #13
 8000bd2:	d011      	beq.n	8000bf8 <HAL_UART_RxCpltCallback+0x34>
 8000bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c54 <HAL_UART_RxCpltCallback+0x90>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b62      	cmp	r3, #98	@ 0x62
 8000bda:	d80d      	bhi.n	8000bf8 <HAL_UART_RxCpltCallback+0x34>
		rx_buffer[rx_index] = rx_uart;
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c54 <HAL_UART_RxCpltCallback+0x90>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c50 <HAL_UART_RxCpltCallback+0x8c>)
 8000be4:	7819      	ldrb	r1, [r3, #0]
 8000be6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c58 <HAL_UART_RxCpltCallback+0x94>)
 8000be8:	5499      	strb	r1, [r3, r2]
		rx_index++;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <HAL_UART_RxCpltCallback+0x90>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <HAL_UART_RxCpltCallback+0x90>)
 8000bf4:	701a      	strb	r2, [r3, #0]
 8000bf6:	e021      	b.n	8000c3c <HAL_UART_RxCpltCallback+0x78>
	} else {
		rx_buffer[rx_index] = '\0';
 8000bf8:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <HAL_UART_RxCpltCallback+0x90>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b16      	ldr	r3, [pc, #88]	@ (8000c58 <HAL_UART_RxCpltCallback+0x94>)
 8000c00:	2100      	movs	r1, #0
 8000c02:	5499      	strb	r1, [r3, r2]
		rpm_select = atoi(rx_buffer);
 8000c04:	4814      	ldr	r0, [pc, #80]	@ (8000c58 <HAL_UART_RxCpltCallback+0x94>)
 8000c06:	f003 fda5 	bl	8004754 <atoi>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <HAL_UART_RxCpltCallback+0x98>)
 8000c10:	601a      	str	r2, [r3, #0]
		snprintf(tx_buffer, TX_BUFFER_SIZE, "RPM selecionado = %lu\r\n", rpm_select);
 8000c12:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <HAL_UART_RxCpltCallback+0x98>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a12      	ldr	r2, [pc, #72]	@ (8000c60 <HAL_UART_RxCpltCallback+0x9c>)
 8000c18:	2164      	movs	r1, #100	@ 0x64
 8000c1a:	4812      	ldr	r0, [pc, #72]	@ (8000c64 <HAL_UART_RxCpltCallback+0xa0>)
 8000c1c:	f003 fe22 	bl	8004864 <sniprintf>
		HAL_UART_Transmit(&huart2, tx_buffer, sizeof(tx_buffer), 100);
 8000c20:	2364      	movs	r3, #100	@ 0x64
 8000c22:	2264      	movs	r2, #100	@ 0x64
 8000c24:	490f      	ldr	r1, [pc, #60]	@ (8000c64 <HAL_UART_RxCpltCallback+0xa0>)
 8000c26:	4810      	ldr	r0, [pc, #64]	@ (8000c68 <HAL_UART_RxCpltCallback+0xa4>)
 8000c28:	f002 fd78 	bl	800371c <HAL_UART_Transmit>
		rx_index = 0;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <HAL_UART_RxCpltCallback+0x90>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, RX_BUFFER_SIZE);
 8000c32:	2264      	movs	r2, #100	@ 0x64
 8000c34:	2100      	movs	r1, #0
 8000c36:	4808      	ldr	r0, [pc, #32]	@ (8000c58 <HAL_UART_RxCpltCallback+0x94>)
 8000c38:	f003 fe4a 	bl	80048d0 <memset>
	}

	HAL_UART_Receive_IT(&huart2, &rx_uart, 1);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4904      	ldr	r1, [pc, #16]	@ (8000c50 <HAL_UART_RxCpltCallback+0x8c>)
 8000c40:	4809      	ldr	r0, [pc, #36]	@ (8000c68 <HAL_UART_RxCpltCallback+0xa4>)
 8000c42:	f002 fdf6 	bl	8003832 <HAL_UART_Receive_IT>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000162 	.word	0x20000162
 8000c54:	200001c8 	.word	0x200001c8
 8000c58:	20000164 	.word	0x20000164
 8000c5c:	20000158 	.word	0x20000158
 8000c60:	080051e4 	.word	0x080051e4
 8000c64:	200001cc 	.word	0x200001cc
 8000c68:	20000108 	.word	0x20000108

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
}
 8000c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <Error_Handler+0x8>

08000c78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b10      	ldr	r3, [pc, #64]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c86:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	4a08      	ldr	r2, [pc, #32]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cb6:	2007      	movs	r0, #7
 8000cb8:	f000 fb16 	bl	80012e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0b      	ldr	r2, [pc, #44]	@ (8000d04 <HAL_TIM_Base_MspInit+0x3c>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d10d      	bne.n	8000cf6 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <HAL_TIM_Base_MspInit+0x40>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce2:	4a09      	ldr	r2, [pc, #36]	@ (8000d08 <HAL_TIM_Base_MspInit+0x40>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cea:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <HAL_TIM_Base_MspInit+0x40>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40010000 	.word	0x40010000
 8000d08:	40023800 	.word	0x40023800

08000d0c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	@ 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a1d      	ldr	r2, [pc, #116]	@ (8000da0 <HAL_TIM_Encoder_MspInit+0x94>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d133      	bne.n	8000d96 <HAL_TIM_Encoder_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	4b1c      	ldr	r3, [pc, #112]	@ (8000da4 <HAL_TIM_Encoder_MspInit+0x98>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	4a1b      	ldr	r2, [pc, #108]	@ (8000da4 <HAL_TIM_Encoder_MspInit+0x98>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d3e:	4b19      	ldr	r3, [pc, #100]	@ (8000da4 <HAL_TIM_Encoder_MspInit+0x98>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <HAL_TIM_Encoder_MspInit+0x98>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a14      	ldr	r2, [pc, #80]	@ (8000da4 <HAL_TIM_Encoder_MspInit+0x98>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <HAL_TIM_Encoder_MspInit+0x98>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d66:	23c0      	movs	r3, #192	@ 0xc0
 8000d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d76:	2302      	movs	r3, #2
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4809      	ldr	r0, [pc, #36]	@ (8000da8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000d82:	f000 fb85 	bl	8001490 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	201e      	movs	r0, #30
 8000d8c:	f000 fab7 	bl	80012fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d90:	201e      	movs	r0, #30
 8000d92:	f000 fad0 	bl	8001336 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	@ 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40000800 	.word	0x40000800
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020400 	.word	0x40020400

08000dac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a12      	ldr	r2, [pc, #72]	@ (8000e14 <HAL_TIM_MspPostInit+0x68>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d11e      	bne.n	8000e0c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <HAL_TIM_MspPostInit+0x6c>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	4a10      	ldr	r2, [pc, #64]	@ (8000e18 <HAL_TIM_MspPostInit+0x6c>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dde:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <HAL_TIM_MspPostInit+0x6c>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	4619      	mov	r1, r3
 8000e06:	4805      	ldr	r0, [pc, #20]	@ (8000e1c <HAL_TIM_MspPostInit+0x70>)
 8000e08:	f000 fb42 	bl	8001490 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e0c:	bf00      	nop
 8000e0e:	3720      	adds	r7, #32
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40010000 	.word	0x40010000
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020000 	.word	0x40020000

08000e20 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	@ 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb4 <HAL_UART_MspInit+0x94>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d133      	bne.n	8000eaa <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e52:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a14      	ldr	r2, [pc, #80]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e7a:	230c      	movs	r3, #12
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4809      	ldr	r0, [pc, #36]	@ (8000ebc <HAL_UART_MspInit+0x9c>)
 8000e96:	f000 fafb 	bl	8001490 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2026      	movs	r0, #38	@ 0x26
 8000ea0:	f000 fa2d 	bl	80012fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ea4:	2026      	movs	r0, #38	@ 0x26
 8000ea6:	f000 fa46 	bl	8001336 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	@ 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40004400 	.word	0x40004400
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f16:	f000 f8f7 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(btn_sentido_horario_Pin);
 8000f22:	2001      	movs	r0, #1
 8000f24:	f000 fc62 	bl	80017ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(btn_sentido_antihorario_Pin);
 8000f30:	2002      	movs	r0, #2
 8000f32:	f000 fc5b 	bl	80017ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(encoder_button_Pin);
 8000f3e:	2004      	movs	r0, #4
 8000f40:	f000 fc54 	bl	80017ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f4c:	4802      	ldr	r0, [pc, #8]	@ (8000f58 <TIM4_IRQHandler+0x10>)
 8000f4e:	f001 fcf1 	bl	8002934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200000c0 	.word	0x200000c0

08000f5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f60:	4802      	ldr	r0, [pc, #8]	@ (8000f6c <USART2_IRQHandler+0x10>)
 8000f62:	f002 fc8b 	bl	800387c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000108 	.word	0x20000108

08000f70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f74:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f78:	f000 fc38 	bl	80017ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f88:	4a14      	ldr	r2, [pc, #80]	@ (8000fdc <_sbrk+0x5c>)
 8000f8a:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <_sbrk+0x60>)
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f94:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d102      	bne.n	8000fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <_sbrk+0x64>)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	@ (8000fe8 <_sbrk+0x68>)
 8000fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d207      	bcs.n	8000fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb0:	f003 fc96 	bl	80048e0 <__errno>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fbe:	e009      	b.n	8000fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc0:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <_sbrk+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc6:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <_sbrk+0x64>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	4a05      	ldr	r2, [pc, #20]	@ (8000fe4 <_sbrk+0x64>)
 8000fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20020000 	.word	0x20020000
 8000fe0:	00000400 	.word	0x00000400
 8000fe4:	2000023c 	.word	0x2000023c
 8000fe8:	20000390 	.word	0x20000390

08000fec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <SystemInit+0x20>)
 8000ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ff6:	4a05      	ldr	r2, [pc, #20]	@ (800100c <SystemInit+0x20>)
 8000ff8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ffc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001010:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001048 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001014:	f7ff ffea 	bl	8000fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001018:	480c      	ldr	r0, [pc, #48]	@ (800104c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800101a:	490d      	ldr	r1, [pc, #52]	@ (8001050 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800101c:	4a0d      	ldr	r2, [pc, #52]	@ (8001054 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001030:	4c0a      	ldr	r4, [pc, #40]	@ (800105c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800103e:	f003 fc55 	bl	80048ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001042:	f7ff facb 	bl	80005dc <main>
  bx  lr    
 8001046:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001048:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001050:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001054:	08005358 	.word	0x08005358
  ldr r2, =_sbss
 8001058:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800105c:	2000038c 	.word	0x2000038c

08001060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001060:	e7fe      	b.n	8001060 <ADC_IRQHandler>
	...

08001064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001068:	4b0e      	ldr	r3, [pc, #56]	@ (80010a4 <HAL_Init+0x40>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0d      	ldr	r2, [pc, #52]	@ (80010a4 <HAL_Init+0x40>)
 800106e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001072:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001074:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <HAL_Init+0x40>)
 800107a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800107e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001080:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a07      	ldr	r2, [pc, #28]	@ (80010a4 <HAL_Init+0x40>)
 8001086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800108a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 f92b 	bl	80012e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001092:	2000      	movs	r0, #0
 8001094:	f000 f808 	bl	80010a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001098:	f7ff fdee 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023c00 	.word	0x40023c00

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <HAL_InitTick+0x54>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_InitTick+0x58>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f943 	bl	8001352 <HAL_SYSTICK_Config>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00e      	b.n	80010f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d80a      	bhi.n	80010f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010e4:	f000 f90b 	bl	80012fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e8:	4a06      	ldr	r2, [pc, #24]	@ (8001104 <HAL_InitTick+0x5c>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000008 	.word	0x20000008
 8001104:	20000004 	.word	0x20000004

08001108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	@ (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	20000240 	.word	0x20000240

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000240 	.word	0x20000240

08001148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001170:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	@ (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db0b      	blt.n	80011d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f003 021f 	and.w	r2, r3, #31
 80011c4:	4907      	ldr	r1, [pc, #28]	@ (80011e4 <__NVIC_EnableIRQ+0x38>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	2001      	movs	r0, #1
 80011ce:	fa00 f202 	lsl.w	r2, r0, r2
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000e100 	.word	0xe000e100

080011e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db0a      	blt.n	8001212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	490c      	ldr	r1, [pc, #48]	@ (8001234 <__NVIC_SetPriority+0x4c>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	0112      	lsls	r2, r2, #4
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	440b      	add	r3, r1
 800120c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001210:	e00a      	b.n	8001228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4908      	ldr	r1, [pc, #32]	@ (8001238 <__NVIC_SetPriority+0x50>)
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	3b04      	subs	r3, #4
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	440b      	add	r3, r1
 8001226:	761a      	strb	r2, [r3, #24]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000e100 	.word	0xe000e100
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	@ 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f1c3 0307 	rsb	r3, r3, #7
 8001256:	2b04      	cmp	r3, #4
 8001258:	bf28      	it	cs
 800125a:	2304      	movcs	r3, #4
 800125c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3304      	adds	r3, #4
 8001262:	2b06      	cmp	r3, #6
 8001264:	d902      	bls.n	800126c <NVIC_EncodePriority+0x30>
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3b03      	subs	r3, #3
 800126a:	e000      	b.n	800126e <NVIC_EncodePriority+0x32>
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	401a      	ands	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001284:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa01 f303 	lsl.w	r3, r1, r3
 800128e:	43d9      	mvns	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	4313      	orrs	r3, r2
         );
}
 8001296:	4618      	mov	r0, r3
 8001298:	3724      	adds	r7, #36	@ 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b4:	d301      	bcc.n	80012ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00f      	b.n	80012da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ba:	4a0a      	ldr	r2, [pc, #40]	@ (80012e4 <SysTick_Config+0x40>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c2:	210f      	movs	r1, #15
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012c8:	f7ff ff8e 	bl	80011e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012cc:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <SysTick_Config+0x40>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d2:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <SysTick_Config+0x40>)
 80012d4:	2207      	movs	r2, #7
 80012d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	e000e010 	.word	0xe000e010

080012e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff29 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001310:	f7ff ff3e 	bl	8001190 <__NVIC_GetPriorityGrouping>
 8001314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7ff ff8e 	bl	800123c <NVIC_EncodePriority>
 8001320:	4602      	mov	r2, r0
 8001322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff5d 	bl	80011e8 <__NVIC_SetPriority>
}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff31 	bl	80011ac <__NVIC_EnableIRQ>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ffa2 	bl	80012a4 <SysTick_Config>
 8001360:	4603      	mov	r3, r0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b084      	sub	sp, #16
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001376:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001378:	f7ff feda 	bl	8001130 <HAL_GetTick>
 800137c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d008      	beq.n	800139c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2280      	movs	r2, #128	@ 0x80
 800138e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e052      	b.n	8001442 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0216 	bic.w	r2, r2, #22
 80013aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	695a      	ldr	r2, [r3, #20]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d103      	bne.n	80013cc <HAL_DMA_Abort+0x62>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d007      	beq.n	80013dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0208 	bic.w	r2, r2, #8
 80013da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0201 	bic.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ec:	e013      	b.n	8001416 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ee:	f7ff fe9f 	bl	8001130 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b05      	cmp	r3, #5
 80013fa:	d90c      	bls.n	8001416 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2220      	movs	r2, #32
 8001400:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2203      	movs	r2, #3
 8001406:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e015      	b.n	8001442 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1e4      	bne.n	80013ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001428:	223f      	movs	r2, #63	@ 0x3f
 800142a:	409a      	lsls	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d004      	beq.n	8001468 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2280      	movs	r2, #128	@ 0x80
 8001462:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e00c      	b.n	8001482 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2205      	movs	r2, #5
 800146c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0201 	bic.w	r2, r2, #1
 800147e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	@ 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
 80014aa:	e165      	b.n	8001778 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014ac:	2201      	movs	r2, #1
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	f040 8154 	bne.w	8001772 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d005      	beq.n	80014e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d130      	bne.n	8001544 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	2203      	movs	r2, #3
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4013      	ands	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001518:	2201      	movs	r2, #1
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	091b      	lsrs	r3, r3, #4
 800152e:	f003 0201 	and.w	r2, r3, #1
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	2b03      	cmp	r3, #3
 800154e:	d017      	beq.n	8001580 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	2203      	movs	r2, #3
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d123      	bne.n	80015d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	08da      	lsrs	r2, r3, #3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3208      	adds	r2, #8
 8001594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001598:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	220f      	movs	r2, #15
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	691a      	ldr	r2, [r3, #16]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	08da      	lsrs	r2, r3, #3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3208      	adds	r2, #8
 80015ce:	69b9      	ldr	r1, [r7, #24]
 80015d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	2203      	movs	r2, #3
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0203 	and.w	r2, r3, #3
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 80ae 	beq.w	8001772 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b5d      	ldr	r3, [pc, #372]	@ (8001790 <HAL_GPIO_Init+0x300>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161e:	4a5c      	ldr	r2, [pc, #368]	@ (8001790 <HAL_GPIO_Init+0x300>)
 8001620:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001624:	6453      	str	r3, [r2, #68]	@ 0x44
 8001626:	4b5a      	ldr	r3, [pc, #360]	@ (8001790 <HAL_GPIO_Init+0x300>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001632:	4a58      	ldr	r2, [pc, #352]	@ (8001794 <HAL_GPIO_Init+0x304>)
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	3302      	adds	r3, #2
 800163a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	220f      	movs	r2, #15
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4f      	ldr	r2, [pc, #316]	@ (8001798 <HAL_GPIO_Init+0x308>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d025      	beq.n	80016aa <HAL_GPIO_Init+0x21a>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a4e      	ldr	r2, [pc, #312]	@ (800179c <HAL_GPIO_Init+0x30c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d01f      	beq.n	80016a6 <HAL_GPIO_Init+0x216>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a4d      	ldr	r2, [pc, #308]	@ (80017a0 <HAL_GPIO_Init+0x310>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d019      	beq.n	80016a2 <HAL_GPIO_Init+0x212>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a4c      	ldr	r2, [pc, #304]	@ (80017a4 <HAL_GPIO_Init+0x314>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d013      	beq.n	800169e <HAL_GPIO_Init+0x20e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a4b      	ldr	r2, [pc, #300]	@ (80017a8 <HAL_GPIO_Init+0x318>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d00d      	beq.n	800169a <HAL_GPIO_Init+0x20a>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4a      	ldr	r2, [pc, #296]	@ (80017ac <HAL_GPIO_Init+0x31c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d007      	beq.n	8001696 <HAL_GPIO_Init+0x206>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a49      	ldr	r2, [pc, #292]	@ (80017b0 <HAL_GPIO_Init+0x320>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d101      	bne.n	8001692 <HAL_GPIO_Init+0x202>
 800168e:	2306      	movs	r3, #6
 8001690:	e00c      	b.n	80016ac <HAL_GPIO_Init+0x21c>
 8001692:	2307      	movs	r3, #7
 8001694:	e00a      	b.n	80016ac <HAL_GPIO_Init+0x21c>
 8001696:	2305      	movs	r3, #5
 8001698:	e008      	b.n	80016ac <HAL_GPIO_Init+0x21c>
 800169a:	2304      	movs	r3, #4
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x21c>
 800169e:	2303      	movs	r3, #3
 80016a0:	e004      	b.n	80016ac <HAL_GPIO_Init+0x21c>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e002      	b.n	80016ac <HAL_GPIO_Init+0x21c>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <HAL_GPIO_Init+0x21c>
 80016aa:	2300      	movs	r3, #0
 80016ac:	69fa      	ldr	r2, [r7, #28]
 80016ae:	f002 0203 	and.w	r2, r2, #3
 80016b2:	0092      	lsls	r2, r2, #2
 80016b4:	4093      	lsls	r3, r2
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016bc:	4935      	ldr	r1, [pc, #212]	@ (8001794 <HAL_GPIO_Init+0x304>)
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	089b      	lsrs	r3, r3, #2
 80016c2:	3302      	adds	r3, #2
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ca:	4b3a      	ldr	r3, [pc, #232]	@ (80017b4 <HAL_GPIO_Init+0x324>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ee:	4a31      	ldr	r2, [pc, #196]	@ (80017b4 <HAL_GPIO_Init+0x324>)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016f4:	4b2f      	ldr	r3, [pc, #188]	@ (80017b4 <HAL_GPIO_Init+0x324>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001718:	4a26      	ldr	r2, [pc, #152]	@ (80017b4 <HAL_GPIO_Init+0x324>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800171e:	4b25      	ldr	r3, [pc, #148]	@ (80017b4 <HAL_GPIO_Init+0x324>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001742:	4a1c      	ldr	r2, [pc, #112]	@ (80017b4 <HAL_GPIO_Init+0x324>)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001748:	4b1a      	ldr	r3, [pc, #104]	@ (80017b4 <HAL_GPIO_Init+0x324>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800176c:	4a11      	ldr	r2, [pc, #68]	@ (80017b4 <HAL_GPIO_Init+0x324>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3301      	adds	r3, #1
 8001776:	61fb      	str	r3, [r7, #28]
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	2b0f      	cmp	r3, #15
 800177c:	f67f ae96 	bls.w	80014ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	3724      	adds	r7, #36	@ 0x24
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800
 8001794:	40013800 	.word	0x40013800
 8001798:	40020000 	.word	0x40020000
 800179c:	40020400 	.word	0x40020400
 80017a0:	40020800 	.word	0x40020800
 80017a4:	40020c00 	.word	0x40020c00
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40021400 	.word	0x40021400
 80017b0:	40021800 	.word	0x40021800
 80017b4:	40013c00 	.word	0x40013c00

080017b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	807b      	strh	r3, [r7, #2]
 80017c4:	4613      	mov	r3, r2
 80017c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017c8:	787b      	ldrb	r3, [r7, #1]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ce:	887a      	ldrh	r2, [r7, #2]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017d4:	e003      	b.n	80017de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017d6:	887b      	ldrh	r3, [r7, #2]
 80017d8:	041a      	lsls	r2, r3, #16
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	619a      	str	r2, [r3, #24]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80017f6:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d006      	beq.n	8001810 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001802:	4a05      	ldr	r2, [pc, #20]	@ (8001818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001804:	88fb      	ldrh	r3, [r7, #6]
 8001806:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff f980 	bl	8000b10 <HAL_GPIO_EXTI_Callback>
  }
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40013c00 	.word	0x40013c00

0800181c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0cc      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001830:	4b68      	ldr	r3, [pc, #416]	@ (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 030f 	and.w	r3, r3, #15
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	d90c      	bls.n	8001858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183e:	4b65      	ldr	r3, [pc, #404]	@ (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b63      	ldr	r3, [pc, #396]	@ (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0b8      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d020      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001870:	4b59      	ldr	r3, [pc, #356]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	4a58      	ldr	r2, [pc, #352]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800187a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001888:	4b53      	ldr	r3, [pc, #332]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	4a52      	ldr	r2, [pc, #328]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001894:	4b50      	ldr	r3, [pc, #320]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	494d      	ldr	r1, [pc, #308]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d044      	beq.n	800193c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d107      	bne.n	80018ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ba:	4b47      	ldr	r3, [pc, #284]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d119      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e07f      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d003      	beq.n	80018da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d107      	bne.n	80018ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018da:	4b3f      	ldr	r3, [pc, #252]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d109      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e06f      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ea:	4b3b      	ldr	r3, [pc, #236]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e067      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018fa:	4b37      	ldr	r3, [pc, #220]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f023 0203 	bic.w	r2, r3, #3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4934      	ldr	r1, [pc, #208]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	4313      	orrs	r3, r2
 800190a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800190c:	f7ff fc10 	bl	8001130 <HAL_GetTick>
 8001910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001912:	e00a      	b.n	800192a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001914:	f7ff fc0c 	bl	8001130 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e04f      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192a:	4b2b      	ldr	r3, [pc, #172]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 020c 	and.w	r2, r3, #12
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	429a      	cmp	r2, r3
 800193a:	d1eb      	bne.n	8001914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800193c:	4b25      	ldr	r3, [pc, #148]	@ (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 030f 	and.w	r3, r3, #15
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d20c      	bcs.n	8001964 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194a:	4b22      	ldr	r3, [pc, #136]	@ (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001952:	4b20      	ldr	r3, [pc, #128]	@ (80019d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e032      	b.n	80019ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d008      	beq.n	8001982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001970:	4b19      	ldr	r3, [pc, #100]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	4916      	ldr	r1, [pc, #88]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	4313      	orrs	r3, r2
 8001980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d009      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800198e:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	490e      	ldr	r1, [pc, #56]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019a2:	f000 f855 	bl	8001a50 <HAL_RCC_GetSysClockFreq>
 80019a6:	4602      	mov	r2, r0
 80019a8:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 030f 	and.w	r3, r3, #15
 80019b2:	490a      	ldr	r1, [pc, #40]	@ (80019dc <HAL_RCC_ClockConfig+0x1c0>)
 80019b4:	5ccb      	ldrb	r3, [r1, r3]
 80019b6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ba:	4a09      	ldr	r2, [pc, #36]	@ (80019e0 <HAL_RCC_ClockConfig+0x1c4>)
 80019bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80019be:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <HAL_RCC_ClockConfig+0x1c8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fb70 	bl	80010a8 <HAL_InitTick>

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023c00 	.word	0x40023c00
 80019d8:	40023800 	.word	0x40023800
 80019dc:	080051fc 	.word	0x080051fc
 80019e0:	20000000 	.word	0x20000000
 80019e4:	20000004 	.word	0x20000004

080019e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019ec:	4b03      	ldr	r3, [pc, #12]	@ (80019fc <HAL_RCC_GetHCLKFreq+0x14>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	20000000 	.word	0x20000000

08001a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a04:	f7ff fff0 	bl	80019e8 <HAL_RCC_GetHCLKFreq>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	0a9b      	lsrs	r3, r3, #10
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	4903      	ldr	r1, [pc, #12]	@ (8001a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a16:	5ccb      	ldrb	r3, [r1, r3]
 8001a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	0800520c 	.word	0x0800520c

08001a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a2c:	f7ff ffdc 	bl	80019e8 <HAL_RCC_GetHCLKFreq>
 8001a30:	4602      	mov	r2, r0
 8001a32:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	0b5b      	lsrs	r3, r3, #13
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	4903      	ldr	r1, [pc, #12]	@ (8001a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a3e:	5ccb      	ldrb	r3, [r1, r3]
 8001a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	0800520c 	.word	0x0800520c

08001a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a54:	b0ae      	sub	sp, #184	@ 0xb8
 8001a56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a76:	4bcb      	ldr	r3, [pc, #812]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b0c      	cmp	r3, #12
 8001a80:	f200 8206 	bhi.w	8001e90 <HAL_RCC_GetSysClockFreq+0x440>
 8001a84:	a201      	add	r2, pc, #4	@ (adr r2, 8001a8c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8a:	bf00      	nop
 8001a8c:	08001ac1 	.word	0x08001ac1
 8001a90:	08001e91 	.word	0x08001e91
 8001a94:	08001e91 	.word	0x08001e91
 8001a98:	08001e91 	.word	0x08001e91
 8001a9c:	08001ac9 	.word	0x08001ac9
 8001aa0:	08001e91 	.word	0x08001e91
 8001aa4:	08001e91 	.word	0x08001e91
 8001aa8:	08001e91 	.word	0x08001e91
 8001aac:	08001ad1 	.word	0x08001ad1
 8001ab0:	08001e91 	.word	0x08001e91
 8001ab4:	08001e91 	.word	0x08001e91
 8001ab8:	08001e91 	.word	0x08001e91
 8001abc:	08001cc1 	.word	0x08001cc1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ac0:	4bb9      	ldr	r3, [pc, #740]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ac6:	e1e7      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ac8:	4bb8      	ldr	r3, [pc, #736]	@ (8001dac <HAL_RCC_GetSysClockFreq+0x35c>)
 8001aca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ace:	e1e3      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ad0:	4bb4      	ldr	r3, [pc, #720]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001adc:	4bb1      	ldr	r3, [pc, #708]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d071      	beq.n	8001bcc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ae8:	4bae      	ldr	r3, [pc, #696]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	099b      	lsrs	r3, r3, #6
 8001aee:	2200      	movs	r2, #0
 8001af0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001af4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001af8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001b04:	2300      	movs	r3, #0
 8001b06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001b0e:	4622      	mov	r2, r4
 8001b10:	462b      	mov	r3, r5
 8001b12:	f04f 0000 	mov.w	r0, #0
 8001b16:	f04f 0100 	mov.w	r1, #0
 8001b1a:	0159      	lsls	r1, r3, #5
 8001b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b20:	0150      	lsls	r0, r2, #5
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4621      	mov	r1, r4
 8001b28:	1a51      	subs	r1, r2, r1
 8001b2a:	6439      	str	r1, [r7, #64]	@ 0x40
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001b40:	4649      	mov	r1, r9
 8001b42:	018b      	lsls	r3, r1, #6
 8001b44:	4641      	mov	r1, r8
 8001b46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b4a:	4641      	mov	r1, r8
 8001b4c:	018a      	lsls	r2, r1, #6
 8001b4e:	4641      	mov	r1, r8
 8001b50:	1a51      	subs	r1, r2, r1
 8001b52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001b54:	4649      	mov	r1, r9
 8001b56:	eb63 0301 	sbc.w	r3, r3, r1
 8001b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001b68:	4649      	mov	r1, r9
 8001b6a:	00cb      	lsls	r3, r1, #3
 8001b6c:	4641      	mov	r1, r8
 8001b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001b72:	4641      	mov	r1, r8
 8001b74:	00ca      	lsls	r2, r1, #3
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4622      	mov	r2, r4
 8001b7e:	189b      	adds	r3, r3, r2
 8001b80:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b82:	462b      	mov	r3, r5
 8001b84:	460a      	mov	r2, r1
 8001b86:	eb42 0303 	adc.w	r3, r2, r3
 8001b8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b98:	4629      	mov	r1, r5
 8001b9a:	024b      	lsls	r3, r1, #9
 8001b9c:	4621      	mov	r1, r4
 8001b9e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	024a      	lsls	r2, r1, #9
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001bb4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001bb8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001bbc:	f7fe fb78 	bl	80002b0 <__aeabi_uldivmod>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001bca:	e067      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bcc:	4b75      	ldr	r3, [pc, #468]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	099b      	lsrs	r3, r3, #6
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001bd8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001bdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001be4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001be6:	2300      	movs	r3, #0
 8001be8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001bea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001bee:	4622      	mov	r2, r4
 8001bf0:	462b      	mov	r3, r5
 8001bf2:	f04f 0000 	mov.w	r0, #0
 8001bf6:	f04f 0100 	mov.w	r1, #0
 8001bfa:	0159      	lsls	r1, r3, #5
 8001bfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c00:	0150      	lsls	r0, r2, #5
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4621      	mov	r1, r4
 8001c08:	1a51      	subs	r1, r2, r1
 8001c0a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001c0c:	4629      	mov	r1, r5
 8001c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001c20:	4649      	mov	r1, r9
 8001c22:	018b      	lsls	r3, r1, #6
 8001c24:	4641      	mov	r1, r8
 8001c26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c2a:	4641      	mov	r1, r8
 8001c2c:	018a      	lsls	r2, r1, #6
 8001c2e:	4641      	mov	r1, r8
 8001c30:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c34:	4649      	mov	r1, r9
 8001c36:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	f04f 0300 	mov.w	r3, #0
 8001c42:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001c46:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001c4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c4e:	4692      	mov	sl, r2
 8001c50:	469b      	mov	fp, r3
 8001c52:	4623      	mov	r3, r4
 8001c54:	eb1a 0303 	adds.w	r3, sl, r3
 8001c58:	623b      	str	r3, [r7, #32]
 8001c5a:	462b      	mov	r3, r5
 8001c5c:	eb4b 0303 	adc.w	r3, fp, r3
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001c6e:	4629      	mov	r1, r5
 8001c70:	028b      	lsls	r3, r1, #10
 8001c72:	4621      	mov	r1, r4
 8001c74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c78:	4621      	mov	r1, r4
 8001c7a:	028a      	lsls	r2, r1, #10
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c84:	2200      	movs	r2, #0
 8001c86:	673b      	str	r3, [r7, #112]	@ 0x70
 8001c88:	677a      	str	r2, [r7, #116]	@ 0x74
 8001c8a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c8e:	f7fe fb0f 	bl	80002b0 <__aeabi_uldivmod>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4613      	mov	r3, r2
 8001c98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c9c:	4b41      	ldr	r3, [pc, #260]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	0c1b      	lsrs	r3, r3, #16
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001cae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001cb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001cbe:	e0eb      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cc0:	4b38      	ldr	r3, [pc, #224]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ccc:	4b35      	ldr	r3, [pc, #212]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d06b      	beq.n	8001db0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd8:	4b32      	ldr	r3, [pc, #200]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	099b      	lsrs	r3, r3, #6
 8001cde:	2200      	movs	r2, #0
 8001ce0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001ce2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001ce4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cea:	663b      	str	r3, [r7, #96]	@ 0x60
 8001cec:	2300      	movs	r3, #0
 8001cee:	667b      	str	r3, [r7, #100]	@ 0x64
 8001cf0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001cf4:	4622      	mov	r2, r4
 8001cf6:	462b      	mov	r3, r5
 8001cf8:	f04f 0000 	mov.w	r0, #0
 8001cfc:	f04f 0100 	mov.w	r1, #0
 8001d00:	0159      	lsls	r1, r3, #5
 8001d02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d06:	0150      	lsls	r0, r2, #5
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	1a51      	subs	r1, r2, r1
 8001d10:	61b9      	str	r1, [r7, #24]
 8001d12:	4629      	mov	r1, r5
 8001d14:	eb63 0301 	sbc.w	r3, r3, r1
 8001d18:	61fb      	str	r3, [r7, #28]
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001d26:	4659      	mov	r1, fp
 8001d28:	018b      	lsls	r3, r1, #6
 8001d2a:	4651      	mov	r1, sl
 8001d2c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d30:	4651      	mov	r1, sl
 8001d32:	018a      	lsls	r2, r1, #6
 8001d34:	4651      	mov	r1, sl
 8001d36:	ebb2 0801 	subs.w	r8, r2, r1
 8001d3a:	4659      	mov	r1, fp
 8001d3c:	eb63 0901 	sbc.w	r9, r3, r1
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d54:	4690      	mov	r8, r2
 8001d56:	4699      	mov	r9, r3
 8001d58:	4623      	mov	r3, r4
 8001d5a:	eb18 0303 	adds.w	r3, r8, r3
 8001d5e:	613b      	str	r3, [r7, #16]
 8001d60:	462b      	mov	r3, r5
 8001d62:	eb49 0303 	adc.w	r3, r9, r3
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001d74:	4629      	mov	r1, r5
 8001d76:	024b      	lsls	r3, r1, #9
 8001d78:	4621      	mov	r1, r4
 8001d7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d7e:	4621      	mov	r1, r4
 8001d80:	024a      	lsls	r2, r1, #9
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d8e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001d90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d94:	f7fe fa8c 	bl	80002b0 <__aeabi_uldivmod>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001da2:	e065      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0x420>
 8001da4:	40023800 	.word	0x40023800
 8001da8:	00f42400 	.word	0x00f42400
 8001dac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	099b      	lsrs	r3, r3, #6
 8001db6:	2200      	movs	r2, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	4611      	mov	r1, r2
 8001dbc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dc0:	653b      	str	r3, [r7, #80]	@ 0x50
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	657b      	str	r3, [r7, #84]	@ 0x54
 8001dc6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001dca:	4642      	mov	r2, r8
 8001dcc:	464b      	mov	r3, r9
 8001dce:	f04f 0000 	mov.w	r0, #0
 8001dd2:	f04f 0100 	mov.w	r1, #0
 8001dd6:	0159      	lsls	r1, r3, #5
 8001dd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ddc:	0150      	lsls	r0, r2, #5
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4641      	mov	r1, r8
 8001de4:	1a51      	subs	r1, r2, r1
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	4649      	mov	r1, r9
 8001dea:	eb63 0301 	sbc.w	r3, r3, r1
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001dfc:	4659      	mov	r1, fp
 8001dfe:	018b      	lsls	r3, r1, #6
 8001e00:	4651      	mov	r1, sl
 8001e02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e06:	4651      	mov	r1, sl
 8001e08:	018a      	lsls	r2, r1, #6
 8001e0a:	4651      	mov	r1, sl
 8001e0c:	1a54      	subs	r4, r2, r1
 8001e0e:	4659      	mov	r1, fp
 8001e10:	eb63 0501 	sbc.w	r5, r3, r1
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	f04f 0300 	mov.w	r3, #0
 8001e1c:	00eb      	lsls	r3, r5, #3
 8001e1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e22:	00e2      	lsls	r2, r4, #3
 8001e24:	4614      	mov	r4, r2
 8001e26:	461d      	mov	r5, r3
 8001e28:	4643      	mov	r3, r8
 8001e2a:	18e3      	adds	r3, r4, r3
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	464b      	mov	r3, r9
 8001e30:	eb45 0303 	adc.w	r3, r5, r3
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e42:	4629      	mov	r1, r5
 8001e44:	028b      	lsls	r3, r1, #10
 8001e46:	4621      	mov	r1, r4
 8001e48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e4c:	4621      	mov	r1, r4
 8001e4e:	028a      	lsls	r2, r1, #10
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e58:	2200      	movs	r2, #0
 8001e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e5c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001e5e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e62:	f7fe fa25 	bl	80002b0 <__aeabi_uldivmod>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e70:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	0f1b      	lsrs	r3, r3, #28
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001e7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001e82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e8e:	e003      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x45c>)
 8001e92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	37b8      	adds	r7, #184	@ 0xb8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	00f42400 	.word	0x00f42400

08001eb0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e28d      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8083 	beq.w	8001fd6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ed0:	4b94      	ldr	r3, [pc, #592]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d019      	beq.n	8001f10 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001edc:	4b91      	ldr	r3, [pc, #580]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
        || \
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ee8:	4b8e      	ldr	r3, [pc, #568]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ef0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ef4:	d00c      	beq.n	8001f10 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ef6:	4b8b      	ldr	r3, [pc, #556]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001efe:	2b0c      	cmp	r3, #12
 8001f00:	d112      	bne.n	8001f28 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f02:	4b88      	ldr	r3, [pc, #544]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f0e:	d10b      	bne.n	8001f28 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f10:	4b84      	ldr	r3, [pc, #528]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d05b      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x124>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d157      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e25a      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f30:	d106      	bne.n	8001f40 <HAL_RCC_OscConfig+0x90>
 8001f32:	4b7c      	ldr	r3, [pc, #496]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a7b      	ldr	r2, [pc, #492]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e01d      	b.n	8001f7c <HAL_RCC_OscConfig+0xcc>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCC_OscConfig+0xb4>
 8001f4a:	4b76      	ldr	r3, [pc, #472]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a75      	ldr	r2, [pc, #468]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	4b73      	ldr	r3, [pc, #460]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a72      	ldr	r2, [pc, #456]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	e00b      	b.n	8001f7c <HAL_RCC_OscConfig+0xcc>
 8001f64:	4b6f      	ldr	r3, [pc, #444]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a6e      	ldr	r2, [pc, #440]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	4b6c      	ldr	r3, [pc, #432]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a6b      	ldr	r2, [pc, #428]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001f76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d013      	beq.n	8001fac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7ff f8d4 	bl	8001130 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7ff f8d0 	bl	8001130 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	@ 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e21f      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	4b61      	ldr	r3, [pc, #388]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0xdc>
 8001faa:	e014      	b.n	8001fd6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7ff f8c0 	bl	8001130 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb4:	f7ff f8bc 	bl	8001130 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b64      	cmp	r3, #100	@ 0x64
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e20b      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc6:	4b57      	ldr	r3, [pc, #348]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x104>
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d06f      	beq.n	80020c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001fe2:	4b50      	ldr	r3, [pc, #320]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d017      	beq.n	800201e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001fee:	4b4d      	ldr	r3, [pc, #308]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
        || \
 8001ff6:	2b08      	cmp	r3, #8
 8001ff8:	d105      	bne.n	8002006 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00b      	beq.n	800201e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002006:	4b47      	ldr	r3, [pc, #284]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800200e:	2b0c      	cmp	r3, #12
 8002010:	d11c      	bne.n	800204c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002012:	4b44      	ldr	r3, [pc, #272]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d116      	bne.n	800204c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201e:	4b41      	ldr	r3, [pc, #260]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d005      	beq.n	8002036 <HAL_RCC_OscConfig+0x186>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d001      	beq.n	8002036 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e1d3      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002036:	4b3b      	ldr	r3, [pc, #236]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4937      	ldr	r1, [pc, #220]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204a:	e03a      	b.n	80020c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d020      	beq.n	8002096 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002054:	4b34      	ldr	r3, [pc, #208]	@ (8002128 <HAL_RCC_OscConfig+0x278>)
 8002056:	2201      	movs	r2, #1
 8002058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205a:	f7ff f869 	bl	8001130 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002062:	f7ff f865 	bl	8001130 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e1b4      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002074:	4b2b      	ldr	r3, [pc, #172]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002080:	4b28      	ldr	r3, [pc, #160]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4925      	ldr	r1, [pc, #148]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 8002090:	4313      	orrs	r3, r2
 8002092:	600b      	str	r3, [r1, #0]
 8002094:	e015      	b.n	80020c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002096:	4b24      	ldr	r3, [pc, #144]	@ (8002128 <HAL_RCC_OscConfig+0x278>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7ff f848 	bl	8001130 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a4:	f7ff f844 	bl	8001130 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e193      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d036      	beq.n	800213c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d016      	beq.n	8002104 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020d6:	4b15      	ldr	r3, [pc, #84]	@ (800212c <HAL_RCC_OscConfig+0x27c>)
 80020d8:	2201      	movs	r2, #1
 80020da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020dc:	f7ff f828 	bl	8001130 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e4:	f7ff f824 	bl	8001130 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e173      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 80020f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x234>
 8002102:	e01b      	b.n	800213c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002104:	4b09      	ldr	r3, [pc, #36]	@ (800212c <HAL_RCC_OscConfig+0x27c>)
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210a:	f7ff f811 	bl	8001130 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002110:	e00e      	b.n	8002130 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002112:	f7ff f80d 	bl	8001130 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d907      	bls.n	8002130 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e15c      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
 8002124:	40023800 	.word	0x40023800
 8002128:	42470000 	.word	0x42470000
 800212c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002130:	4b8a      	ldr	r3, [pc, #552]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 8002132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1ea      	bne.n	8002112 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 8097 	beq.w	8002278 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800214e:	4b83      	ldr	r3, [pc, #524]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10f      	bne.n	800217a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	4b7f      	ldr	r3, [pc, #508]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	4a7e      	ldr	r2, [pc, #504]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 8002164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002168:	6413      	str	r3, [r2, #64]	@ 0x40
 800216a:	4b7c      	ldr	r3, [pc, #496]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002176:	2301      	movs	r3, #1
 8002178:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217a:	4b79      	ldr	r3, [pc, #484]	@ (8002360 <HAL_RCC_OscConfig+0x4b0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d118      	bne.n	80021b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002186:	4b76      	ldr	r3, [pc, #472]	@ (8002360 <HAL_RCC_OscConfig+0x4b0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a75      	ldr	r2, [pc, #468]	@ (8002360 <HAL_RCC_OscConfig+0x4b0>)
 800218c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002192:	f7fe ffcd 	bl	8001130 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219a:	f7fe ffc9 	bl	8001130 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e118      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002360 <HAL_RCC_OscConfig+0x4b0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d106      	bne.n	80021ce <HAL_RCC_OscConfig+0x31e>
 80021c0:	4b66      	ldr	r3, [pc, #408]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 80021c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c4:	4a65      	ldr	r2, [pc, #404]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80021cc:	e01c      	b.n	8002208 <HAL_RCC_OscConfig+0x358>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b05      	cmp	r3, #5
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x340>
 80021d6:	4b61      	ldr	r3, [pc, #388]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021da:	4a60      	ldr	r2, [pc, #384]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 80021dc:	f043 0304 	orr.w	r3, r3, #4
 80021e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80021e2:	4b5e      	ldr	r3, [pc, #376]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e6:	4a5d      	ldr	r2, [pc, #372]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80021ee:	e00b      	b.n	8002208 <HAL_RCC_OscConfig+0x358>
 80021f0:	4b5a      	ldr	r3, [pc, #360]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 80021f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f4:	4a59      	ldr	r2, [pc, #356]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 80021f6:	f023 0301 	bic.w	r3, r3, #1
 80021fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80021fc:	4b57      	ldr	r3, [pc, #348]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002200:	4a56      	ldr	r2, [pc, #344]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 8002202:	f023 0304 	bic.w	r3, r3, #4
 8002206:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d015      	beq.n	800223c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002210:	f7fe ff8e 	bl	8001130 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002216:	e00a      	b.n	800222e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002218:	f7fe ff8a 	bl	8001130 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e0d7      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222e:	4b4b      	ldr	r3, [pc, #300]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0ee      	beq.n	8002218 <HAL_RCC_OscConfig+0x368>
 800223a:	e014      	b.n	8002266 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223c:	f7fe ff78 	bl	8001130 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002242:	e00a      	b.n	800225a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002244:	f7fe ff74 	bl	8001130 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e0c1      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225a:	4b40      	ldr	r3, [pc, #256]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 800225c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1ee      	bne.n	8002244 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002266:	7dfb      	ldrb	r3, [r7, #23]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d105      	bne.n	8002278 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800226c:	4b3b      	ldr	r3, [pc, #236]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 800226e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002270:	4a3a      	ldr	r2, [pc, #232]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 8002272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002276:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80ad 	beq.w	80023dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002282:	4b36      	ldr	r3, [pc, #216]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 030c 	and.w	r3, r3, #12
 800228a:	2b08      	cmp	r3, #8
 800228c:	d060      	beq.n	8002350 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d145      	bne.n	8002322 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002296:	4b33      	ldr	r3, [pc, #204]	@ (8002364 <HAL_RCC_OscConfig+0x4b4>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7fe ff48 	bl	8001130 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a4:	f7fe ff44 	bl	8001130 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e093      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b6:	4b29      	ldr	r3, [pc, #164]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d0:	019b      	lsls	r3, r3, #6
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d8:	085b      	lsrs	r3, r3, #1
 80022da:	3b01      	subs	r3, #1
 80022dc:	041b      	lsls	r3, r3, #16
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e4:	061b      	lsls	r3, r3, #24
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ec:	071b      	lsls	r3, r3, #28
 80022ee:	491b      	ldr	r1, [pc, #108]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002364 <HAL_RCC_OscConfig+0x4b4>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fa:	f7fe ff19 	bl	8001130 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002302:	f7fe ff15 	bl	8001130 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e064      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002314:	4b11      	ldr	r3, [pc, #68]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x452>
 8002320:	e05c      	b.n	80023dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002322:	4b10      	ldr	r3, [pc, #64]	@ (8002364 <HAL_RCC_OscConfig+0x4b4>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7fe ff02 	bl	8001130 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002330:	f7fe fefe 	bl	8001130 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e04d      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002342:	4b06      	ldr	r3, [pc, #24]	@ (800235c <HAL_RCC_OscConfig+0x4ac>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x480>
 800234e:	e045      	b.n	80023dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d107      	bne.n	8002368 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e040      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
 800235c:	40023800 	.word	0x40023800
 8002360:	40007000 	.word	0x40007000
 8002364:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002368:	4b1f      	ldr	r3, [pc, #124]	@ (80023e8 <HAL_RCC_OscConfig+0x538>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d030      	beq.n	80023d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002380:	429a      	cmp	r2, r3
 8002382:	d129      	bne.n	80023d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238e:	429a      	cmp	r2, r3
 8002390:	d122      	bne.n	80023d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002398:	4013      	ands	r3, r2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800239e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d119      	bne.n	80023d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ae:	085b      	lsrs	r3, r3, #1
 80023b0:	3b01      	subs	r3, #1
 80023b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d10f      	bne.n	80023d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d107      	bne.n	80023d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800

080023ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e041      	b.n	8002482 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7fe fc58 	bl	8000cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3304      	adds	r3, #4
 8002428:	4619      	mov	r1, r3
 800242a:	4610      	mov	r0, r2
 800242c:	f000 fd2e 	bl	8002e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e041      	b.n	8002520 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d106      	bne.n	80024b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f839 	bl	8002528 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2202      	movs	r2, #2
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3304      	adds	r3, #4
 80024c6:	4619      	mov	r1, r3
 80024c8:	4610      	mov	r0, r2
 80024ca:	f000 fcdf 	bl	8002e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d109      	bne.n	8002560 <HAL_TIM_PWM_Start+0x24>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b01      	cmp	r3, #1
 8002556:	bf14      	ite	ne
 8002558:	2301      	movne	r3, #1
 800255a:	2300      	moveq	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	e022      	b.n	80025a6 <HAL_TIM_PWM_Start+0x6a>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	2b04      	cmp	r3, #4
 8002564:	d109      	bne.n	800257a <HAL_TIM_PWM_Start+0x3e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b01      	cmp	r3, #1
 8002570:	bf14      	ite	ne
 8002572:	2301      	movne	r3, #1
 8002574:	2300      	moveq	r3, #0
 8002576:	b2db      	uxtb	r3, r3
 8002578:	e015      	b.n	80025a6 <HAL_TIM_PWM_Start+0x6a>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b08      	cmp	r3, #8
 800257e:	d109      	bne.n	8002594 <HAL_TIM_PWM_Start+0x58>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b01      	cmp	r3, #1
 800258a:	bf14      	ite	ne
 800258c:	2301      	movne	r3, #1
 800258e:	2300      	moveq	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	e008      	b.n	80025a6 <HAL_TIM_PWM_Start+0x6a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b01      	cmp	r3, #1
 800259e:	bf14      	ite	ne
 80025a0:	2301      	movne	r3, #1
 80025a2:	2300      	moveq	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e07c      	b.n	80026a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d104      	bne.n	80025be <HAL_TIM_PWM_Start+0x82>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025bc:	e013      	b.n	80025e6 <HAL_TIM_PWM_Start+0xaa>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d104      	bne.n	80025ce <HAL_TIM_PWM_Start+0x92>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025cc:	e00b      	b.n	80025e6 <HAL_TIM_PWM_Start+0xaa>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d104      	bne.n	80025de <HAL_TIM_PWM_Start+0xa2>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025dc:	e003      	b.n	80025e6 <HAL_TIM_PWM_Start+0xaa>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2202      	movs	r2, #2
 80025e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2201      	movs	r2, #1
 80025ec:	6839      	ldr	r1, [r7, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 ff3c 	bl	800346c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a2d      	ldr	r2, [pc, #180]	@ (80026b0 <HAL_TIM_PWM_Start+0x174>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d004      	beq.n	8002608 <HAL_TIM_PWM_Start+0xcc>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a2c      	ldr	r2, [pc, #176]	@ (80026b4 <HAL_TIM_PWM_Start+0x178>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d101      	bne.n	800260c <HAL_TIM_PWM_Start+0xd0>
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <HAL_TIM_PWM_Start+0xd2>
 800260c:	2300      	movs	r3, #0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d007      	beq.n	8002622 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002620:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a22      	ldr	r2, [pc, #136]	@ (80026b0 <HAL_TIM_PWM_Start+0x174>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d022      	beq.n	8002672 <HAL_TIM_PWM_Start+0x136>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002634:	d01d      	beq.n	8002672 <HAL_TIM_PWM_Start+0x136>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a1f      	ldr	r2, [pc, #124]	@ (80026b8 <HAL_TIM_PWM_Start+0x17c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d018      	beq.n	8002672 <HAL_TIM_PWM_Start+0x136>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1d      	ldr	r2, [pc, #116]	@ (80026bc <HAL_TIM_PWM_Start+0x180>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d013      	beq.n	8002672 <HAL_TIM_PWM_Start+0x136>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a1c      	ldr	r2, [pc, #112]	@ (80026c0 <HAL_TIM_PWM_Start+0x184>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d00e      	beq.n	8002672 <HAL_TIM_PWM_Start+0x136>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a16      	ldr	r2, [pc, #88]	@ (80026b4 <HAL_TIM_PWM_Start+0x178>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d009      	beq.n	8002672 <HAL_TIM_PWM_Start+0x136>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a18      	ldr	r2, [pc, #96]	@ (80026c4 <HAL_TIM_PWM_Start+0x188>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d004      	beq.n	8002672 <HAL_TIM_PWM_Start+0x136>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a16      	ldr	r2, [pc, #88]	@ (80026c8 <HAL_TIM_PWM_Start+0x18c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d111      	bne.n	8002696 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b06      	cmp	r3, #6
 8002682:	d010      	beq.n	80026a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002694:	e007      	b.n	80026a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 0201 	orr.w	r2, r2, #1
 80026a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40010000 	.word	0x40010000
 80026b4:	40010400 	.word	0x40010400
 80026b8:	40000400 	.word	0x40000400
 80026bc:	40000800 	.word	0x40000800
 80026c0:	40000c00 	.word	0x40000c00
 80026c4:	40014000 	.word	0x40014000
 80026c8:	40001800 	.word	0x40001800

080026cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e097      	b.n	8002810 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d106      	bne.n	80026fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7fe fb09 	bl	8000d0c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2202      	movs	r2, #2
 80026fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002710:	f023 0307 	bic.w	r3, r3, #7
 8002714:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3304      	adds	r3, #4
 800271e:	4619      	mov	r1, r3
 8002720:	4610      	mov	r0, r2
 8002722:	f000 fbb3 	bl	8002e8c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800274e:	f023 0303 	bic.w	r3, r3, #3
 8002752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	4313      	orrs	r3, r2
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800276c:	f023 030c 	bic.w	r3, r3, #12
 8002770:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002778:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800277c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	021b      	lsls	r3, r3, #8
 8002788:	4313      	orrs	r3, r2
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	011a      	lsls	r2, r3, #4
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	031b      	lsls	r3, r3, #12
 800279c:	4313      	orrs	r3, r2
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80027aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80027b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	4313      	orrs	r3, r2
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002828:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002830:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002838:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002840:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d110      	bne.n	800286a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002848:	7bfb      	ldrb	r3, [r7, #15]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d102      	bne.n	8002854 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800284e:	7b7b      	ldrb	r3, [r7, #13]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d001      	beq.n	8002858 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e069      	b.n	800292c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002868:	e031      	b.n	80028ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b04      	cmp	r3, #4
 800286e:	d110      	bne.n	8002892 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002870:	7bbb      	ldrb	r3, [r7, #14]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d102      	bne.n	800287c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002876:	7b3b      	ldrb	r3, [r7, #12]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d001      	beq.n	8002880 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e055      	b.n	800292c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002890:	e01d      	b.n	80028ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d108      	bne.n	80028aa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002898:	7bbb      	ldrb	r3, [r7, #14]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d105      	bne.n	80028aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800289e:	7b7b      	ldrb	r3, [r7, #13]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d102      	bne.n	80028aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80028a4:	7b3b      	ldrb	r3, [r7, #12]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d001      	beq.n	80028ae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e03e      	b.n	800292c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2202      	movs	r2, #2
 80028b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2202      	movs	r2, #2
 80028ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2202      	movs	r2, #2
 80028c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2202      	movs	r2, #2
 80028ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_TIM_Encoder_Start+0xc4>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d008      	beq.n	80028ec <HAL_TIM_Encoder_Start+0xd4>
 80028da:	e00f      	b.n	80028fc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2201      	movs	r2, #1
 80028e2:	2100      	movs	r1, #0
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fdc1 	bl	800346c <TIM_CCxChannelCmd>
      break;
 80028ea:	e016      	b.n	800291a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2201      	movs	r2, #1
 80028f2:	2104      	movs	r1, #4
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 fdb9 	bl	800346c <TIM_CCxChannelCmd>
      break;
 80028fa:	e00e      	b.n	800291a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2201      	movs	r2, #1
 8002902:	2100      	movs	r1, #0
 8002904:	4618      	mov	r0, r3
 8002906:	f000 fdb1 	bl	800346c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2201      	movs	r2, #1
 8002910:	2104      	movs	r1, #4
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fdaa 	bl	800346c <TIM_CCxChannelCmd>
      break;
 8002918:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0201 	orr.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d020      	beq.n	8002998 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d01b      	beq.n	8002998 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f06f 0202 	mvn.w	r2, #2
 8002968:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fa65 	bl	8002e4e <HAL_TIM_IC_CaptureCallback>
 8002984:	e005      	b.n	8002992 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fa57 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 fa68 	bl	8002e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d020      	beq.n	80029e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d01b      	beq.n	80029e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0204 	mvn.w	r2, #4
 80029b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2202      	movs	r2, #2
 80029ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 fa3f 	bl	8002e4e <HAL_TIM_IC_CaptureCallback>
 80029d0:	e005      	b.n	80029de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fa31 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 fa42 	bl	8002e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d020      	beq.n	8002a30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d01b      	beq.n	8002a30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f06f 0208 	mvn.w	r2, #8
 8002a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2204      	movs	r2, #4
 8002a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fa19 	bl	8002e4e <HAL_TIM_IC_CaptureCallback>
 8002a1c:	e005      	b.n	8002a2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fa0b 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 fa1c 	bl	8002e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d020      	beq.n	8002a7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d01b      	beq.n	8002a7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0210 	mvn.w	r2, #16
 8002a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2208      	movs	r2, #8
 8002a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f9f3 	bl	8002e4e <HAL_TIM_IC_CaptureCallback>
 8002a68:	e005      	b.n	8002a76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f9e5 	bl	8002e3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f9f6 	bl	8002e62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00c      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d007      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f06f 0201 	mvn.w	r2, #1
 8002a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f9c3 	bl	8002e26 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00c      	beq.n	8002ac4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d007      	beq.n	8002ac4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fdd2 	bl	8003668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00c      	beq.n	8002ae8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f9c7 	bl	8002e76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f003 0320 	and.w	r3, r3, #32
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00c      	beq.n	8002b0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f003 0320 	and.w	r3, r3, #32
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d007      	beq.n	8002b0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0220 	mvn.w	r2, #32
 8002b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 fda4 	bl	8003654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e0ae      	b.n	8002c90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b0c      	cmp	r3, #12
 8002b3e:	f200 809f 	bhi.w	8002c80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b42:	a201      	add	r2, pc, #4	@ (adr r2, 8002b48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b48:	08002b7d 	.word	0x08002b7d
 8002b4c:	08002c81 	.word	0x08002c81
 8002b50:	08002c81 	.word	0x08002c81
 8002b54:	08002c81 	.word	0x08002c81
 8002b58:	08002bbd 	.word	0x08002bbd
 8002b5c:	08002c81 	.word	0x08002c81
 8002b60:	08002c81 	.word	0x08002c81
 8002b64:	08002c81 	.word	0x08002c81
 8002b68:	08002bff 	.word	0x08002bff
 8002b6c:	08002c81 	.word	0x08002c81
 8002b70:	08002c81 	.word	0x08002c81
 8002b74:	08002c81 	.word	0x08002c81
 8002b78:	08002c3f 	.word	0x08002c3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fa28 	bl	8002fd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699a      	ldr	r2, [r3, #24]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0208 	orr.w	r2, r2, #8
 8002b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0204 	bic.w	r2, r2, #4
 8002ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6999      	ldr	r1, [r3, #24]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	691a      	ldr	r2, [r3, #16]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	619a      	str	r2, [r3, #24]
      break;
 8002bba:	e064      	b.n	8002c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68b9      	ldr	r1, [r7, #8]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 fa78 	bl	80030b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699a      	ldr	r2, [r3, #24]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002be6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6999      	ldr	r1, [r3, #24]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	021a      	lsls	r2, r3, #8
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	619a      	str	r2, [r3, #24]
      break;
 8002bfc:	e043      	b.n	8002c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68b9      	ldr	r1, [r7, #8]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 facd 	bl	80031a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	69da      	ldr	r2, [r3, #28]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f042 0208 	orr.w	r2, r2, #8
 8002c18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	69da      	ldr	r2, [r3, #28]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0204 	bic.w	r2, r2, #4
 8002c28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	69d9      	ldr	r1, [r3, #28]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	61da      	str	r2, [r3, #28]
      break;
 8002c3c:	e023      	b.n	8002c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68b9      	ldr	r1, [r7, #8]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 fb21 	bl	800328c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	69da      	ldr	r2, [r3, #28]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	69da      	ldr	r2, [r3, #28]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	69d9      	ldr	r1, [r3, #28]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	021a      	lsls	r2, r3, #8
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	61da      	str	r2, [r3, #28]
      break;
 8002c7e:	e002      	b.n	8002c86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	75fb      	strb	r3, [r7, #23]
      break;
 8002c84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_TIM_ConfigClockSource+0x1c>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e0b4      	b.n	8002e1e <HAL_TIM_ConfigClockSource+0x186>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cec:	d03e      	beq.n	8002d6c <HAL_TIM_ConfigClockSource+0xd4>
 8002cee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cf2:	f200 8087 	bhi.w	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cfa:	f000 8086 	beq.w	8002e0a <HAL_TIM_ConfigClockSource+0x172>
 8002cfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d02:	d87f      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002d04:	2b70      	cmp	r3, #112	@ 0x70
 8002d06:	d01a      	beq.n	8002d3e <HAL_TIM_ConfigClockSource+0xa6>
 8002d08:	2b70      	cmp	r3, #112	@ 0x70
 8002d0a:	d87b      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002d0c:	2b60      	cmp	r3, #96	@ 0x60
 8002d0e:	d050      	beq.n	8002db2 <HAL_TIM_ConfigClockSource+0x11a>
 8002d10:	2b60      	cmp	r3, #96	@ 0x60
 8002d12:	d877      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002d14:	2b50      	cmp	r3, #80	@ 0x50
 8002d16:	d03c      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0xfa>
 8002d18:	2b50      	cmp	r3, #80	@ 0x50
 8002d1a:	d873      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002d1c:	2b40      	cmp	r3, #64	@ 0x40
 8002d1e:	d058      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0x13a>
 8002d20:	2b40      	cmp	r3, #64	@ 0x40
 8002d22:	d86f      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002d24:	2b30      	cmp	r3, #48	@ 0x30
 8002d26:	d064      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x15a>
 8002d28:	2b30      	cmp	r3, #48	@ 0x30
 8002d2a:	d86b      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	d060      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x15a>
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d867      	bhi.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d05c      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x15a>
 8002d38:	2b10      	cmp	r3, #16
 8002d3a:	d05a      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x15a>
 8002d3c:	e062      	b.n	8002e04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d4e:	f000 fb6d 	bl	800342c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	609a      	str	r2, [r3, #8]
      break;
 8002d6a:	e04f      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d7c:	f000 fb56 	bl	800342c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d8e:	609a      	str	r2, [r3, #8]
      break;
 8002d90:	e03c      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f000 faca 	bl	8003338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2150      	movs	r1, #80	@ 0x50
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fb23 	bl	80033f6 <TIM_ITRx_SetConfig>
      break;
 8002db0:	e02c      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f000 fae9 	bl	8003396 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2160      	movs	r1, #96	@ 0x60
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fb13 	bl	80033f6 <TIM_ITRx_SetConfig>
      break;
 8002dd0:	e01c      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dde:	461a      	mov	r2, r3
 8002de0:	f000 faaa 	bl	8003338 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2140      	movs	r1, #64	@ 0x40
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 fb03 	bl	80033f6 <TIM_ITRx_SetConfig>
      break;
 8002df0:	e00c      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	f000 fafa 	bl	80033f6 <TIM_ITRx_SetConfig>
      break;
 8002e02:	e003      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	73fb      	strb	r3, [r7, #15]
      break;
 8002e08:	e000      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a43      	ldr	r2, [pc, #268]	@ (8002fac <TIM_Base_SetConfig+0x120>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d013      	beq.n	8002ecc <TIM_Base_SetConfig+0x40>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eaa:	d00f      	beq.n	8002ecc <TIM_Base_SetConfig+0x40>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a40      	ldr	r2, [pc, #256]	@ (8002fb0 <TIM_Base_SetConfig+0x124>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00b      	beq.n	8002ecc <TIM_Base_SetConfig+0x40>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a3f      	ldr	r2, [pc, #252]	@ (8002fb4 <TIM_Base_SetConfig+0x128>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d007      	beq.n	8002ecc <TIM_Base_SetConfig+0x40>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a3e      	ldr	r2, [pc, #248]	@ (8002fb8 <TIM_Base_SetConfig+0x12c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d003      	beq.n	8002ecc <TIM_Base_SetConfig+0x40>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a3d      	ldr	r2, [pc, #244]	@ (8002fbc <TIM_Base_SetConfig+0x130>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d108      	bne.n	8002ede <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a32      	ldr	r2, [pc, #200]	@ (8002fac <TIM_Base_SetConfig+0x120>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d02b      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eec:	d027      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a2f      	ldr	r2, [pc, #188]	@ (8002fb0 <TIM_Base_SetConfig+0x124>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d023      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a2e      	ldr	r2, [pc, #184]	@ (8002fb4 <TIM_Base_SetConfig+0x128>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d01f      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a2d      	ldr	r2, [pc, #180]	@ (8002fb8 <TIM_Base_SetConfig+0x12c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01b      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a2c      	ldr	r2, [pc, #176]	@ (8002fbc <TIM_Base_SetConfig+0x130>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d017      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a2b      	ldr	r2, [pc, #172]	@ (8002fc0 <TIM_Base_SetConfig+0x134>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a2a      	ldr	r2, [pc, #168]	@ (8002fc4 <TIM_Base_SetConfig+0x138>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00f      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a29      	ldr	r2, [pc, #164]	@ (8002fc8 <TIM_Base_SetConfig+0x13c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00b      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a28      	ldr	r2, [pc, #160]	@ (8002fcc <TIM_Base_SetConfig+0x140>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d007      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a27      	ldr	r2, [pc, #156]	@ (8002fd0 <TIM_Base_SetConfig+0x144>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d003      	beq.n	8002f3e <TIM_Base_SetConfig+0xb2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a26      	ldr	r2, [pc, #152]	@ (8002fd4 <TIM_Base_SetConfig+0x148>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d108      	bne.n	8002f50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a0e      	ldr	r2, [pc, #56]	@ (8002fac <TIM_Base_SetConfig+0x120>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d003      	beq.n	8002f7e <TIM_Base_SetConfig+0xf2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a10      	ldr	r2, [pc, #64]	@ (8002fbc <TIM_Base_SetConfig+0x130>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d103      	bne.n	8002f86 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	691a      	ldr	r2, [r3, #16]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f043 0204 	orr.w	r2, r3, #4
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	601a      	str	r2, [r3, #0]
}
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40010000 	.word	0x40010000
 8002fb0:	40000400 	.word	0x40000400
 8002fb4:	40000800 	.word	0x40000800
 8002fb8:	40000c00 	.word	0x40000c00
 8002fbc:	40010400 	.word	0x40010400
 8002fc0:	40014000 	.word	0x40014000
 8002fc4:	40014400 	.word	0x40014400
 8002fc8:	40014800 	.word	0x40014800
 8002fcc:	40001800 	.word	0x40001800
 8002fd0:	40001c00 	.word	0x40001c00
 8002fd4:	40002000 	.word	0x40002000

08002fd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	f023 0201 	bic.w	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f023 0303 	bic.w	r3, r3, #3
 800300e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f023 0302 	bic.w	r3, r3, #2
 8003020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4313      	orrs	r3, r2
 800302a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a20      	ldr	r2, [pc, #128]	@ (80030b0 <TIM_OC1_SetConfig+0xd8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d003      	beq.n	800303c <TIM_OC1_SetConfig+0x64>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a1f      	ldr	r2, [pc, #124]	@ (80030b4 <TIM_OC1_SetConfig+0xdc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d10c      	bne.n	8003056 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f023 0308 	bic.w	r3, r3, #8
 8003042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f023 0304 	bic.w	r3, r3, #4
 8003054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a15      	ldr	r2, [pc, #84]	@ (80030b0 <TIM_OC1_SetConfig+0xd8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d003      	beq.n	8003066 <TIM_OC1_SetConfig+0x8e>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a14      	ldr	r2, [pc, #80]	@ (80030b4 <TIM_OC1_SetConfig+0xdc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d111      	bne.n	800308a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800306c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	621a      	str	r2, [r3, #32]
}
 80030a4:	bf00      	nop
 80030a6:	371c      	adds	r7, #28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	40010000 	.word	0x40010000
 80030b4:	40010400 	.word	0x40010400

080030b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	f023 0210 	bic.w	r2, r3, #16
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	021b      	lsls	r3, r3, #8
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f023 0320 	bic.w	r3, r3, #32
 8003102:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4313      	orrs	r3, r2
 800310e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a22      	ldr	r2, [pc, #136]	@ (800319c <TIM_OC2_SetConfig+0xe4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d003      	beq.n	8003120 <TIM_OC2_SetConfig+0x68>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a21      	ldr	r2, [pc, #132]	@ (80031a0 <TIM_OC2_SetConfig+0xe8>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d10d      	bne.n	800313c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4313      	orrs	r3, r2
 8003132:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800313a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a17      	ldr	r2, [pc, #92]	@ (800319c <TIM_OC2_SetConfig+0xe4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d003      	beq.n	800314c <TIM_OC2_SetConfig+0x94>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a16      	ldr	r2, [pc, #88]	@ (80031a0 <TIM_OC2_SetConfig+0xe8>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d113      	bne.n	8003174 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003152:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800315a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	621a      	str	r2, [r3, #32]
}
 800318e:	bf00      	nop
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40010000 	.word	0x40010000
 80031a0:	40010400 	.word	0x40010400

080031a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0303 	bic.w	r3, r3, #3
 80031da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a21      	ldr	r2, [pc, #132]	@ (8003284 <TIM_OC3_SetConfig+0xe0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d003      	beq.n	800320a <TIM_OC3_SetConfig+0x66>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a20      	ldr	r2, [pc, #128]	@ (8003288 <TIM_OC3_SetConfig+0xe4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d10d      	bne.n	8003226 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	021b      	lsls	r3, r3, #8
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	4313      	orrs	r3, r2
 800321c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a16      	ldr	r2, [pc, #88]	@ (8003284 <TIM_OC3_SetConfig+0xe0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d003      	beq.n	8003236 <TIM_OC3_SetConfig+0x92>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a15      	ldr	r2, [pc, #84]	@ (8003288 <TIM_OC3_SetConfig+0xe4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d113      	bne.n	800325e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800323c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	621a      	str	r2, [r3, #32]
}
 8003278:	bf00      	nop
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	40010000 	.word	0x40010000
 8003288:	40010400 	.word	0x40010400

0800328c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	031b      	lsls	r3, r3, #12
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a12      	ldr	r2, [pc, #72]	@ (8003330 <TIM_OC4_SetConfig+0xa4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d003      	beq.n	80032f4 <TIM_OC4_SetConfig+0x68>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a11      	ldr	r2, [pc, #68]	@ (8003334 <TIM_OC4_SetConfig+0xa8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d109      	bne.n	8003308 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80032fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	019b      	lsls	r3, r3, #6
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	621a      	str	r2, [r3, #32]
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40010000 	.word	0x40010000
 8003334:	40010400 	.word	0x40010400

08003338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	f023 0201 	bic.w	r2, r3, #1
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f023 030a 	bic.w	r3, r3, #10
 8003374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4313      	orrs	r3, r2
 800337c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	621a      	str	r2, [r3, #32]
}
 800338a:	bf00      	nop
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003396:	b480      	push	{r7}
 8003398:	b087      	sub	sp, #28
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f023 0210 	bic.w	r2, r3, #16
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80033c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	031b      	lsls	r3, r3, #12
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80033d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	621a      	str	r2, [r3, #32]
}
 80033ea:	bf00      	nop
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b085      	sub	sp, #20
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800340c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	f043 0307 	orr.w	r3, r3, #7
 8003418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	609a      	str	r2, [r3, #8]
}
 8003420:	bf00      	nop
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
 8003438:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003446:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	021a      	lsls	r2, r3, #8
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	431a      	orrs	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4313      	orrs	r3, r2
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	609a      	str	r2, [r3, #8]
}
 8003460:	bf00      	nop
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	2201      	movs	r2, #1
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a1a      	ldr	r2, [r3, #32]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	43db      	mvns	r3, r3
 800348e:	401a      	ands	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a1a      	ldr	r2, [r3, #32]
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	fa01 f303 	lsl.w	r3, r1, r3
 80034a4:	431a      	orrs	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	621a      	str	r2, [r3, #32]
}
 80034aa:	bf00      	nop
 80034ac:	371c      	adds	r7, #28
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e05a      	b.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a21      	ldr	r2, [pc, #132]	@ (8003594 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d022      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800351c:	d01d      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1d      	ldr	r2, [pc, #116]	@ (8003598 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d018      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1b      	ldr	r2, [pc, #108]	@ (800359c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d013      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1a      	ldr	r2, [pc, #104]	@ (80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00e      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a18      	ldr	r2, [pc, #96]	@ (80035a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d009      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a17      	ldr	r2, [pc, #92]	@ (80035a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d004      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a15      	ldr	r2, [pc, #84]	@ (80035ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d10c      	bne.n	8003574 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003560:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	4313      	orrs	r3, r2
 800356a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40010000 	.word	0x40010000
 8003598:	40000400 	.word	0x40000400
 800359c:	40000800 	.word	0x40000800
 80035a0:	40000c00 	.word	0x40000c00
 80035a4:	40010400 	.word	0x40010400
 80035a8:	40014000 	.word	0x40014000
 80035ac:	40001800 	.word	0x40001800

080035b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e03d      	b.n	8003648 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4313      	orrs	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e042      	b.n	8003714 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d106      	bne.n	80036a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fd fbbc 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2224      	movs	r2, #36	@ 0x24
 80036ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 fdd3 	bl	800426c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08a      	sub	sp, #40	@ 0x28
 8003720:	af02      	add	r7, sp, #8
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	603b      	str	r3, [r7, #0]
 8003728:	4613      	mov	r3, r2
 800372a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b20      	cmp	r3, #32
 800373a:	d175      	bne.n	8003828 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <HAL_UART_Transmit+0x2c>
 8003742:	88fb      	ldrh	r3, [r7, #6]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e06e      	b.n	800382a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2221      	movs	r2, #33	@ 0x21
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800375a:	f7fd fce9 	bl	8001130 <HAL_GetTick>
 800375e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	88fa      	ldrh	r2, [r7, #6]
 8003764:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	88fa      	ldrh	r2, [r7, #6]
 800376a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003774:	d108      	bne.n	8003788 <HAL_UART_Transmit+0x6c>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d104      	bne.n	8003788 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800377e:	2300      	movs	r3, #0
 8003780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	61bb      	str	r3, [r7, #24]
 8003786:	e003      	b.n	8003790 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800378c:	2300      	movs	r3, #0
 800378e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003790:	e02e      	b.n	80037f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2200      	movs	r2, #0
 800379a:	2180      	movs	r1, #128	@ 0x80
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 fb37 	bl	8003e10 <UART_WaitOnFlagUntilTimeout>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e03a      	b.n	800382a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10b      	bne.n	80037d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	3302      	adds	r3, #2
 80037ce:	61bb      	str	r3, [r7, #24]
 80037d0:	e007      	b.n	80037e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	781a      	ldrb	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	3301      	adds	r3, #1
 80037e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1cb      	bne.n	8003792 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2200      	movs	r2, #0
 8003802:	2140      	movs	r1, #64	@ 0x40
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 fb03 	bl	8003e10 <UART_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e006      	b.n	800382a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003824:	2300      	movs	r3, #0
 8003826:	e000      	b.n	800382a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003828:	2302      	movs	r3, #2
  }
}
 800382a:	4618      	mov	r0, r3
 800382c:	3720      	adds	r7, #32
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	4613      	mov	r3, r2
 800383e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b20      	cmp	r3, #32
 800384a:	d112      	bne.n	8003872 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_UART_Receive_IT+0x26>
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e00b      	b.n	8003874 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	461a      	mov	r2, r3
 8003866:	68b9      	ldr	r1, [r7, #8]
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 fb2a 	bl	8003ec2 <UART_Start_Receive_IT>
 800386e:	4603      	mov	r3, r0
 8003870:	e000      	b.n	8003874 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003872:	2302      	movs	r3, #2
  }
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b0ba      	sub	sp, #232	@ 0xe8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80038ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10f      	bne.n	80038e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d009      	beq.n	80038e2 <HAL_UART_IRQHandler+0x66>
 80038ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 fc07 	bl	80040ee <UART_Receive_IT>
      return;
 80038e0:	e273      	b.n	8003dca <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 80de 	beq.w	8003aa8 <HAL_UART_IRQHandler+0x22c>
 80038ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d106      	bne.n	8003906 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 80d1 	beq.w	8003aa8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00b      	beq.n	800392a <HAL_UART_IRQHandler+0xae>
 8003912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003922:	f043 0201 	orr.w	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800392a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00b      	beq.n	800394e <HAL_UART_IRQHandler+0xd2>
 8003936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003946:	f043 0202 	orr.w	r2, r3, #2
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800394e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00b      	beq.n	8003972 <HAL_UART_IRQHandler+0xf6>
 800395a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396a:	f043 0204 	orr.w	r2, r3, #4
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d011      	beq.n	80039a2 <HAL_UART_IRQHandler+0x126>
 800397e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b00      	cmp	r3, #0
 8003988:	d105      	bne.n	8003996 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800398a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d005      	beq.n	80039a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399a:	f043 0208 	orr.w	r2, r3, #8
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 820a 	beq.w	8003dc0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039b0:	f003 0320 	and.w	r3, r3, #32
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_UART_IRQHandler+0x14e>
 80039b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 fb92 	bl	80040ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d4:	2b40      	cmp	r3, #64	@ 0x40
 80039d6:	bf0c      	ite	eq
 80039d8:	2301      	moveq	r3, #1
 80039da:	2300      	movne	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d103      	bne.n	80039f6 <HAL_UART_IRQHandler+0x17a>
 80039ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d04f      	beq.n	8003a96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fa9d 	bl	8003f36 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a06:	2b40      	cmp	r3, #64	@ 0x40
 8003a08:	d141      	bne.n	8003a8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3314      	adds	r3, #20
 8003a10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a18:	e853 3f00 	ldrex	r3, [r3]
 8003a1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3314      	adds	r3, #20
 8003a32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a46:	e841 2300 	strex	r3, r2, [r1]
 8003a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003a4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1d9      	bne.n	8003a0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d013      	beq.n	8003a86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a62:	4a8a      	ldr	r2, [pc, #552]	@ (8003c8c <HAL_UART_IRQHandler+0x410>)
 8003a64:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd fced 	bl	800144a <HAL_DMA_Abort_IT>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d016      	beq.n	8003aa4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a80:	4610      	mov	r0, r2
 8003a82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a84:	e00e      	b.n	8003aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f9ac 	bl	8003de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	e00a      	b.n	8003aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f9a8 	bl	8003de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a94:	e006      	b.n	8003aa4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f9a4 	bl	8003de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003aa2:	e18d      	b.n	8003dc0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa4:	bf00      	nop
    return;
 8003aa6:	e18b      	b.n	8003dc0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	f040 8167 	bne.w	8003d80 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ab6:	f003 0310 	and.w	r3, r3, #16
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 8160 	beq.w	8003d80 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 8159 	beq.w	8003d80 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	60bb      	str	r3, [r7, #8]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aee:	2b40      	cmp	r3, #64	@ 0x40
 8003af0:	f040 80ce 	bne.w	8003c90 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80a9 	beq.w	8003c5c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b12:	429a      	cmp	r2, r3
 8003b14:	f080 80a2 	bcs.w	8003c5c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b1e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b2a:	f000 8088 	beq.w	8003c3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	330c      	adds	r3, #12
 8003b34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b3c:	e853 3f00 	ldrex	r3, [r3]
 8003b40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003b44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	330c      	adds	r3, #12
 8003b56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003b5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b62:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003b66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b6a:	e841 2300 	strex	r3, r2, [r1]
 8003b6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1d9      	bne.n	8003b2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3314      	adds	r3, #20
 8003b80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b84:	e853 3f00 	ldrex	r3, [r3]
 8003b88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3314      	adds	r3, #20
 8003b9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b9e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003ba2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ba6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003baa:	e841 2300 	strex	r3, r2, [r1]
 8003bae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003bb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1e1      	bne.n	8003b7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3314      	adds	r3, #20
 8003bbc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003bc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3314      	adds	r3, #20
 8003bd6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003bda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bde:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003be0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003be2:	e841 2300 	strex	r3, r2, [r1]
 8003be6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003be8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1e3      	bne.n	8003bb6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	330c      	adds	r3, #12
 8003c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c06:	e853 3f00 	ldrex	r3, [r3]
 8003c0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c0e:	f023 0310 	bic.w	r3, r3, #16
 8003c12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	330c      	adds	r3, #12
 8003c1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003c20:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c22:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c28:	e841 2300 	strex	r3, r2, [r1]
 8003c2c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1e3      	bne.n	8003bfc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fd fb96 	bl	800136a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2202      	movs	r2, #2
 8003c42:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	4619      	mov	r1, r3
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f8cf 	bl	8003df8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003c5a:	e0b3      	b.n	8003dc4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c64:	429a      	cmp	r2, r3
 8003c66:	f040 80ad 	bne.w	8003dc4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c74:	f040 80a6 	bne.w	8003dc4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c82:	4619      	mov	r1, r3
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f8b7 	bl	8003df8 <HAL_UARTEx_RxEventCallback>
      return;
 8003c8a:	e09b      	b.n	8003dc4 <HAL_UART_IRQHandler+0x548>
 8003c8c:	08003ffd 	.word	0x08003ffd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 808e 	beq.w	8003dc8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003cac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 8089 	beq.w	8003dc8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	330c      	adds	r3, #12
 8003cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ccc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	330c      	adds	r3, #12
 8003cd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003cda:	647a      	str	r2, [r7, #68]	@ 0x44
 8003cdc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ce0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ce2:	e841 2300 	strex	r3, r2, [r1]
 8003ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1e3      	bne.n	8003cb6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3314      	adds	r3, #20
 8003cf4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	623b      	str	r3, [r7, #32]
   return(result);
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3314      	adds	r3, #20
 8003d0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d12:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e3      	bne.n	8003cee <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 0310 	bic.w	r3, r3, #16
 8003d4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003d58:	61fa      	str	r2, [r7, #28]
 8003d5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5c:	69b9      	ldr	r1, [r7, #24]
 8003d5e:	69fa      	ldr	r2, [r7, #28]
 8003d60:	e841 2300 	strex	r3, r2, [r1]
 8003d64:	617b      	str	r3, [r7, #20]
   return(result);
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1e3      	bne.n	8003d34 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d76:	4619      	mov	r1, r3
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f83d 	bl	8003df8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d7e:	e023      	b.n	8003dc8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d009      	beq.n	8003da0 <HAL_UART_IRQHandler+0x524>
 8003d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f940 	bl	800401e <UART_Transmit_IT>
    return;
 8003d9e:	e014      	b.n	8003dca <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00e      	beq.n	8003dca <HAL_UART_IRQHandler+0x54e>
 8003dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f980 	bl	80040be <UART_EndTransmit_IT>
    return;
 8003dbe:	e004      	b.n	8003dca <HAL_UART_IRQHandler+0x54e>
    return;
 8003dc0:	bf00      	nop
 8003dc2:	e002      	b.n	8003dca <HAL_UART_IRQHandler+0x54e>
      return;
 8003dc4:	bf00      	nop
 8003dc6:	e000      	b.n	8003dca <HAL_UART_IRQHandler+0x54e>
      return;
 8003dc8:	bf00      	nop
  }
}
 8003dca:	37e8      	adds	r7, #232	@ 0xe8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	460b      	mov	r3, r1
 8003e02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	603b      	str	r3, [r7, #0]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e20:	e03b      	b.n	8003e9a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e28:	d037      	beq.n	8003e9a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2a:	f7fd f981 	bl	8001130 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	6a3a      	ldr	r2, [r7, #32]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d302      	bcc.n	8003e40 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e03a      	b.n	8003eba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d023      	beq.n	8003e9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b80      	cmp	r3, #128	@ 0x80
 8003e56:	d020      	beq.n	8003e9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b40      	cmp	r3, #64	@ 0x40
 8003e5c:	d01d      	beq.n	8003e9a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d116      	bne.n	8003e9a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 f857 	bl	8003f36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2208      	movs	r2, #8
 8003e8c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e00f      	b.n	8003eba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	bf0c      	ite	eq
 8003eaa:	2301      	moveq	r3, #1
 8003eac:	2300      	movne	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d0b4      	beq.n	8003e22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b085      	sub	sp, #20
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	88fa      	ldrh	r2, [r7, #6]
 8003eda:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	88fa      	ldrh	r2, [r7, #6]
 8003ee0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2222      	movs	r2, #34	@ 0x22
 8003eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d007      	beq.n	8003f08 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f06:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695a      	ldr	r2, [r3, #20]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0220 	orr.w	r2, r2, #32
 8003f26:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b095      	sub	sp, #84	@ 0x54
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	330c      	adds	r3, #12
 8003f44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f48:	e853 3f00 	ldrex	r3, [r3]
 8003f4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	330c      	adds	r3, #12
 8003f5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f5e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f66:	e841 2300 	strex	r3, r2, [r1]
 8003f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1e5      	bne.n	8003f3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3314      	adds	r3, #20
 8003f78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
 8003f80:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f023 0301 	bic.w	r3, r3, #1
 8003f88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3314      	adds	r3, #20
 8003f90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e5      	bne.n	8003f72 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d119      	bne.n	8003fe2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	330c      	adds	r3, #12
 8003fb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f023 0310 	bic.w	r3, r3, #16
 8003fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	330c      	adds	r3, #12
 8003fcc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fce:	61ba      	str	r2, [r7, #24]
 8003fd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	6979      	ldr	r1, [r7, #20]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	613b      	str	r3, [r7, #16]
   return(result);
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e5      	bne.n	8003fae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ff0:	bf00      	nop
 8003ff2:	3754      	adds	r7, #84	@ 0x54
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004008:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f7ff fee7 	bl	8003de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004016:	bf00      	nop
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800401e:	b480      	push	{r7}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b21      	cmp	r3, #33	@ 0x21
 8004030:	d13e      	bne.n	80040b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800403a:	d114      	bne.n	8004066 <UART_Transmit_IT+0x48>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d110      	bne.n	8004066 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004058:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	1c9a      	adds	r2, r3, #2
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	621a      	str	r2, [r3, #32]
 8004064:	e008      	b.n	8004078 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	1c59      	adds	r1, r3, #1
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6211      	str	r1, [r2, #32]
 8004070:	781a      	ldrb	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800407c:	b29b      	uxth	r3, r3
 800407e:	3b01      	subs	r3, #1
 8004080:	b29b      	uxth	r3, r3
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	4619      	mov	r1, r3
 8004086:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10f      	bne.n	80040ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800409a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	e000      	b.n	80040b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040b0:	2302      	movs	r3, #2
  }
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2220      	movs	r2, #32
 80040da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff fe76 	bl	8003dd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b08c      	sub	sp, #48	@ 0x30
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b22      	cmp	r3, #34	@ 0x22
 8004108:	f040 80aa 	bne.w	8004260 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004114:	d115      	bne.n	8004142 <UART_Receive_IT+0x54>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d111      	bne.n	8004142 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004122:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	b29b      	uxth	r3, r3
 800412c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004130:	b29a      	uxth	r2, r3
 8004132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004134:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413a:	1c9a      	adds	r2, r3, #2
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004140:	e024      	b.n	800418c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004146:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004150:	d007      	beq.n	8004162 <UART_Receive_IT+0x74>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10a      	bne.n	8004170 <UART_Receive_IT+0x82>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	b2da      	uxtb	r2, r3
 800416a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	e008      	b.n	8004182 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800417c:	b2da      	uxtb	r2, r3
 800417e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004180:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29b      	uxth	r3, r3
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	4619      	mov	r1, r3
 800419a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800419c:	2b00      	cmp	r3, #0
 800419e:	d15d      	bne.n	800425c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0220 	bic.w	r2, r2, #32
 80041ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695a      	ldr	r2, [r3, #20]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0201 	bic.w	r2, r2, #1
 80041ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d135      	bne.n	8004252 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	330c      	adds	r3, #12
 80041f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	613b      	str	r3, [r7, #16]
   return(result);
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f023 0310 	bic.w	r3, r3, #16
 8004202:	627b      	str	r3, [r7, #36]	@ 0x24
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	330c      	adds	r3, #12
 800420a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800420c:	623a      	str	r2, [r7, #32]
 800420e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	69f9      	ldr	r1, [r7, #28]
 8004212:	6a3a      	ldr	r2, [r7, #32]
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	61bb      	str	r3, [r7, #24]
   return(result);
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e5      	bne.n	80041ec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0310 	and.w	r3, r3, #16
 800422a:	2b10      	cmp	r3, #16
 800422c:	d10a      	bne.n	8004244 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004248:	4619      	mov	r1, r3
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff fdd4 	bl	8003df8 <HAL_UARTEx_RxEventCallback>
 8004250:	e002      	b.n	8004258 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fc fcb6 	bl	8000bc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	e002      	b.n	8004262 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800425c:	2300      	movs	r3, #0
 800425e:	e000      	b.n	8004262 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004260:	2302      	movs	r3, #2
  }
}
 8004262:	4618      	mov	r0, r3
 8004264:	3730      	adds	r7, #48	@ 0x30
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800426c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004270:	b0c0      	sub	sp, #256	@ 0x100
 8004272:	af00      	add	r7, sp, #0
 8004274:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004288:	68d9      	ldr	r1, [r3, #12]
 800428a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	ea40 0301 	orr.w	r3, r0, r1
 8004294:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	431a      	orrs	r2, r3
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80042c4:	f021 010c 	bic.w	r1, r1, #12
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80042d2:	430b      	orrs	r3, r1
 80042d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80042e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e6:	6999      	ldr	r1, [r3, #24]
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	ea40 0301 	orr.w	r3, r0, r1
 80042f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	4b8f      	ldr	r3, [pc, #572]	@ (8004538 <UART_SetConfig+0x2cc>)
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d005      	beq.n	800430c <UART_SetConfig+0xa0>
 8004300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	4b8d      	ldr	r3, [pc, #564]	@ (800453c <UART_SetConfig+0x2d0>)
 8004308:	429a      	cmp	r2, r3
 800430a:	d104      	bne.n	8004316 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800430c:	f7fd fb8c 	bl	8001a28 <HAL_RCC_GetPCLK2Freq>
 8004310:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004314:	e003      	b.n	800431e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004316:	f7fd fb73 	bl	8001a00 <HAL_RCC_GetPCLK1Freq>
 800431a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800431e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004328:	f040 810c 	bne.w	8004544 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800432c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004330:	2200      	movs	r2, #0
 8004332:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004336:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800433a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800433e:	4622      	mov	r2, r4
 8004340:	462b      	mov	r3, r5
 8004342:	1891      	adds	r1, r2, r2
 8004344:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004346:	415b      	adcs	r3, r3
 8004348:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800434a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800434e:	4621      	mov	r1, r4
 8004350:	eb12 0801 	adds.w	r8, r2, r1
 8004354:	4629      	mov	r1, r5
 8004356:	eb43 0901 	adc.w	r9, r3, r1
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004366:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800436a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800436e:	4690      	mov	r8, r2
 8004370:	4699      	mov	r9, r3
 8004372:	4623      	mov	r3, r4
 8004374:	eb18 0303 	adds.w	r3, r8, r3
 8004378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800437c:	462b      	mov	r3, r5
 800437e:	eb49 0303 	adc.w	r3, r9, r3
 8004382:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004392:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004396:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800439a:	460b      	mov	r3, r1
 800439c:	18db      	adds	r3, r3, r3
 800439e:	653b      	str	r3, [r7, #80]	@ 0x50
 80043a0:	4613      	mov	r3, r2
 80043a2:	eb42 0303 	adc.w	r3, r2, r3
 80043a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80043a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80043b0:	f7fb ff7e 	bl	80002b0 <__aeabi_uldivmod>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4b61      	ldr	r3, [pc, #388]	@ (8004540 <UART_SetConfig+0x2d4>)
 80043ba:	fba3 2302 	umull	r2, r3, r3, r2
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	011c      	lsls	r4, r3, #4
 80043c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80043d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80043d4:	4642      	mov	r2, r8
 80043d6:	464b      	mov	r3, r9
 80043d8:	1891      	adds	r1, r2, r2
 80043da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80043dc:	415b      	adcs	r3, r3
 80043de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80043e4:	4641      	mov	r1, r8
 80043e6:	eb12 0a01 	adds.w	sl, r2, r1
 80043ea:	4649      	mov	r1, r9
 80043ec:	eb43 0b01 	adc.w	fp, r3, r1
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004400:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004404:	4692      	mov	sl, r2
 8004406:	469b      	mov	fp, r3
 8004408:	4643      	mov	r3, r8
 800440a:	eb1a 0303 	adds.w	r3, sl, r3
 800440e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004412:	464b      	mov	r3, r9
 8004414:	eb4b 0303 	adc.w	r3, fp, r3
 8004418:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004428:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800442c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004430:	460b      	mov	r3, r1
 8004432:	18db      	adds	r3, r3, r3
 8004434:	643b      	str	r3, [r7, #64]	@ 0x40
 8004436:	4613      	mov	r3, r2
 8004438:	eb42 0303 	adc.w	r3, r2, r3
 800443c:	647b      	str	r3, [r7, #68]	@ 0x44
 800443e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004442:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004446:	f7fb ff33 	bl	80002b0 <__aeabi_uldivmod>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4611      	mov	r1, r2
 8004450:	4b3b      	ldr	r3, [pc, #236]	@ (8004540 <UART_SetConfig+0x2d4>)
 8004452:	fba3 2301 	umull	r2, r3, r3, r1
 8004456:	095b      	lsrs	r3, r3, #5
 8004458:	2264      	movs	r2, #100	@ 0x64
 800445a:	fb02 f303 	mul.w	r3, r2, r3
 800445e:	1acb      	subs	r3, r1, r3
 8004460:	00db      	lsls	r3, r3, #3
 8004462:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004466:	4b36      	ldr	r3, [pc, #216]	@ (8004540 <UART_SetConfig+0x2d4>)
 8004468:	fba3 2302 	umull	r2, r3, r3, r2
 800446c:	095b      	lsrs	r3, r3, #5
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004474:	441c      	add	r4, r3
 8004476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800447a:	2200      	movs	r2, #0
 800447c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004480:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004484:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004488:	4642      	mov	r2, r8
 800448a:	464b      	mov	r3, r9
 800448c:	1891      	adds	r1, r2, r2
 800448e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004490:	415b      	adcs	r3, r3
 8004492:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004494:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004498:	4641      	mov	r1, r8
 800449a:	1851      	adds	r1, r2, r1
 800449c:	6339      	str	r1, [r7, #48]	@ 0x30
 800449e:	4649      	mov	r1, r9
 80044a0:	414b      	adcs	r3, r1
 80044a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80044b0:	4659      	mov	r1, fp
 80044b2:	00cb      	lsls	r3, r1, #3
 80044b4:	4651      	mov	r1, sl
 80044b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044ba:	4651      	mov	r1, sl
 80044bc:	00ca      	lsls	r2, r1, #3
 80044be:	4610      	mov	r0, r2
 80044c0:	4619      	mov	r1, r3
 80044c2:	4603      	mov	r3, r0
 80044c4:	4642      	mov	r2, r8
 80044c6:	189b      	adds	r3, r3, r2
 80044c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044cc:	464b      	mov	r3, r9
 80044ce:	460a      	mov	r2, r1
 80044d0:	eb42 0303 	adc.w	r3, r2, r3
 80044d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80044e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80044e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80044ec:	460b      	mov	r3, r1
 80044ee:	18db      	adds	r3, r3, r3
 80044f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044f2:	4613      	mov	r3, r2
 80044f4:	eb42 0303 	adc.w	r3, r2, r3
 80044f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004502:	f7fb fed5 	bl	80002b0 <__aeabi_uldivmod>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4b0d      	ldr	r3, [pc, #52]	@ (8004540 <UART_SetConfig+0x2d4>)
 800450c:	fba3 1302 	umull	r1, r3, r3, r2
 8004510:	095b      	lsrs	r3, r3, #5
 8004512:	2164      	movs	r1, #100	@ 0x64
 8004514:	fb01 f303 	mul.w	r3, r1, r3
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	3332      	adds	r3, #50	@ 0x32
 800451e:	4a08      	ldr	r2, [pc, #32]	@ (8004540 <UART_SetConfig+0x2d4>)
 8004520:	fba2 2303 	umull	r2, r3, r2, r3
 8004524:	095b      	lsrs	r3, r3, #5
 8004526:	f003 0207 	and.w	r2, r3, #7
 800452a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4422      	add	r2, r4
 8004532:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004534:	e106      	b.n	8004744 <UART_SetConfig+0x4d8>
 8004536:	bf00      	nop
 8004538:	40011000 	.word	0x40011000
 800453c:	40011400 	.word	0x40011400
 8004540:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004548:	2200      	movs	r2, #0
 800454a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800454e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004552:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004556:	4642      	mov	r2, r8
 8004558:	464b      	mov	r3, r9
 800455a:	1891      	adds	r1, r2, r2
 800455c:	6239      	str	r1, [r7, #32]
 800455e:	415b      	adcs	r3, r3
 8004560:	627b      	str	r3, [r7, #36]	@ 0x24
 8004562:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004566:	4641      	mov	r1, r8
 8004568:	1854      	adds	r4, r2, r1
 800456a:	4649      	mov	r1, r9
 800456c:	eb43 0501 	adc.w	r5, r3, r1
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	00eb      	lsls	r3, r5, #3
 800457a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800457e:	00e2      	lsls	r2, r4, #3
 8004580:	4614      	mov	r4, r2
 8004582:	461d      	mov	r5, r3
 8004584:	4643      	mov	r3, r8
 8004586:	18e3      	adds	r3, r4, r3
 8004588:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800458c:	464b      	mov	r3, r9
 800458e:	eb45 0303 	adc.w	r3, r5, r3
 8004592:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	f04f 0300 	mov.w	r3, #0
 80045ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045b2:	4629      	mov	r1, r5
 80045b4:	008b      	lsls	r3, r1, #2
 80045b6:	4621      	mov	r1, r4
 80045b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045bc:	4621      	mov	r1, r4
 80045be:	008a      	lsls	r2, r1, #2
 80045c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80045c4:	f7fb fe74 	bl	80002b0 <__aeabi_uldivmod>
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4b60      	ldr	r3, [pc, #384]	@ (8004750 <UART_SetConfig+0x4e4>)
 80045ce:	fba3 2302 	umull	r2, r3, r3, r2
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	011c      	lsls	r4, r3, #4
 80045d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045da:	2200      	movs	r2, #0
 80045dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80045e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80045e8:	4642      	mov	r2, r8
 80045ea:	464b      	mov	r3, r9
 80045ec:	1891      	adds	r1, r2, r2
 80045ee:	61b9      	str	r1, [r7, #24]
 80045f0:	415b      	adcs	r3, r3
 80045f2:	61fb      	str	r3, [r7, #28]
 80045f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045f8:	4641      	mov	r1, r8
 80045fa:	1851      	adds	r1, r2, r1
 80045fc:	6139      	str	r1, [r7, #16]
 80045fe:	4649      	mov	r1, r9
 8004600:	414b      	adcs	r3, r1
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004610:	4659      	mov	r1, fp
 8004612:	00cb      	lsls	r3, r1, #3
 8004614:	4651      	mov	r1, sl
 8004616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800461a:	4651      	mov	r1, sl
 800461c:	00ca      	lsls	r2, r1, #3
 800461e:	4610      	mov	r0, r2
 8004620:	4619      	mov	r1, r3
 8004622:	4603      	mov	r3, r0
 8004624:	4642      	mov	r2, r8
 8004626:	189b      	adds	r3, r3, r2
 8004628:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800462c:	464b      	mov	r3, r9
 800462e:	460a      	mov	r2, r1
 8004630:	eb42 0303 	adc.w	r3, r2, r3
 8004634:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004642:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004650:	4649      	mov	r1, r9
 8004652:	008b      	lsls	r3, r1, #2
 8004654:	4641      	mov	r1, r8
 8004656:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800465a:	4641      	mov	r1, r8
 800465c:	008a      	lsls	r2, r1, #2
 800465e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004662:	f7fb fe25 	bl	80002b0 <__aeabi_uldivmod>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4611      	mov	r1, r2
 800466c:	4b38      	ldr	r3, [pc, #224]	@ (8004750 <UART_SetConfig+0x4e4>)
 800466e:	fba3 2301 	umull	r2, r3, r3, r1
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	2264      	movs	r2, #100	@ 0x64
 8004676:	fb02 f303 	mul.w	r3, r2, r3
 800467a:	1acb      	subs	r3, r1, r3
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	3332      	adds	r3, #50	@ 0x32
 8004680:	4a33      	ldr	r2, [pc, #204]	@ (8004750 <UART_SetConfig+0x4e4>)
 8004682:	fba2 2303 	umull	r2, r3, r2, r3
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800468c:	441c      	add	r4, r3
 800468e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004692:	2200      	movs	r2, #0
 8004694:	673b      	str	r3, [r7, #112]	@ 0x70
 8004696:	677a      	str	r2, [r7, #116]	@ 0x74
 8004698:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800469c:	4642      	mov	r2, r8
 800469e:	464b      	mov	r3, r9
 80046a0:	1891      	adds	r1, r2, r2
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	415b      	adcs	r3, r3
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046ac:	4641      	mov	r1, r8
 80046ae:	1851      	adds	r1, r2, r1
 80046b0:	6039      	str	r1, [r7, #0]
 80046b2:	4649      	mov	r1, r9
 80046b4:	414b      	adcs	r3, r1
 80046b6:	607b      	str	r3, [r7, #4]
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046c4:	4659      	mov	r1, fp
 80046c6:	00cb      	lsls	r3, r1, #3
 80046c8:	4651      	mov	r1, sl
 80046ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ce:	4651      	mov	r1, sl
 80046d0:	00ca      	lsls	r2, r1, #3
 80046d2:	4610      	mov	r0, r2
 80046d4:	4619      	mov	r1, r3
 80046d6:	4603      	mov	r3, r0
 80046d8:	4642      	mov	r2, r8
 80046da:	189b      	adds	r3, r3, r2
 80046dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046de:	464b      	mov	r3, r9
 80046e0:	460a      	mov	r2, r1
 80046e2:	eb42 0303 	adc.w	r3, r2, r3
 80046e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80046f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80046f4:	f04f 0200 	mov.w	r2, #0
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004700:	4649      	mov	r1, r9
 8004702:	008b      	lsls	r3, r1, #2
 8004704:	4641      	mov	r1, r8
 8004706:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800470a:	4641      	mov	r1, r8
 800470c:	008a      	lsls	r2, r1, #2
 800470e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004712:	f7fb fdcd 	bl	80002b0 <__aeabi_uldivmod>
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	4b0d      	ldr	r3, [pc, #52]	@ (8004750 <UART_SetConfig+0x4e4>)
 800471c:	fba3 1302 	umull	r1, r3, r3, r2
 8004720:	095b      	lsrs	r3, r3, #5
 8004722:	2164      	movs	r1, #100	@ 0x64
 8004724:	fb01 f303 	mul.w	r3, r1, r3
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	3332      	adds	r3, #50	@ 0x32
 800472e:	4a08      	ldr	r2, [pc, #32]	@ (8004750 <UART_SetConfig+0x4e4>)
 8004730:	fba2 2303 	umull	r2, r3, r2, r3
 8004734:	095b      	lsrs	r3, r3, #5
 8004736:	f003 020f 	and.w	r2, r3, #15
 800473a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4422      	add	r2, r4
 8004742:	609a      	str	r2, [r3, #8]
}
 8004744:	bf00      	nop
 8004746:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800474a:	46bd      	mov	sp, r7
 800474c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004750:	51eb851f 	.word	0x51eb851f

08004754 <atoi>:
 8004754:	220a      	movs	r2, #10
 8004756:	2100      	movs	r1, #0
 8004758:	f000 b87a 	b.w	8004850 <strtol>

0800475c <_strtol_l.isra.0>:
 800475c:	2b24      	cmp	r3, #36	@ 0x24
 800475e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004762:	4686      	mov	lr, r0
 8004764:	4690      	mov	r8, r2
 8004766:	d801      	bhi.n	800476c <_strtol_l.isra.0+0x10>
 8004768:	2b01      	cmp	r3, #1
 800476a:	d106      	bne.n	800477a <_strtol_l.isra.0+0x1e>
 800476c:	f000 f8b8 	bl	80048e0 <__errno>
 8004770:	2316      	movs	r3, #22
 8004772:	6003      	str	r3, [r0, #0]
 8004774:	2000      	movs	r0, #0
 8004776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477a:	4834      	ldr	r0, [pc, #208]	@ (800484c <_strtol_l.isra.0+0xf0>)
 800477c:	460d      	mov	r5, r1
 800477e:	462a      	mov	r2, r5
 8004780:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004784:	5d06      	ldrb	r6, [r0, r4]
 8004786:	f016 0608 	ands.w	r6, r6, #8
 800478a:	d1f8      	bne.n	800477e <_strtol_l.isra.0+0x22>
 800478c:	2c2d      	cmp	r4, #45	@ 0x2d
 800478e:	d110      	bne.n	80047b2 <_strtol_l.isra.0+0x56>
 8004790:	782c      	ldrb	r4, [r5, #0]
 8004792:	2601      	movs	r6, #1
 8004794:	1c95      	adds	r5, r2, #2
 8004796:	f033 0210 	bics.w	r2, r3, #16
 800479a:	d115      	bne.n	80047c8 <_strtol_l.isra.0+0x6c>
 800479c:	2c30      	cmp	r4, #48	@ 0x30
 800479e:	d10d      	bne.n	80047bc <_strtol_l.isra.0+0x60>
 80047a0:	782a      	ldrb	r2, [r5, #0]
 80047a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80047a6:	2a58      	cmp	r2, #88	@ 0x58
 80047a8:	d108      	bne.n	80047bc <_strtol_l.isra.0+0x60>
 80047aa:	786c      	ldrb	r4, [r5, #1]
 80047ac:	3502      	adds	r5, #2
 80047ae:	2310      	movs	r3, #16
 80047b0:	e00a      	b.n	80047c8 <_strtol_l.isra.0+0x6c>
 80047b2:	2c2b      	cmp	r4, #43	@ 0x2b
 80047b4:	bf04      	itt	eq
 80047b6:	782c      	ldrbeq	r4, [r5, #0]
 80047b8:	1c95      	addeq	r5, r2, #2
 80047ba:	e7ec      	b.n	8004796 <_strtol_l.isra.0+0x3a>
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1f6      	bne.n	80047ae <_strtol_l.isra.0+0x52>
 80047c0:	2c30      	cmp	r4, #48	@ 0x30
 80047c2:	bf14      	ite	ne
 80047c4:	230a      	movne	r3, #10
 80047c6:	2308      	moveq	r3, #8
 80047c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80047cc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80047d0:	2200      	movs	r2, #0
 80047d2:	fbbc f9f3 	udiv	r9, ip, r3
 80047d6:	4610      	mov	r0, r2
 80047d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80047dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80047e0:	2f09      	cmp	r7, #9
 80047e2:	d80f      	bhi.n	8004804 <_strtol_l.isra.0+0xa8>
 80047e4:	463c      	mov	r4, r7
 80047e6:	42a3      	cmp	r3, r4
 80047e8:	dd1b      	ble.n	8004822 <_strtol_l.isra.0+0xc6>
 80047ea:	1c57      	adds	r7, r2, #1
 80047ec:	d007      	beq.n	80047fe <_strtol_l.isra.0+0xa2>
 80047ee:	4581      	cmp	r9, r0
 80047f0:	d314      	bcc.n	800481c <_strtol_l.isra.0+0xc0>
 80047f2:	d101      	bne.n	80047f8 <_strtol_l.isra.0+0x9c>
 80047f4:	45a2      	cmp	sl, r4
 80047f6:	db11      	blt.n	800481c <_strtol_l.isra.0+0xc0>
 80047f8:	fb00 4003 	mla	r0, r0, r3, r4
 80047fc:	2201      	movs	r2, #1
 80047fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004802:	e7eb      	b.n	80047dc <_strtol_l.isra.0+0x80>
 8004804:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004808:	2f19      	cmp	r7, #25
 800480a:	d801      	bhi.n	8004810 <_strtol_l.isra.0+0xb4>
 800480c:	3c37      	subs	r4, #55	@ 0x37
 800480e:	e7ea      	b.n	80047e6 <_strtol_l.isra.0+0x8a>
 8004810:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004814:	2f19      	cmp	r7, #25
 8004816:	d804      	bhi.n	8004822 <_strtol_l.isra.0+0xc6>
 8004818:	3c57      	subs	r4, #87	@ 0x57
 800481a:	e7e4      	b.n	80047e6 <_strtol_l.isra.0+0x8a>
 800481c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004820:	e7ed      	b.n	80047fe <_strtol_l.isra.0+0xa2>
 8004822:	1c53      	adds	r3, r2, #1
 8004824:	d108      	bne.n	8004838 <_strtol_l.isra.0+0xdc>
 8004826:	2322      	movs	r3, #34	@ 0x22
 8004828:	f8ce 3000 	str.w	r3, [lr]
 800482c:	4660      	mov	r0, ip
 800482e:	f1b8 0f00 	cmp.w	r8, #0
 8004832:	d0a0      	beq.n	8004776 <_strtol_l.isra.0+0x1a>
 8004834:	1e69      	subs	r1, r5, #1
 8004836:	e006      	b.n	8004846 <_strtol_l.isra.0+0xea>
 8004838:	b106      	cbz	r6, 800483c <_strtol_l.isra.0+0xe0>
 800483a:	4240      	negs	r0, r0
 800483c:	f1b8 0f00 	cmp.w	r8, #0
 8004840:	d099      	beq.n	8004776 <_strtol_l.isra.0+0x1a>
 8004842:	2a00      	cmp	r2, #0
 8004844:	d1f6      	bne.n	8004834 <_strtol_l.isra.0+0xd8>
 8004846:	f8c8 1000 	str.w	r1, [r8]
 800484a:	e794      	b.n	8004776 <_strtol_l.isra.0+0x1a>
 800484c:	08005215 	.word	0x08005215

08004850 <strtol>:
 8004850:	4613      	mov	r3, r2
 8004852:	460a      	mov	r2, r1
 8004854:	4601      	mov	r1, r0
 8004856:	4802      	ldr	r0, [pc, #8]	@ (8004860 <strtol+0x10>)
 8004858:	6800      	ldr	r0, [r0, #0]
 800485a:	f7ff bf7f 	b.w	800475c <_strtol_l.isra.0>
 800485e:	bf00      	nop
 8004860:	2000000c 	.word	0x2000000c

08004864 <sniprintf>:
 8004864:	b40c      	push	{r2, r3}
 8004866:	b530      	push	{r4, r5, lr}
 8004868:	4b18      	ldr	r3, [pc, #96]	@ (80048cc <sniprintf+0x68>)
 800486a:	1e0c      	subs	r4, r1, #0
 800486c:	681d      	ldr	r5, [r3, #0]
 800486e:	b09d      	sub	sp, #116	@ 0x74
 8004870:	da08      	bge.n	8004884 <sniprintf+0x20>
 8004872:	238b      	movs	r3, #139	@ 0x8b
 8004874:	602b      	str	r3, [r5, #0]
 8004876:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800487a:	b01d      	add	sp, #116	@ 0x74
 800487c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004880:	b002      	add	sp, #8
 8004882:	4770      	bx	lr
 8004884:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004888:	f8ad 3014 	strh.w	r3, [sp, #20]
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004892:	bf14      	ite	ne
 8004894:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8004898:	4623      	moveq	r3, r4
 800489a:	9304      	str	r3, [sp, #16]
 800489c:	9307      	str	r3, [sp, #28]
 800489e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80048a2:	9002      	str	r0, [sp, #8]
 80048a4:	9006      	str	r0, [sp, #24]
 80048a6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80048aa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80048ac:	ab21      	add	r3, sp, #132	@ 0x84
 80048ae:	a902      	add	r1, sp, #8
 80048b0:	4628      	mov	r0, r5
 80048b2:	9301      	str	r3, [sp, #4]
 80048b4:	f000 f994 	bl	8004be0 <_svfiprintf_r>
 80048b8:	1c43      	adds	r3, r0, #1
 80048ba:	bfbc      	itt	lt
 80048bc:	238b      	movlt	r3, #139	@ 0x8b
 80048be:	602b      	strlt	r3, [r5, #0]
 80048c0:	2c00      	cmp	r4, #0
 80048c2:	d0da      	beq.n	800487a <sniprintf+0x16>
 80048c4:	9b02      	ldr	r3, [sp, #8]
 80048c6:	2200      	movs	r2, #0
 80048c8:	701a      	strb	r2, [r3, #0]
 80048ca:	e7d6      	b.n	800487a <sniprintf+0x16>
 80048cc:	2000000c 	.word	0x2000000c

080048d0 <memset>:
 80048d0:	4402      	add	r2, r0
 80048d2:	4603      	mov	r3, r0
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d100      	bne.n	80048da <memset+0xa>
 80048d8:	4770      	bx	lr
 80048da:	f803 1b01 	strb.w	r1, [r3], #1
 80048de:	e7f9      	b.n	80048d4 <memset+0x4>

080048e0 <__errno>:
 80048e0:	4b01      	ldr	r3, [pc, #4]	@ (80048e8 <__errno+0x8>)
 80048e2:	6818      	ldr	r0, [r3, #0]
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	2000000c 	.word	0x2000000c

080048ec <__libc_init_array>:
 80048ec:	b570      	push	{r4, r5, r6, lr}
 80048ee:	4d0d      	ldr	r5, [pc, #52]	@ (8004924 <__libc_init_array+0x38>)
 80048f0:	4c0d      	ldr	r4, [pc, #52]	@ (8004928 <__libc_init_array+0x3c>)
 80048f2:	1b64      	subs	r4, r4, r5
 80048f4:	10a4      	asrs	r4, r4, #2
 80048f6:	2600      	movs	r6, #0
 80048f8:	42a6      	cmp	r6, r4
 80048fa:	d109      	bne.n	8004910 <__libc_init_array+0x24>
 80048fc:	4d0b      	ldr	r5, [pc, #44]	@ (800492c <__libc_init_array+0x40>)
 80048fe:	4c0c      	ldr	r4, [pc, #48]	@ (8004930 <__libc_init_array+0x44>)
 8004900:	f000 fc64 	bl	80051cc <_init>
 8004904:	1b64      	subs	r4, r4, r5
 8004906:	10a4      	asrs	r4, r4, #2
 8004908:	2600      	movs	r6, #0
 800490a:	42a6      	cmp	r6, r4
 800490c:	d105      	bne.n	800491a <__libc_init_array+0x2e>
 800490e:	bd70      	pop	{r4, r5, r6, pc}
 8004910:	f855 3b04 	ldr.w	r3, [r5], #4
 8004914:	4798      	blx	r3
 8004916:	3601      	adds	r6, #1
 8004918:	e7ee      	b.n	80048f8 <__libc_init_array+0xc>
 800491a:	f855 3b04 	ldr.w	r3, [r5], #4
 800491e:	4798      	blx	r3
 8004920:	3601      	adds	r6, #1
 8004922:	e7f2      	b.n	800490a <__libc_init_array+0x1e>
 8004924:	08005350 	.word	0x08005350
 8004928:	08005350 	.word	0x08005350
 800492c:	08005350 	.word	0x08005350
 8004930:	08005354 	.word	0x08005354

08004934 <__retarget_lock_acquire_recursive>:
 8004934:	4770      	bx	lr

08004936 <__retarget_lock_release_recursive>:
 8004936:	4770      	bx	lr

08004938 <_free_r>:
 8004938:	b538      	push	{r3, r4, r5, lr}
 800493a:	4605      	mov	r5, r0
 800493c:	2900      	cmp	r1, #0
 800493e:	d041      	beq.n	80049c4 <_free_r+0x8c>
 8004940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004944:	1f0c      	subs	r4, r1, #4
 8004946:	2b00      	cmp	r3, #0
 8004948:	bfb8      	it	lt
 800494a:	18e4      	addlt	r4, r4, r3
 800494c:	f000 f8e0 	bl	8004b10 <__malloc_lock>
 8004950:	4a1d      	ldr	r2, [pc, #116]	@ (80049c8 <_free_r+0x90>)
 8004952:	6813      	ldr	r3, [r2, #0]
 8004954:	b933      	cbnz	r3, 8004964 <_free_r+0x2c>
 8004956:	6063      	str	r3, [r4, #4]
 8004958:	6014      	str	r4, [r2, #0]
 800495a:	4628      	mov	r0, r5
 800495c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004960:	f000 b8dc 	b.w	8004b1c <__malloc_unlock>
 8004964:	42a3      	cmp	r3, r4
 8004966:	d908      	bls.n	800497a <_free_r+0x42>
 8004968:	6820      	ldr	r0, [r4, #0]
 800496a:	1821      	adds	r1, r4, r0
 800496c:	428b      	cmp	r3, r1
 800496e:	bf01      	itttt	eq
 8004970:	6819      	ldreq	r1, [r3, #0]
 8004972:	685b      	ldreq	r3, [r3, #4]
 8004974:	1809      	addeq	r1, r1, r0
 8004976:	6021      	streq	r1, [r4, #0]
 8004978:	e7ed      	b.n	8004956 <_free_r+0x1e>
 800497a:	461a      	mov	r2, r3
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	b10b      	cbz	r3, 8004984 <_free_r+0x4c>
 8004980:	42a3      	cmp	r3, r4
 8004982:	d9fa      	bls.n	800497a <_free_r+0x42>
 8004984:	6811      	ldr	r1, [r2, #0]
 8004986:	1850      	adds	r0, r2, r1
 8004988:	42a0      	cmp	r0, r4
 800498a:	d10b      	bne.n	80049a4 <_free_r+0x6c>
 800498c:	6820      	ldr	r0, [r4, #0]
 800498e:	4401      	add	r1, r0
 8004990:	1850      	adds	r0, r2, r1
 8004992:	4283      	cmp	r3, r0
 8004994:	6011      	str	r1, [r2, #0]
 8004996:	d1e0      	bne.n	800495a <_free_r+0x22>
 8004998:	6818      	ldr	r0, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	6053      	str	r3, [r2, #4]
 800499e:	4408      	add	r0, r1
 80049a0:	6010      	str	r0, [r2, #0]
 80049a2:	e7da      	b.n	800495a <_free_r+0x22>
 80049a4:	d902      	bls.n	80049ac <_free_r+0x74>
 80049a6:	230c      	movs	r3, #12
 80049a8:	602b      	str	r3, [r5, #0]
 80049aa:	e7d6      	b.n	800495a <_free_r+0x22>
 80049ac:	6820      	ldr	r0, [r4, #0]
 80049ae:	1821      	adds	r1, r4, r0
 80049b0:	428b      	cmp	r3, r1
 80049b2:	bf04      	itt	eq
 80049b4:	6819      	ldreq	r1, [r3, #0]
 80049b6:	685b      	ldreq	r3, [r3, #4]
 80049b8:	6063      	str	r3, [r4, #4]
 80049ba:	bf04      	itt	eq
 80049bc:	1809      	addeq	r1, r1, r0
 80049be:	6021      	streq	r1, [r4, #0]
 80049c0:	6054      	str	r4, [r2, #4]
 80049c2:	e7ca      	b.n	800495a <_free_r+0x22>
 80049c4:	bd38      	pop	{r3, r4, r5, pc}
 80049c6:	bf00      	nop
 80049c8:	20000388 	.word	0x20000388

080049cc <sbrk_aligned>:
 80049cc:	b570      	push	{r4, r5, r6, lr}
 80049ce:	4e0f      	ldr	r6, [pc, #60]	@ (8004a0c <sbrk_aligned+0x40>)
 80049d0:	460c      	mov	r4, r1
 80049d2:	6831      	ldr	r1, [r6, #0]
 80049d4:	4605      	mov	r5, r0
 80049d6:	b911      	cbnz	r1, 80049de <sbrk_aligned+0x12>
 80049d8:	f000 fba4 	bl	8005124 <_sbrk_r>
 80049dc:	6030      	str	r0, [r6, #0]
 80049de:	4621      	mov	r1, r4
 80049e0:	4628      	mov	r0, r5
 80049e2:	f000 fb9f 	bl	8005124 <_sbrk_r>
 80049e6:	1c43      	adds	r3, r0, #1
 80049e8:	d103      	bne.n	80049f2 <sbrk_aligned+0x26>
 80049ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80049ee:	4620      	mov	r0, r4
 80049f0:	bd70      	pop	{r4, r5, r6, pc}
 80049f2:	1cc4      	adds	r4, r0, #3
 80049f4:	f024 0403 	bic.w	r4, r4, #3
 80049f8:	42a0      	cmp	r0, r4
 80049fa:	d0f8      	beq.n	80049ee <sbrk_aligned+0x22>
 80049fc:	1a21      	subs	r1, r4, r0
 80049fe:	4628      	mov	r0, r5
 8004a00:	f000 fb90 	bl	8005124 <_sbrk_r>
 8004a04:	3001      	adds	r0, #1
 8004a06:	d1f2      	bne.n	80049ee <sbrk_aligned+0x22>
 8004a08:	e7ef      	b.n	80049ea <sbrk_aligned+0x1e>
 8004a0a:	bf00      	nop
 8004a0c:	20000384 	.word	0x20000384

08004a10 <_malloc_r>:
 8004a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a14:	1ccd      	adds	r5, r1, #3
 8004a16:	f025 0503 	bic.w	r5, r5, #3
 8004a1a:	3508      	adds	r5, #8
 8004a1c:	2d0c      	cmp	r5, #12
 8004a1e:	bf38      	it	cc
 8004a20:	250c      	movcc	r5, #12
 8004a22:	2d00      	cmp	r5, #0
 8004a24:	4606      	mov	r6, r0
 8004a26:	db01      	blt.n	8004a2c <_malloc_r+0x1c>
 8004a28:	42a9      	cmp	r1, r5
 8004a2a:	d904      	bls.n	8004a36 <_malloc_r+0x26>
 8004a2c:	230c      	movs	r3, #12
 8004a2e:	6033      	str	r3, [r6, #0]
 8004a30:	2000      	movs	r0, #0
 8004a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b0c <_malloc_r+0xfc>
 8004a3a:	f000 f869 	bl	8004b10 <__malloc_lock>
 8004a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8004a42:	461c      	mov	r4, r3
 8004a44:	bb44      	cbnz	r4, 8004a98 <_malloc_r+0x88>
 8004a46:	4629      	mov	r1, r5
 8004a48:	4630      	mov	r0, r6
 8004a4a:	f7ff ffbf 	bl	80049cc <sbrk_aligned>
 8004a4e:	1c43      	adds	r3, r0, #1
 8004a50:	4604      	mov	r4, r0
 8004a52:	d158      	bne.n	8004b06 <_malloc_r+0xf6>
 8004a54:	f8d8 4000 	ldr.w	r4, [r8]
 8004a58:	4627      	mov	r7, r4
 8004a5a:	2f00      	cmp	r7, #0
 8004a5c:	d143      	bne.n	8004ae6 <_malloc_r+0xd6>
 8004a5e:	2c00      	cmp	r4, #0
 8004a60:	d04b      	beq.n	8004afa <_malloc_r+0xea>
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	4639      	mov	r1, r7
 8004a66:	4630      	mov	r0, r6
 8004a68:	eb04 0903 	add.w	r9, r4, r3
 8004a6c:	f000 fb5a 	bl	8005124 <_sbrk_r>
 8004a70:	4581      	cmp	r9, r0
 8004a72:	d142      	bne.n	8004afa <_malloc_r+0xea>
 8004a74:	6821      	ldr	r1, [r4, #0]
 8004a76:	1a6d      	subs	r5, r5, r1
 8004a78:	4629      	mov	r1, r5
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	f7ff ffa6 	bl	80049cc <sbrk_aligned>
 8004a80:	3001      	adds	r0, #1
 8004a82:	d03a      	beq.n	8004afa <_malloc_r+0xea>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	442b      	add	r3, r5
 8004a88:	6023      	str	r3, [r4, #0]
 8004a8a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	bb62      	cbnz	r2, 8004aec <_malloc_r+0xdc>
 8004a92:	f8c8 7000 	str.w	r7, [r8]
 8004a96:	e00f      	b.n	8004ab8 <_malloc_r+0xa8>
 8004a98:	6822      	ldr	r2, [r4, #0]
 8004a9a:	1b52      	subs	r2, r2, r5
 8004a9c:	d420      	bmi.n	8004ae0 <_malloc_r+0xd0>
 8004a9e:	2a0b      	cmp	r2, #11
 8004aa0:	d917      	bls.n	8004ad2 <_malloc_r+0xc2>
 8004aa2:	1961      	adds	r1, r4, r5
 8004aa4:	42a3      	cmp	r3, r4
 8004aa6:	6025      	str	r5, [r4, #0]
 8004aa8:	bf18      	it	ne
 8004aaa:	6059      	strne	r1, [r3, #4]
 8004aac:	6863      	ldr	r3, [r4, #4]
 8004aae:	bf08      	it	eq
 8004ab0:	f8c8 1000 	streq.w	r1, [r8]
 8004ab4:	5162      	str	r2, [r4, r5]
 8004ab6:	604b      	str	r3, [r1, #4]
 8004ab8:	4630      	mov	r0, r6
 8004aba:	f000 f82f 	bl	8004b1c <__malloc_unlock>
 8004abe:	f104 000b 	add.w	r0, r4, #11
 8004ac2:	1d23      	adds	r3, r4, #4
 8004ac4:	f020 0007 	bic.w	r0, r0, #7
 8004ac8:	1ac2      	subs	r2, r0, r3
 8004aca:	bf1c      	itt	ne
 8004acc:	1a1b      	subne	r3, r3, r0
 8004ace:	50a3      	strne	r3, [r4, r2]
 8004ad0:	e7af      	b.n	8004a32 <_malloc_r+0x22>
 8004ad2:	6862      	ldr	r2, [r4, #4]
 8004ad4:	42a3      	cmp	r3, r4
 8004ad6:	bf0c      	ite	eq
 8004ad8:	f8c8 2000 	streq.w	r2, [r8]
 8004adc:	605a      	strne	r2, [r3, #4]
 8004ade:	e7eb      	b.n	8004ab8 <_malloc_r+0xa8>
 8004ae0:	4623      	mov	r3, r4
 8004ae2:	6864      	ldr	r4, [r4, #4]
 8004ae4:	e7ae      	b.n	8004a44 <_malloc_r+0x34>
 8004ae6:	463c      	mov	r4, r7
 8004ae8:	687f      	ldr	r7, [r7, #4]
 8004aea:	e7b6      	b.n	8004a5a <_malloc_r+0x4a>
 8004aec:	461a      	mov	r2, r3
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	42a3      	cmp	r3, r4
 8004af2:	d1fb      	bne.n	8004aec <_malloc_r+0xdc>
 8004af4:	2300      	movs	r3, #0
 8004af6:	6053      	str	r3, [r2, #4]
 8004af8:	e7de      	b.n	8004ab8 <_malloc_r+0xa8>
 8004afa:	230c      	movs	r3, #12
 8004afc:	6033      	str	r3, [r6, #0]
 8004afe:	4630      	mov	r0, r6
 8004b00:	f000 f80c 	bl	8004b1c <__malloc_unlock>
 8004b04:	e794      	b.n	8004a30 <_malloc_r+0x20>
 8004b06:	6005      	str	r5, [r0, #0]
 8004b08:	e7d6      	b.n	8004ab8 <_malloc_r+0xa8>
 8004b0a:	bf00      	nop
 8004b0c:	20000388 	.word	0x20000388

08004b10 <__malloc_lock>:
 8004b10:	4801      	ldr	r0, [pc, #4]	@ (8004b18 <__malloc_lock+0x8>)
 8004b12:	f7ff bf0f 	b.w	8004934 <__retarget_lock_acquire_recursive>
 8004b16:	bf00      	nop
 8004b18:	20000380 	.word	0x20000380

08004b1c <__malloc_unlock>:
 8004b1c:	4801      	ldr	r0, [pc, #4]	@ (8004b24 <__malloc_unlock+0x8>)
 8004b1e:	f7ff bf0a 	b.w	8004936 <__retarget_lock_release_recursive>
 8004b22:	bf00      	nop
 8004b24:	20000380 	.word	0x20000380

08004b28 <__ssputs_r>:
 8004b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b2c:	688e      	ldr	r6, [r1, #8]
 8004b2e:	461f      	mov	r7, r3
 8004b30:	42be      	cmp	r6, r7
 8004b32:	680b      	ldr	r3, [r1, #0]
 8004b34:	4682      	mov	sl, r0
 8004b36:	460c      	mov	r4, r1
 8004b38:	4690      	mov	r8, r2
 8004b3a:	d82d      	bhi.n	8004b98 <__ssputs_r+0x70>
 8004b3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004b44:	d026      	beq.n	8004b94 <__ssputs_r+0x6c>
 8004b46:	6965      	ldr	r5, [r4, #20]
 8004b48:	6909      	ldr	r1, [r1, #16]
 8004b4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b4e:	eba3 0901 	sub.w	r9, r3, r1
 8004b52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b56:	1c7b      	adds	r3, r7, #1
 8004b58:	444b      	add	r3, r9
 8004b5a:	106d      	asrs	r5, r5, #1
 8004b5c:	429d      	cmp	r5, r3
 8004b5e:	bf38      	it	cc
 8004b60:	461d      	movcc	r5, r3
 8004b62:	0553      	lsls	r3, r2, #21
 8004b64:	d527      	bpl.n	8004bb6 <__ssputs_r+0x8e>
 8004b66:	4629      	mov	r1, r5
 8004b68:	f7ff ff52 	bl	8004a10 <_malloc_r>
 8004b6c:	4606      	mov	r6, r0
 8004b6e:	b360      	cbz	r0, 8004bca <__ssputs_r+0xa2>
 8004b70:	6921      	ldr	r1, [r4, #16]
 8004b72:	464a      	mov	r2, r9
 8004b74:	f000 fae6 	bl	8005144 <memcpy>
 8004b78:	89a3      	ldrh	r3, [r4, #12]
 8004b7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b82:	81a3      	strh	r3, [r4, #12]
 8004b84:	6126      	str	r6, [r4, #16]
 8004b86:	6165      	str	r5, [r4, #20]
 8004b88:	444e      	add	r6, r9
 8004b8a:	eba5 0509 	sub.w	r5, r5, r9
 8004b8e:	6026      	str	r6, [r4, #0]
 8004b90:	60a5      	str	r5, [r4, #8]
 8004b92:	463e      	mov	r6, r7
 8004b94:	42be      	cmp	r6, r7
 8004b96:	d900      	bls.n	8004b9a <__ssputs_r+0x72>
 8004b98:	463e      	mov	r6, r7
 8004b9a:	6820      	ldr	r0, [r4, #0]
 8004b9c:	4632      	mov	r2, r6
 8004b9e:	4641      	mov	r1, r8
 8004ba0:	f000 faa6 	bl	80050f0 <memmove>
 8004ba4:	68a3      	ldr	r3, [r4, #8]
 8004ba6:	1b9b      	subs	r3, r3, r6
 8004ba8:	60a3      	str	r3, [r4, #8]
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	4433      	add	r3, r6
 8004bae:	6023      	str	r3, [r4, #0]
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb6:	462a      	mov	r2, r5
 8004bb8:	f000 fad2 	bl	8005160 <_realloc_r>
 8004bbc:	4606      	mov	r6, r0
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	d1e0      	bne.n	8004b84 <__ssputs_r+0x5c>
 8004bc2:	6921      	ldr	r1, [r4, #16]
 8004bc4:	4650      	mov	r0, sl
 8004bc6:	f7ff feb7 	bl	8004938 <_free_r>
 8004bca:	230c      	movs	r3, #12
 8004bcc:	f8ca 3000 	str.w	r3, [sl]
 8004bd0:	89a3      	ldrh	r3, [r4, #12]
 8004bd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bd6:	81a3      	strh	r3, [r4, #12]
 8004bd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bdc:	e7e9      	b.n	8004bb2 <__ssputs_r+0x8a>
	...

08004be0 <_svfiprintf_r>:
 8004be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be4:	4698      	mov	r8, r3
 8004be6:	898b      	ldrh	r3, [r1, #12]
 8004be8:	061b      	lsls	r3, r3, #24
 8004bea:	b09d      	sub	sp, #116	@ 0x74
 8004bec:	4607      	mov	r7, r0
 8004bee:	460d      	mov	r5, r1
 8004bf0:	4614      	mov	r4, r2
 8004bf2:	d510      	bpl.n	8004c16 <_svfiprintf_r+0x36>
 8004bf4:	690b      	ldr	r3, [r1, #16]
 8004bf6:	b973      	cbnz	r3, 8004c16 <_svfiprintf_r+0x36>
 8004bf8:	2140      	movs	r1, #64	@ 0x40
 8004bfa:	f7ff ff09 	bl	8004a10 <_malloc_r>
 8004bfe:	6028      	str	r0, [r5, #0]
 8004c00:	6128      	str	r0, [r5, #16]
 8004c02:	b930      	cbnz	r0, 8004c12 <_svfiprintf_r+0x32>
 8004c04:	230c      	movs	r3, #12
 8004c06:	603b      	str	r3, [r7, #0]
 8004c08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c0c:	b01d      	add	sp, #116	@ 0x74
 8004c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c12:	2340      	movs	r3, #64	@ 0x40
 8004c14:	616b      	str	r3, [r5, #20]
 8004c16:	2300      	movs	r3, #0
 8004c18:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c1a:	2320      	movs	r3, #32
 8004c1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c20:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c24:	2330      	movs	r3, #48	@ 0x30
 8004c26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004dc4 <_svfiprintf_r+0x1e4>
 8004c2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c2e:	f04f 0901 	mov.w	r9, #1
 8004c32:	4623      	mov	r3, r4
 8004c34:	469a      	mov	sl, r3
 8004c36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c3a:	b10a      	cbz	r2, 8004c40 <_svfiprintf_r+0x60>
 8004c3c:	2a25      	cmp	r2, #37	@ 0x25
 8004c3e:	d1f9      	bne.n	8004c34 <_svfiprintf_r+0x54>
 8004c40:	ebba 0b04 	subs.w	fp, sl, r4
 8004c44:	d00b      	beq.n	8004c5e <_svfiprintf_r+0x7e>
 8004c46:	465b      	mov	r3, fp
 8004c48:	4622      	mov	r2, r4
 8004c4a:	4629      	mov	r1, r5
 8004c4c:	4638      	mov	r0, r7
 8004c4e:	f7ff ff6b 	bl	8004b28 <__ssputs_r>
 8004c52:	3001      	adds	r0, #1
 8004c54:	f000 80a7 	beq.w	8004da6 <_svfiprintf_r+0x1c6>
 8004c58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c5a:	445a      	add	r2, fp
 8004c5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 809f 	beq.w	8004da6 <_svfiprintf_r+0x1c6>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c72:	f10a 0a01 	add.w	sl, sl, #1
 8004c76:	9304      	str	r3, [sp, #16]
 8004c78:	9307      	str	r3, [sp, #28]
 8004c7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c80:	4654      	mov	r4, sl
 8004c82:	2205      	movs	r2, #5
 8004c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c88:	484e      	ldr	r0, [pc, #312]	@ (8004dc4 <_svfiprintf_r+0x1e4>)
 8004c8a:	f7fb fac1 	bl	8000210 <memchr>
 8004c8e:	9a04      	ldr	r2, [sp, #16]
 8004c90:	b9d8      	cbnz	r0, 8004cca <_svfiprintf_r+0xea>
 8004c92:	06d0      	lsls	r0, r2, #27
 8004c94:	bf44      	itt	mi
 8004c96:	2320      	movmi	r3, #32
 8004c98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c9c:	0711      	lsls	r1, r2, #28
 8004c9e:	bf44      	itt	mi
 8004ca0:	232b      	movmi	r3, #43	@ 0x2b
 8004ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ca6:	f89a 3000 	ldrb.w	r3, [sl]
 8004caa:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cac:	d015      	beq.n	8004cda <_svfiprintf_r+0xfa>
 8004cae:	9a07      	ldr	r2, [sp, #28]
 8004cb0:	4654      	mov	r4, sl
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	f04f 0c0a 	mov.w	ip, #10
 8004cb8:	4621      	mov	r1, r4
 8004cba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cbe:	3b30      	subs	r3, #48	@ 0x30
 8004cc0:	2b09      	cmp	r3, #9
 8004cc2:	d94b      	bls.n	8004d5c <_svfiprintf_r+0x17c>
 8004cc4:	b1b0      	cbz	r0, 8004cf4 <_svfiprintf_r+0x114>
 8004cc6:	9207      	str	r2, [sp, #28]
 8004cc8:	e014      	b.n	8004cf4 <_svfiprintf_r+0x114>
 8004cca:	eba0 0308 	sub.w	r3, r0, r8
 8004cce:	fa09 f303 	lsl.w	r3, r9, r3
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	9304      	str	r3, [sp, #16]
 8004cd6:	46a2      	mov	sl, r4
 8004cd8:	e7d2      	b.n	8004c80 <_svfiprintf_r+0xa0>
 8004cda:	9b03      	ldr	r3, [sp, #12]
 8004cdc:	1d19      	adds	r1, r3, #4
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	9103      	str	r1, [sp, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	bfbb      	ittet	lt
 8004ce6:	425b      	neglt	r3, r3
 8004ce8:	f042 0202 	orrlt.w	r2, r2, #2
 8004cec:	9307      	strge	r3, [sp, #28]
 8004cee:	9307      	strlt	r3, [sp, #28]
 8004cf0:	bfb8      	it	lt
 8004cf2:	9204      	strlt	r2, [sp, #16]
 8004cf4:	7823      	ldrb	r3, [r4, #0]
 8004cf6:	2b2e      	cmp	r3, #46	@ 0x2e
 8004cf8:	d10a      	bne.n	8004d10 <_svfiprintf_r+0x130>
 8004cfa:	7863      	ldrb	r3, [r4, #1]
 8004cfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cfe:	d132      	bne.n	8004d66 <_svfiprintf_r+0x186>
 8004d00:	9b03      	ldr	r3, [sp, #12]
 8004d02:	1d1a      	adds	r2, r3, #4
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	9203      	str	r2, [sp, #12]
 8004d08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d0c:	3402      	adds	r4, #2
 8004d0e:	9305      	str	r3, [sp, #20]
 8004d10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004dd4 <_svfiprintf_r+0x1f4>
 8004d14:	7821      	ldrb	r1, [r4, #0]
 8004d16:	2203      	movs	r2, #3
 8004d18:	4650      	mov	r0, sl
 8004d1a:	f7fb fa79 	bl	8000210 <memchr>
 8004d1e:	b138      	cbz	r0, 8004d30 <_svfiprintf_r+0x150>
 8004d20:	9b04      	ldr	r3, [sp, #16]
 8004d22:	eba0 000a 	sub.w	r0, r0, sl
 8004d26:	2240      	movs	r2, #64	@ 0x40
 8004d28:	4082      	lsls	r2, r0
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	3401      	adds	r4, #1
 8004d2e:	9304      	str	r3, [sp, #16]
 8004d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d34:	4824      	ldr	r0, [pc, #144]	@ (8004dc8 <_svfiprintf_r+0x1e8>)
 8004d36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d3a:	2206      	movs	r2, #6
 8004d3c:	f7fb fa68 	bl	8000210 <memchr>
 8004d40:	2800      	cmp	r0, #0
 8004d42:	d036      	beq.n	8004db2 <_svfiprintf_r+0x1d2>
 8004d44:	4b21      	ldr	r3, [pc, #132]	@ (8004dcc <_svfiprintf_r+0x1ec>)
 8004d46:	bb1b      	cbnz	r3, 8004d90 <_svfiprintf_r+0x1b0>
 8004d48:	9b03      	ldr	r3, [sp, #12]
 8004d4a:	3307      	adds	r3, #7
 8004d4c:	f023 0307 	bic.w	r3, r3, #7
 8004d50:	3308      	adds	r3, #8
 8004d52:	9303      	str	r3, [sp, #12]
 8004d54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d56:	4433      	add	r3, r6
 8004d58:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d5a:	e76a      	b.n	8004c32 <_svfiprintf_r+0x52>
 8004d5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d60:	460c      	mov	r4, r1
 8004d62:	2001      	movs	r0, #1
 8004d64:	e7a8      	b.n	8004cb8 <_svfiprintf_r+0xd8>
 8004d66:	2300      	movs	r3, #0
 8004d68:	3401      	adds	r4, #1
 8004d6a:	9305      	str	r3, [sp, #20]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	f04f 0c0a 	mov.w	ip, #10
 8004d72:	4620      	mov	r0, r4
 8004d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d78:	3a30      	subs	r2, #48	@ 0x30
 8004d7a:	2a09      	cmp	r2, #9
 8004d7c:	d903      	bls.n	8004d86 <_svfiprintf_r+0x1a6>
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0c6      	beq.n	8004d10 <_svfiprintf_r+0x130>
 8004d82:	9105      	str	r1, [sp, #20]
 8004d84:	e7c4      	b.n	8004d10 <_svfiprintf_r+0x130>
 8004d86:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e7f0      	b.n	8004d72 <_svfiprintf_r+0x192>
 8004d90:	ab03      	add	r3, sp, #12
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	462a      	mov	r2, r5
 8004d96:	4b0e      	ldr	r3, [pc, #56]	@ (8004dd0 <_svfiprintf_r+0x1f0>)
 8004d98:	a904      	add	r1, sp, #16
 8004d9a:	4638      	mov	r0, r7
 8004d9c:	f3af 8000 	nop.w
 8004da0:	1c42      	adds	r2, r0, #1
 8004da2:	4606      	mov	r6, r0
 8004da4:	d1d6      	bne.n	8004d54 <_svfiprintf_r+0x174>
 8004da6:	89ab      	ldrh	r3, [r5, #12]
 8004da8:	065b      	lsls	r3, r3, #25
 8004daa:	f53f af2d 	bmi.w	8004c08 <_svfiprintf_r+0x28>
 8004dae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004db0:	e72c      	b.n	8004c0c <_svfiprintf_r+0x2c>
 8004db2:	ab03      	add	r3, sp, #12
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	462a      	mov	r2, r5
 8004db8:	4b05      	ldr	r3, [pc, #20]	@ (8004dd0 <_svfiprintf_r+0x1f0>)
 8004dba:	a904      	add	r1, sp, #16
 8004dbc:	4638      	mov	r0, r7
 8004dbe:	f000 f879 	bl	8004eb4 <_printf_i>
 8004dc2:	e7ed      	b.n	8004da0 <_svfiprintf_r+0x1c0>
 8004dc4:	08005315 	.word	0x08005315
 8004dc8:	0800531f 	.word	0x0800531f
 8004dcc:	00000000 	.word	0x00000000
 8004dd0:	08004b29 	.word	0x08004b29
 8004dd4:	0800531b 	.word	0x0800531b

08004dd8 <_printf_common>:
 8004dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ddc:	4616      	mov	r6, r2
 8004dde:	4698      	mov	r8, r3
 8004de0:	688a      	ldr	r2, [r1, #8]
 8004de2:	690b      	ldr	r3, [r1, #16]
 8004de4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004de8:	4293      	cmp	r3, r2
 8004dea:	bfb8      	it	lt
 8004dec:	4613      	movlt	r3, r2
 8004dee:	6033      	str	r3, [r6, #0]
 8004df0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004df4:	4607      	mov	r7, r0
 8004df6:	460c      	mov	r4, r1
 8004df8:	b10a      	cbz	r2, 8004dfe <_printf_common+0x26>
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	6033      	str	r3, [r6, #0]
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	0699      	lsls	r1, r3, #26
 8004e02:	bf42      	ittt	mi
 8004e04:	6833      	ldrmi	r3, [r6, #0]
 8004e06:	3302      	addmi	r3, #2
 8004e08:	6033      	strmi	r3, [r6, #0]
 8004e0a:	6825      	ldr	r5, [r4, #0]
 8004e0c:	f015 0506 	ands.w	r5, r5, #6
 8004e10:	d106      	bne.n	8004e20 <_printf_common+0x48>
 8004e12:	f104 0a19 	add.w	sl, r4, #25
 8004e16:	68e3      	ldr	r3, [r4, #12]
 8004e18:	6832      	ldr	r2, [r6, #0]
 8004e1a:	1a9b      	subs	r3, r3, r2
 8004e1c:	42ab      	cmp	r3, r5
 8004e1e:	dc26      	bgt.n	8004e6e <_printf_common+0x96>
 8004e20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e24:	6822      	ldr	r2, [r4, #0]
 8004e26:	3b00      	subs	r3, #0
 8004e28:	bf18      	it	ne
 8004e2a:	2301      	movne	r3, #1
 8004e2c:	0692      	lsls	r2, r2, #26
 8004e2e:	d42b      	bmi.n	8004e88 <_printf_common+0xb0>
 8004e30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e34:	4641      	mov	r1, r8
 8004e36:	4638      	mov	r0, r7
 8004e38:	47c8      	blx	r9
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	d01e      	beq.n	8004e7c <_printf_common+0xa4>
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	6922      	ldr	r2, [r4, #16]
 8004e42:	f003 0306 	and.w	r3, r3, #6
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	bf02      	ittt	eq
 8004e4a:	68e5      	ldreq	r5, [r4, #12]
 8004e4c:	6833      	ldreq	r3, [r6, #0]
 8004e4e:	1aed      	subeq	r5, r5, r3
 8004e50:	68a3      	ldr	r3, [r4, #8]
 8004e52:	bf0c      	ite	eq
 8004e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e58:	2500      	movne	r5, #0
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	bfc4      	itt	gt
 8004e5e:	1a9b      	subgt	r3, r3, r2
 8004e60:	18ed      	addgt	r5, r5, r3
 8004e62:	2600      	movs	r6, #0
 8004e64:	341a      	adds	r4, #26
 8004e66:	42b5      	cmp	r5, r6
 8004e68:	d11a      	bne.n	8004ea0 <_printf_common+0xc8>
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	e008      	b.n	8004e80 <_printf_common+0xa8>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	4652      	mov	r2, sl
 8004e72:	4641      	mov	r1, r8
 8004e74:	4638      	mov	r0, r7
 8004e76:	47c8      	blx	r9
 8004e78:	3001      	adds	r0, #1
 8004e7a:	d103      	bne.n	8004e84 <_printf_common+0xac>
 8004e7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e84:	3501      	adds	r5, #1
 8004e86:	e7c6      	b.n	8004e16 <_printf_common+0x3e>
 8004e88:	18e1      	adds	r1, r4, r3
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	2030      	movs	r0, #48	@ 0x30
 8004e8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e92:	4422      	add	r2, r4
 8004e94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e9c:	3302      	adds	r3, #2
 8004e9e:	e7c7      	b.n	8004e30 <_printf_common+0x58>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	4622      	mov	r2, r4
 8004ea4:	4641      	mov	r1, r8
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	47c8      	blx	r9
 8004eaa:	3001      	adds	r0, #1
 8004eac:	d0e6      	beq.n	8004e7c <_printf_common+0xa4>
 8004eae:	3601      	adds	r6, #1
 8004eb0:	e7d9      	b.n	8004e66 <_printf_common+0x8e>
	...

08004eb4 <_printf_i>:
 8004eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb8:	7e0f      	ldrb	r7, [r1, #24]
 8004eba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ebc:	2f78      	cmp	r7, #120	@ 0x78
 8004ebe:	4691      	mov	r9, r2
 8004ec0:	4680      	mov	r8, r0
 8004ec2:	460c      	mov	r4, r1
 8004ec4:	469a      	mov	sl, r3
 8004ec6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004eca:	d807      	bhi.n	8004edc <_printf_i+0x28>
 8004ecc:	2f62      	cmp	r7, #98	@ 0x62
 8004ece:	d80a      	bhi.n	8004ee6 <_printf_i+0x32>
 8004ed0:	2f00      	cmp	r7, #0
 8004ed2:	f000 80d1 	beq.w	8005078 <_printf_i+0x1c4>
 8004ed6:	2f58      	cmp	r7, #88	@ 0x58
 8004ed8:	f000 80b8 	beq.w	800504c <_printf_i+0x198>
 8004edc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ee0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ee4:	e03a      	b.n	8004f5c <_printf_i+0xa8>
 8004ee6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004eea:	2b15      	cmp	r3, #21
 8004eec:	d8f6      	bhi.n	8004edc <_printf_i+0x28>
 8004eee:	a101      	add	r1, pc, #4	@ (adr r1, 8004ef4 <_printf_i+0x40>)
 8004ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ef4:	08004f4d 	.word	0x08004f4d
 8004ef8:	08004f61 	.word	0x08004f61
 8004efc:	08004edd 	.word	0x08004edd
 8004f00:	08004edd 	.word	0x08004edd
 8004f04:	08004edd 	.word	0x08004edd
 8004f08:	08004edd 	.word	0x08004edd
 8004f0c:	08004f61 	.word	0x08004f61
 8004f10:	08004edd 	.word	0x08004edd
 8004f14:	08004edd 	.word	0x08004edd
 8004f18:	08004edd 	.word	0x08004edd
 8004f1c:	08004edd 	.word	0x08004edd
 8004f20:	0800505f 	.word	0x0800505f
 8004f24:	08004f8b 	.word	0x08004f8b
 8004f28:	08005019 	.word	0x08005019
 8004f2c:	08004edd 	.word	0x08004edd
 8004f30:	08004edd 	.word	0x08004edd
 8004f34:	08005081 	.word	0x08005081
 8004f38:	08004edd 	.word	0x08004edd
 8004f3c:	08004f8b 	.word	0x08004f8b
 8004f40:	08004edd 	.word	0x08004edd
 8004f44:	08004edd 	.word	0x08004edd
 8004f48:	08005021 	.word	0x08005021
 8004f4c:	6833      	ldr	r3, [r6, #0]
 8004f4e:	1d1a      	adds	r2, r3, #4
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6032      	str	r2, [r6, #0]
 8004f54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e09c      	b.n	800509a <_printf_i+0x1e6>
 8004f60:	6833      	ldr	r3, [r6, #0]
 8004f62:	6820      	ldr	r0, [r4, #0]
 8004f64:	1d19      	adds	r1, r3, #4
 8004f66:	6031      	str	r1, [r6, #0]
 8004f68:	0606      	lsls	r6, r0, #24
 8004f6a:	d501      	bpl.n	8004f70 <_printf_i+0xbc>
 8004f6c:	681d      	ldr	r5, [r3, #0]
 8004f6e:	e003      	b.n	8004f78 <_printf_i+0xc4>
 8004f70:	0645      	lsls	r5, r0, #25
 8004f72:	d5fb      	bpl.n	8004f6c <_printf_i+0xb8>
 8004f74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f78:	2d00      	cmp	r5, #0
 8004f7a:	da03      	bge.n	8004f84 <_printf_i+0xd0>
 8004f7c:	232d      	movs	r3, #45	@ 0x2d
 8004f7e:	426d      	negs	r5, r5
 8004f80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f84:	4858      	ldr	r0, [pc, #352]	@ (80050e8 <_printf_i+0x234>)
 8004f86:	230a      	movs	r3, #10
 8004f88:	e011      	b.n	8004fae <_printf_i+0xfa>
 8004f8a:	6821      	ldr	r1, [r4, #0]
 8004f8c:	6833      	ldr	r3, [r6, #0]
 8004f8e:	0608      	lsls	r0, r1, #24
 8004f90:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f94:	d402      	bmi.n	8004f9c <_printf_i+0xe8>
 8004f96:	0649      	lsls	r1, r1, #25
 8004f98:	bf48      	it	mi
 8004f9a:	b2ad      	uxthmi	r5, r5
 8004f9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f9e:	4852      	ldr	r0, [pc, #328]	@ (80050e8 <_printf_i+0x234>)
 8004fa0:	6033      	str	r3, [r6, #0]
 8004fa2:	bf14      	ite	ne
 8004fa4:	230a      	movne	r3, #10
 8004fa6:	2308      	moveq	r3, #8
 8004fa8:	2100      	movs	r1, #0
 8004faa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fae:	6866      	ldr	r6, [r4, #4]
 8004fb0:	60a6      	str	r6, [r4, #8]
 8004fb2:	2e00      	cmp	r6, #0
 8004fb4:	db05      	blt.n	8004fc2 <_printf_i+0x10e>
 8004fb6:	6821      	ldr	r1, [r4, #0]
 8004fb8:	432e      	orrs	r6, r5
 8004fba:	f021 0104 	bic.w	r1, r1, #4
 8004fbe:	6021      	str	r1, [r4, #0]
 8004fc0:	d04b      	beq.n	800505a <_printf_i+0x1a6>
 8004fc2:	4616      	mov	r6, r2
 8004fc4:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fc8:	fb03 5711 	mls	r7, r3, r1, r5
 8004fcc:	5dc7      	ldrb	r7, [r0, r7]
 8004fce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fd2:	462f      	mov	r7, r5
 8004fd4:	42bb      	cmp	r3, r7
 8004fd6:	460d      	mov	r5, r1
 8004fd8:	d9f4      	bls.n	8004fc4 <_printf_i+0x110>
 8004fda:	2b08      	cmp	r3, #8
 8004fdc:	d10b      	bne.n	8004ff6 <_printf_i+0x142>
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	07df      	lsls	r7, r3, #31
 8004fe2:	d508      	bpl.n	8004ff6 <_printf_i+0x142>
 8004fe4:	6923      	ldr	r3, [r4, #16]
 8004fe6:	6861      	ldr	r1, [r4, #4]
 8004fe8:	4299      	cmp	r1, r3
 8004fea:	bfde      	ittt	le
 8004fec:	2330      	movle	r3, #48	@ 0x30
 8004fee:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ff2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004ff6:	1b92      	subs	r2, r2, r6
 8004ff8:	6122      	str	r2, [r4, #16]
 8004ffa:	f8cd a000 	str.w	sl, [sp]
 8004ffe:	464b      	mov	r3, r9
 8005000:	aa03      	add	r2, sp, #12
 8005002:	4621      	mov	r1, r4
 8005004:	4640      	mov	r0, r8
 8005006:	f7ff fee7 	bl	8004dd8 <_printf_common>
 800500a:	3001      	adds	r0, #1
 800500c:	d14a      	bne.n	80050a4 <_printf_i+0x1f0>
 800500e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005012:	b004      	add	sp, #16
 8005014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005018:	6823      	ldr	r3, [r4, #0]
 800501a:	f043 0320 	orr.w	r3, r3, #32
 800501e:	6023      	str	r3, [r4, #0]
 8005020:	4832      	ldr	r0, [pc, #200]	@ (80050ec <_printf_i+0x238>)
 8005022:	2778      	movs	r7, #120	@ 0x78
 8005024:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005028:	6823      	ldr	r3, [r4, #0]
 800502a:	6831      	ldr	r1, [r6, #0]
 800502c:	061f      	lsls	r7, r3, #24
 800502e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005032:	d402      	bmi.n	800503a <_printf_i+0x186>
 8005034:	065f      	lsls	r7, r3, #25
 8005036:	bf48      	it	mi
 8005038:	b2ad      	uxthmi	r5, r5
 800503a:	6031      	str	r1, [r6, #0]
 800503c:	07d9      	lsls	r1, r3, #31
 800503e:	bf44      	itt	mi
 8005040:	f043 0320 	orrmi.w	r3, r3, #32
 8005044:	6023      	strmi	r3, [r4, #0]
 8005046:	b11d      	cbz	r5, 8005050 <_printf_i+0x19c>
 8005048:	2310      	movs	r3, #16
 800504a:	e7ad      	b.n	8004fa8 <_printf_i+0xf4>
 800504c:	4826      	ldr	r0, [pc, #152]	@ (80050e8 <_printf_i+0x234>)
 800504e:	e7e9      	b.n	8005024 <_printf_i+0x170>
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	f023 0320 	bic.w	r3, r3, #32
 8005056:	6023      	str	r3, [r4, #0]
 8005058:	e7f6      	b.n	8005048 <_printf_i+0x194>
 800505a:	4616      	mov	r6, r2
 800505c:	e7bd      	b.n	8004fda <_printf_i+0x126>
 800505e:	6833      	ldr	r3, [r6, #0]
 8005060:	6825      	ldr	r5, [r4, #0]
 8005062:	6961      	ldr	r1, [r4, #20]
 8005064:	1d18      	adds	r0, r3, #4
 8005066:	6030      	str	r0, [r6, #0]
 8005068:	062e      	lsls	r6, r5, #24
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	d501      	bpl.n	8005072 <_printf_i+0x1be>
 800506e:	6019      	str	r1, [r3, #0]
 8005070:	e002      	b.n	8005078 <_printf_i+0x1c4>
 8005072:	0668      	lsls	r0, r5, #25
 8005074:	d5fb      	bpl.n	800506e <_printf_i+0x1ba>
 8005076:	8019      	strh	r1, [r3, #0]
 8005078:	2300      	movs	r3, #0
 800507a:	6123      	str	r3, [r4, #16]
 800507c:	4616      	mov	r6, r2
 800507e:	e7bc      	b.n	8004ffa <_printf_i+0x146>
 8005080:	6833      	ldr	r3, [r6, #0]
 8005082:	1d1a      	adds	r2, r3, #4
 8005084:	6032      	str	r2, [r6, #0]
 8005086:	681e      	ldr	r6, [r3, #0]
 8005088:	6862      	ldr	r2, [r4, #4]
 800508a:	2100      	movs	r1, #0
 800508c:	4630      	mov	r0, r6
 800508e:	f7fb f8bf 	bl	8000210 <memchr>
 8005092:	b108      	cbz	r0, 8005098 <_printf_i+0x1e4>
 8005094:	1b80      	subs	r0, r0, r6
 8005096:	6060      	str	r0, [r4, #4]
 8005098:	6863      	ldr	r3, [r4, #4]
 800509a:	6123      	str	r3, [r4, #16]
 800509c:	2300      	movs	r3, #0
 800509e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050a2:	e7aa      	b.n	8004ffa <_printf_i+0x146>
 80050a4:	6923      	ldr	r3, [r4, #16]
 80050a6:	4632      	mov	r2, r6
 80050a8:	4649      	mov	r1, r9
 80050aa:	4640      	mov	r0, r8
 80050ac:	47d0      	blx	sl
 80050ae:	3001      	adds	r0, #1
 80050b0:	d0ad      	beq.n	800500e <_printf_i+0x15a>
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	079b      	lsls	r3, r3, #30
 80050b6:	d413      	bmi.n	80050e0 <_printf_i+0x22c>
 80050b8:	68e0      	ldr	r0, [r4, #12]
 80050ba:	9b03      	ldr	r3, [sp, #12]
 80050bc:	4298      	cmp	r0, r3
 80050be:	bfb8      	it	lt
 80050c0:	4618      	movlt	r0, r3
 80050c2:	e7a6      	b.n	8005012 <_printf_i+0x15e>
 80050c4:	2301      	movs	r3, #1
 80050c6:	4632      	mov	r2, r6
 80050c8:	4649      	mov	r1, r9
 80050ca:	4640      	mov	r0, r8
 80050cc:	47d0      	blx	sl
 80050ce:	3001      	adds	r0, #1
 80050d0:	d09d      	beq.n	800500e <_printf_i+0x15a>
 80050d2:	3501      	adds	r5, #1
 80050d4:	68e3      	ldr	r3, [r4, #12]
 80050d6:	9903      	ldr	r1, [sp, #12]
 80050d8:	1a5b      	subs	r3, r3, r1
 80050da:	42ab      	cmp	r3, r5
 80050dc:	dcf2      	bgt.n	80050c4 <_printf_i+0x210>
 80050de:	e7eb      	b.n	80050b8 <_printf_i+0x204>
 80050e0:	2500      	movs	r5, #0
 80050e2:	f104 0619 	add.w	r6, r4, #25
 80050e6:	e7f5      	b.n	80050d4 <_printf_i+0x220>
 80050e8:	08005326 	.word	0x08005326
 80050ec:	08005337 	.word	0x08005337

080050f0 <memmove>:
 80050f0:	4288      	cmp	r0, r1
 80050f2:	b510      	push	{r4, lr}
 80050f4:	eb01 0402 	add.w	r4, r1, r2
 80050f8:	d902      	bls.n	8005100 <memmove+0x10>
 80050fa:	4284      	cmp	r4, r0
 80050fc:	4623      	mov	r3, r4
 80050fe:	d807      	bhi.n	8005110 <memmove+0x20>
 8005100:	1e43      	subs	r3, r0, #1
 8005102:	42a1      	cmp	r1, r4
 8005104:	d008      	beq.n	8005118 <memmove+0x28>
 8005106:	f811 2b01 	ldrb.w	r2, [r1], #1
 800510a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800510e:	e7f8      	b.n	8005102 <memmove+0x12>
 8005110:	4402      	add	r2, r0
 8005112:	4601      	mov	r1, r0
 8005114:	428a      	cmp	r2, r1
 8005116:	d100      	bne.n	800511a <memmove+0x2a>
 8005118:	bd10      	pop	{r4, pc}
 800511a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800511e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005122:	e7f7      	b.n	8005114 <memmove+0x24>

08005124 <_sbrk_r>:
 8005124:	b538      	push	{r3, r4, r5, lr}
 8005126:	4d06      	ldr	r5, [pc, #24]	@ (8005140 <_sbrk_r+0x1c>)
 8005128:	2300      	movs	r3, #0
 800512a:	4604      	mov	r4, r0
 800512c:	4608      	mov	r0, r1
 800512e:	602b      	str	r3, [r5, #0]
 8005130:	f7fb ff26 	bl	8000f80 <_sbrk>
 8005134:	1c43      	adds	r3, r0, #1
 8005136:	d102      	bne.n	800513e <_sbrk_r+0x1a>
 8005138:	682b      	ldr	r3, [r5, #0]
 800513a:	b103      	cbz	r3, 800513e <_sbrk_r+0x1a>
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	bd38      	pop	{r3, r4, r5, pc}
 8005140:	2000037c 	.word	0x2000037c

08005144 <memcpy>:
 8005144:	440a      	add	r2, r1
 8005146:	4291      	cmp	r1, r2
 8005148:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800514c:	d100      	bne.n	8005150 <memcpy+0xc>
 800514e:	4770      	bx	lr
 8005150:	b510      	push	{r4, lr}
 8005152:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005156:	f803 4f01 	strb.w	r4, [r3, #1]!
 800515a:	4291      	cmp	r1, r2
 800515c:	d1f9      	bne.n	8005152 <memcpy+0xe>
 800515e:	bd10      	pop	{r4, pc}

08005160 <_realloc_r>:
 8005160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005164:	4607      	mov	r7, r0
 8005166:	4614      	mov	r4, r2
 8005168:	460d      	mov	r5, r1
 800516a:	b921      	cbnz	r1, 8005176 <_realloc_r+0x16>
 800516c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005170:	4611      	mov	r1, r2
 8005172:	f7ff bc4d 	b.w	8004a10 <_malloc_r>
 8005176:	b92a      	cbnz	r2, 8005184 <_realloc_r+0x24>
 8005178:	f7ff fbde 	bl	8004938 <_free_r>
 800517c:	4625      	mov	r5, r4
 800517e:	4628      	mov	r0, r5
 8005180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005184:	f000 f81a 	bl	80051bc <_malloc_usable_size_r>
 8005188:	4284      	cmp	r4, r0
 800518a:	4606      	mov	r6, r0
 800518c:	d802      	bhi.n	8005194 <_realloc_r+0x34>
 800518e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005192:	d8f4      	bhi.n	800517e <_realloc_r+0x1e>
 8005194:	4621      	mov	r1, r4
 8005196:	4638      	mov	r0, r7
 8005198:	f7ff fc3a 	bl	8004a10 <_malloc_r>
 800519c:	4680      	mov	r8, r0
 800519e:	b908      	cbnz	r0, 80051a4 <_realloc_r+0x44>
 80051a0:	4645      	mov	r5, r8
 80051a2:	e7ec      	b.n	800517e <_realloc_r+0x1e>
 80051a4:	42b4      	cmp	r4, r6
 80051a6:	4622      	mov	r2, r4
 80051a8:	4629      	mov	r1, r5
 80051aa:	bf28      	it	cs
 80051ac:	4632      	movcs	r2, r6
 80051ae:	f7ff ffc9 	bl	8005144 <memcpy>
 80051b2:	4629      	mov	r1, r5
 80051b4:	4638      	mov	r0, r7
 80051b6:	f7ff fbbf 	bl	8004938 <_free_r>
 80051ba:	e7f1      	b.n	80051a0 <_realloc_r+0x40>

080051bc <_malloc_usable_size_r>:
 80051bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051c0:	1f18      	subs	r0, r3, #4
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	bfbc      	itt	lt
 80051c6:	580b      	ldrlt	r3, [r1, r0]
 80051c8:	18c0      	addlt	r0, r0, r3
 80051ca:	4770      	bx	lr

080051cc <_init>:
 80051cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ce:	bf00      	nop
 80051d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051d2:	bc08      	pop	{r3}
 80051d4:	469e      	mov	lr, r3
 80051d6:	4770      	bx	lr

080051d8 <_fini>:
 80051d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051da:	bf00      	nop
 80051dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051de:	bc08      	pop	{r3}
 80051e0:	469e      	mov	lr, r3
 80051e2:	4770      	bx	lr
